
SD_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b20  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08005ca8  08005ca8  00006ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d2c  08005d2c  00007010  2**0
                  CONTENTS
  4 .ARM          00000008  08005d2c  08005d2c  00006d2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d34  08005d34  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d34  08005d34  00006d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d38  08005d38  00006d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08005d3c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007010  2**0
                  CONTENTS
 10 .bss          000003bc  20000010  20000010  00007010  2**2
                  ALLOC
 11 ._user_heap_stack 00000c04  200003cc  200003cc  00007010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd9a  00000000  00000000  00007040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280b  00000000  00000000  00016dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000db0  00000000  00000000  000195e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a71  00000000  00000000  0001a398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000229df  00000000  00000000  0001ae09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001298c  00000000  00000000  0003d7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9ba8  00000000  00000000  00050174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00119d1c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000037a4  00000000  00000000  00119d60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0011d504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c90 	.word	0x08005c90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005c90 	.word	0x08005c90

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fb2e 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f838 	bl	8000534 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f90c 	bl	80006e0 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f000 f8ea 	bl	80006a0 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 80004cc:	f000 f89c 	bl	8000608 <MX_SDIO_SD_Init>
  MX_USART2_UART_Init();
 80004d0:	f000 f8bc 	bl	800064c <MX_USART2_UART_Init>
  MX_FATFS_Init();
 80004d4:	f004 fd36 	bl	8004f44 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(DONE_GPIO_Port, DONE_Pin, GPIO_PIN_SET);
 80004d8:	2201      	movs	r2, #1
 80004da:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004de:	4810      	ldr	r0, [pc, #64]	@ (8000520 <main+0x68>)
 80004e0:	f001 f9f4 	bl	80018cc <HAL_GPIO_WritePin>

  if (f_mount(&fileSystem, "", 1) != FR_OK){
 80004e4:	2201      	movs	r2, #1
 80004e6:	490f      	ldr	r1, [pc, #60]	@ (8000524 <main+0x6c>)
 80004e8:	480f      	ldr	r0, [pc, #60]	@ (8000528 <main+0x70>)
 80004ea:	f005 fb03 	bl	8005af4 <f_mount>
 80004ee:	4603      	mov	r3, r0
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d007      	beq.n	8000504 <main+0x4c>
	  HAL_GPIO_WritePin(GPIOD, Mount_Status_Pin|DONE_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80004fa:	4809      	ldr	r0, [pc, #36]	@ (8000520 <main+0x68>)
 80004fc:	f001 f9e6 	bl	80018cc <HAL_GPIO_WritePin>
	  Error_Handler();
 8000500:	f000 f974 	bl	80007ec <Error_Handler>
  }
  HAL_GPIO_WritePin(GPIOD, Mount_Status_Pin|DONE_Pin, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800050a:	4805      	ldr	r0, [pc, #20]	@ (8000520 <main+0x68>)
 800050c:	f001 f9de 	bl	80018cc <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 1);
 8000510:	2201      	movs	r2, #1
 8000512:	4906      	ldr	r1, [pc, #24]	@ (800052c <main+0x74>)
 8000514:	4806      	ldr	r0, [pc, #24]	@ (8000530 <main+0x78>)
 8000516:	f003 f87d 	bl	8003614 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800051a:	bf00      	nop
 800051c:	e7fd      	b.n	800051a <main+0x62>
 800051e:	bf00      	nop
 8000520:	40020c00 	.word	0x40020c00
 8000524:	08005ca8 	.word	0x08005ca8
 8000528:	20000158 	.word	0x20000158
 800052c:	20000388 	.word	0x20000388
 8000530:	200000b0 	.word	0x200000b0

08000534 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b094      	sub	sp, #80	@ 0x50
 8000538:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	2230      	movs	r2, #48	@ 0x30
 8000540:	2100      	movs	r1, #0
 8000542:	4618      	mov	r0, r3
 8000544:	f005 fb77 	bl	8005c36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000548:	f107 030c 	add.w	r3, r7, #12
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
 8000550:	605a      	str	r2, [r3, #4]
 8000552:	609a      	str	r2, [r3, #8]
 8000554:	60da      	str	r2, [r3, #12]
 8000556:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000558:	2300      	movs	r3, #0
 800055a:	60bb      	str	r3, [r7, #8]
 800055c:	4b28      	ldr	r3, [pc, #160]	@ (8000600 <SystemClock_Config+0xcc>)
 800055e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000560:	4a27      	ldr	r2, [pc, #156]	@ (8000600 <SystemClock_Config+0xcc>)
 8000562:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000566:	6413      	str	r3, [r2, #64]	@ 0x40
 8000568:	4b25      	ldr	r3, [pc, #148]	@ (8000600 <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000570:	60bb      	str	r3, [r7, #8]
 8000572:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000574:	2300      	movs	r3, #0
 8000576:	607b      	str	r3, [r7, #4]
 8000578:	4b22      	ldr	r3, [pc, #136]	@ (8000604 <SystemClock_Config+0xd0>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a21      	ldr	r2, [pc, #132]	@ (8000604 <SystemClock_Config+0xd0>)
 800057e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000582:	6013      	str	r3, [r2, #0]
 8000584:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000590:	2302      	movs	r3, #2
 8000592:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000594:	2301      	movs	r3, #1
 8000596:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000598:	2310      	movs	r3, #16
 800059a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800059c:	2302      	movs	r3, #2
 800059e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005a0:	2300      	movs	r3, #0
 80005a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005a4:	2308      	movs	r3, #8
 80005a6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a8:	23a8      	movs	r3, #168	@ 0xa8
 80005aa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005ac:	2302      	movs	r3, #2
 80005ae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005b0:	2307      	movs	r3, #7
 80005b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0320 	add.w	r3, r7, #32
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 f9a1 	bl	8001900 <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c4:	f000 f912 	bl	80007ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c8:	230f      	movs	r3, #15
 80005ca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005d8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2105      	movs	r1, #5
 80005e6:	4618      	mov	r0, r3
 80005e8:	f001 fc02 	bl	8001df0 <HAL_RCC_ClockConfig>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d001      	beq.n	80005f6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005f2:	f000 f8fb 	bl	80007ec <Error_Handler>
  }
}
 80005f6:	bf00      	nop
 80005f8:	3750      	adds	r7, #80	@ 0x50
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}
 80005fe:	bf00      	nop
 8000600:	40023800 	.word	0x40023800
 8000604:	40007000 	.word	0x40007000

08000608 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800060c:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <MX_SDIO_SD_Init+0x3c>)
 800060e:	4a0e      	ldr	r2, [pc, #56]	@ (8000648 <MX_SDIO_SD_Init+0x40>)
 8000610:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000612:	4b0c      	ldr	r3, [pc, #48]	@ (8000644 <MX_SDIO_SD_Init+0x3c>)
 8000614:	2200      	movs	r2, #0
 8000616:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000618:	4b0a      	ldr	r3, [pc, #40]	@ (8000644 <MX_SDIO_SD_Init+0x3c>)
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800061e:	4b09      	ldr	r3, [pc, #36]	@ (8000644 <MX_SDIO_SD_Init+0x3c>)
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 8000624:	4b07      	ldr	r3, [pc, #28]	@ (8000644 <MX_SDIO_SD_Init+0x3c>)
 8000626:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800062a:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800062c:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <MX_SDIO_SD_Init+0x3c>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000632:	4b04      	ldr	r3, [pc, #16]	@ (8000644 <MX_SDIO_SD_Init+0x3c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	2000002c 	.word	0x2000002c
 8000648:	40012c00 	.word	0x40012c00

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b10      	ldr	r3, [pc, #64]	@ (8000694 <MX_USART2_UART_Init+0x48>)
 8000652:	4a11      	ldr	r2, [pc, #68]	@ (8000698 <MX_USART2_UART_Init+0x4c>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2625000;
 8000656:	4b0f      	ldr	r3, [pc, #60]	@ (8000694 <MX_USART2_UART_Init+0x48>)
 8000658:	4a10      	ldr	r2, [pc, #64]	@ (800069c <MX_USART2_UART_Init+0x50>)
 800065a:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065c:	4b0d      	ldr	r3, [pc, #52]	@ (8000694 <MX_USART2_UART_Init+0x48>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_USART2_UART_Init+0x48>)
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000668:	4b0a      	ldr	r3, [pc, #40]	@ (8000694 <MX_USART2_UART_Init+0x48>)
 800066a:	2200      	movs	r2, #0
 800066c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_USART2_UART_Init+0x48>)
 8000670:	220c      	movs	r2, #12
 8000672:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000674:	4b07      	ldr	r3, [pc, #28]	@ (8000694 <MX_USART2_UART_Init+0x48>)
 8000676:	2200      	movs	r2, #0
 8000678:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067a:	4b06      	ldr	r3, [pc, #24]	@ (8000694 <MX_USART2_UART_Init+0x48>)
 800067c:	2200      	movs	r2, #0
 800067e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000680:	4804      	ldr	r0, [pc, #16]	@ (8000694 <MX_USART2_UART_Init+0x48>)
 8000682:	f002 ff77 	bl	8003574 <HAL_UART_Init>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800068c:	f000 f8ae 	bl	80007ec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	200000b0 	.word	0x200000b0
 8000698:	40004400 	.word	0x40004400
 800069c:	00280de8 	.word	0x00280de8

080006a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b0c      	ldr	r3, [pc, #48]	@ (80006dc <MX_DMA_Init+0x3c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	4a0b      	ldr	r2, [pc, #44]	@ (80006dc <MX_DMA_Init+0x3c>)
 80006b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <MX_DMA_Init+0x3c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2011      	movs	r0, #17
 80006c8:	f000 fb99 	bl	8000dfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80006cc:	2011      	movs	r0, #17
 80006ce:	f000 fbb2 	bl	8000e36 <HAL_NVIC_EnableIRQ>

}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	@ 0x28
 80006e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	613b      	str	r3, [r7, #16]
 80006fa:	4b2e      	ldr	r3, [pc, #184]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006fe:	4a2d      	ldr	r2, [pc, #180]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 8000700:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000704:	6313      	str	r3, [r2, #48]	@ 0x30
 8000706:	4b2b      	ldr	r3, [pc, #172]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 8000708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800070a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800070e:	613b      	str	r3, [r7, #16]
 8000710:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	4b27      	ldr	r3, [pc, #156]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071a:	4a26      	ldr	r2, [pc, #152]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6313      	str	r3, [r2, #48]	@ 0x30
 8000722:	4b24      	ldr	r3, [pc, #144]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60fb      	str	r3, [r7, #12]
 800072c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800072e:	2300      	movs	r3, #0
 8000730:	60bb      	str	r3, [r7, #8]
 8000732:	4b20      	ldr	r3, [pc, #128]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000736:	4a1f      	ldr	r2, [pc, #124]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 8000738:	f043 0308 	orr.w	r3, r3, #8
 800073c:	6313      	str	r3, [r2, #48]	@ 0x30
 800073e:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000742:	f003 0308 	and.w	r3, r3, #8
 8000746:	60bb      	str	r3, [r7, #8]
 8000748:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000752:	4a18      	ldr	r2, [pc, #96]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	@ 0x30
 800075a:	4b16      	ldr	r3, [pc, #88]	@ (80007b4 <MX_GPIO_Init+0xd4>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	607b      	str	r3, [r7, #4]
 8000764:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Mount_Status_Pin|DONE_Pin, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800076c:	4812      	ldr	r0, [pc, #72]	@ (80007b8 <MX_GPIO_Init+0xd8>)
 800076e:	f001 f8ad 	bl	80018cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Mount_Status_Pin DONE_Pin */
  GPIO_InitStruct.Pin = Mount_Status_Pin|DONE_Pin;
 8000772:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000776:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4619      	mov	r1, r3
 800078a:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <MX_GPIO_Init+0xd8>)
 800078c:	f000 feea 	bl	8001564 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000790:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079e:	f107 0314 	add.w	r3, r7, #20
 80007a2:	4619      	mov	r1, r3
 80007a4:	4805      	ldr	r0, [pc, #20]	@ (80007bc <MX_GPIO_Init+0xdc>)
 80007a6:	f000 fedd 	bl	8001564 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007aa:	bf00      	nop
 80007ac:	3728      	adds	r7, #40	@ 0x28
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40020c00 	.word	0x40020c00
 80007bc:	40020000 	.word	0x40020000

080007c0 <HAL_UART_TxCpltCallback>:

    // Wait for the last DMA transmission to complete
    while (!dma_tx_complete);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a05      	ldr	r2, [pc, #20]	@ (80007e4 <HAL_UART_TxCpltCallback+0x24>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d102      	bne.n	80007d8 <HAL_UART_TxCpltCallback+0x18>
        dma_tx_complete = 1;  // Set DMA transmission complete flag
 80007d2:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <HAL_UART_TxCpltCallback+0x28>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	701a      	strb	r2, [r3, #0]
    }
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40004400 	.word	0x40004400
 80007e8:	20000000 	.word	0x20000000

080007ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f0:	b672      	cpsid	i
}
 80007f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <Error_Handler+0x8>

080007f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	b083      	sub	sp, #12
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	607b      	str	r3, [r7, #4]
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000806:	4a0f      	ldr	r2, [pc, #60]	@ (8000844 <HAL_MspInit+0x4c>)
 8000808:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800080c:	6453      	str	r3, [r2, #68]	@ 0x44
 800080e:	4b0d      	ldr	r3, [pc, #52]	@ (8000844 <HAL_MspInit+0x4c>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000812:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000816:	607b      	str	r3, [r7, #4]
 8000818:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	603b      	str	r3, [r7, #0]
 800081e:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000822:	4a08      	ldr	r2, [pc, #32]	@ (8000844 <HAL_MspInit+0x4c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000828:	6413      	str	r3, [r2, #64]	@ 0x40
 800082a:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <HAL_MspInit+0x4c>)
 800082c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800082e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000832:	603b      	str	r3, [r7, #0]
 8000834:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000836:	bf00      	nop
 8000838:	370c      	adds	r7, #12
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr
 8000842:	bf00      	nop
 8000844:	40023800 	.word	0x40023800

08000848 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	@ 0x28
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a28      	ldr	r2, [pc, #160]	@ (8000908 <HAL_SD_MspInit+0xc0>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d14a      	bne.n	8000900 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
 800086e:	4b27      	ldr	r3, [pc, #156]	@ (800090c <HAL_SD_MspInit+0xc4>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000872:	4a26      	ldr	r2, [pc, #152]	@ (800090c <HAL_SD_MspInit+0xc4>)
 8000874:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000878:	6453      	str	r3, [r2, #68]	@ 0x44
 800087a:	4b24      	ldr	r3, [pc, #144]	@ (800090c <HAL_SD_MspInit+0xc4>)
 800087c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800087e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000882:	613b      	str	r3, [r7, #16]
 8000884:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	4b20      	ldr	r3, [pc, #128]	@ (800090c <HAL_SD_MspInit+0xc4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a1f      	ldr	r2, [pc, #124]	@ (800090c <HAL_SD_MspInit+0xc4>)
 8000890:	f043 0304 	orr.w	r3, r3, #4
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b1d      	ldr	r3, [pc, #116]	@ (800090c <HAL_SD_MspInit+0xc4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0304 	and.w	r3, r3, #4
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	60bb      	str	r3, [r7, #8]
 80008a6:	4b19      	ldr	r3, [pc, #100]	@ (800090c <HAL_SD_MspInit+0xc4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a18      	ldr	r2, [pc, #96]	@ (800090c <HAL_SD_MspInit+0xc4>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b16      	ldr	r3, [pc, #88]	@ (800090c <HAL_SD_MspInit+0xc4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008be:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80008c2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008d0:	230c      	movs	r3, #12
 80008d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d4:	f107 0314 	add.w	r3, r7, #20
 80008d8:	4619      	mov	r1, r3
 80008da:	480d      	ldr	r0, [pc, #52]	@ (8000910 <HAL_SD_MspInit+0xc8>)
 80008dc:	f000 fe42 	bl	8001564 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008e0:	2304      	movs	r3, #4
 80008e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e4:	2302      	movs	r3, #2
 80008e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	2303      	movs	r3, #3
 80008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80008f0:	230c      	movs	r3, #12
 80008f2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	4619      	mov	r1, r3
 80008fa:	4806      	ldr	r0, [pc, #24]	@ (8000914 <HAL_SD_MspInit+0xcc>)
 80008fc:	f000 fe32 	bl	8001564 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000900:	bf00      	nop
 8000902:	3728      	adds	r7, #40	@ 0x28
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40012c00 	.word	0x40012c00
 800090c:	40023800 	.word	0x40023800
 8000910:	40020800 	.word	0x40020800
 8000914:	40020c00 	.word	0x40020c00

08000918 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b08a      	sub	sp, #40	@ 0x28
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a34      	ldr	r2, [pc, #208]	@ (8000a08 <HAL_UART_MspInit+0xf0>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d162      	bne.n	8000a00 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800093a:	2300      	movs	r3, #0
 800093c:	613b      	str	r3, [r7, #16]
 800093e:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <HAL_UART_MspInit+0xf4>)
 8000940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000942:	4a32      	ldr	r2, [pc, #200]	@ (8000a0c <HAL_UART_MspInit+0xf4>)
 8000944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000948:	6413      	str	r3, [r2, #64]	@ 0x40
 800094a:	4b30      	ldr	r3, [pc, #192]	@ (8000a0c <HAL_UART_MspInit+0xf4>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800094e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000952:	613b      	str	r3, [r7, #16]
 8000954:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60fb      	str	r3, [r7, #12]
 800095a:	4b2c      	ldr	r3, [pc, #176]	@ (8000a0c <HAL_UART_MspInit+0xf4>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095e:	4a2b      	ldr	r2, [pc, #172]	@ (8000a0c <HAL_UART_MspInit+0xf4>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	@ 0x30
 8000966:	4b29      	ldr	r3, [pc, #164]	@ (8000a0c <HAL_UART_MspInit+0xf4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000972:	230c      	movs	r3, #12
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000976:	2302      	movs	r3, #2
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097e:	2303      	movs	r3, #3
 8000980:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000982:	2307      	movs	r3, #7
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000986:	f107 0314 	add.w	r3, r7, #20
 800098a:	4619      	mov	r1, r3
 800098c:	4820      	ldr	r0, [pc, #128]	@ (8000a10 <HAL_UART_MspInit+0xf8>)
 800098e:	f000 fde9 	bl	8001564 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000992:	4b20      	ldr	r3, [pc, #128]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 8000994:	4a20      	ldr	r2, [pc, #128]	@ (8000a18 <HAL_UART_MspInit+0x100>)
 8000996:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000998:	4b1e      	ldr	r3, [pc, #120]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 800099a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800099e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 80009a2:	2240      	movs	r2, #64	@ 0x40
 80009a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009ac:	4b19      	ldr	r3, [pc, #100]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 80009ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009b2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009b4:	4b17      	ldr	r3, [pc, #92]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009ba:	4b16      	ldr	r3, [pc, #88]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80009c0:	4b14      	ldr	r3, [pc, #80]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 80009c6:	4b13      	ldr	r3, [pc, #76]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 80009c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80009cc:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009ce:	4b11      	ldr	r3, [pc, #68]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80009d4:	480f      	ldr	r0, [pc, #60]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 80009d6:	f000 fa49 	bl	8000e6c <HAL_DMA_Init>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80009e0:	f7ff ff04 	bl	80007ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	4a0b      	ldr	r2, [pc, #44]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 80009e8:	639a      	str	r2, [r3, #56]	@ 0x38
 80009ea:	4a0a      	ldr	r2, [pc, #40]	@ (8000a14 <HAL_UART_MspInit+0xfc>)
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80009f0:	2200      	movs	r2, #0
 80009f2:	2100      	movs	r1, #0
 80009f4:	2026      	movs	r0, #38	@ 0x26
 80009f6:	f000 fa02 	bl	8000dfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80009fa:	2026      	movs	r0, #38	@ 0x26
 80009fc:	f000 fa1b 	bl	8000e36 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a00:	bf00      	nop
 8000a02:	3728      	adds	r7, #40	@ 0x28
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40004400 	.word	0x40004400
 8000a0c:	40023800 	.word	0x40023800
 8000a10:	40020000 	.word	0x40020000
 8000a14:	200000f8 	.word	0x200000f8
 8000a18:	400260a0 	.word	0x400260a0

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <NMI_Handler+0x4>

08000a24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a28:	bf00      	nop
 8000a2a:	e7fd      	b.n	8000a28 <HardFault_Handler+0x4>

08000a2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a30:	bf00      	nop
 8000a32:	e7fd      	b.n	8000a30 <MemManage_Handler+0x4>

08000a34 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a38:	bf00      	nop
 8000a3a:	e7fd      	b.n	8000a38 <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	bf00      	nop
 8000a42:	e7fd      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr

08000a52 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5e:	4770      	bx	lr

08000a60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr

08000a6e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a72:	f000 f8a5 	bl	8000bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
	...

08000a7c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000a80:	4802      	ldr	r0, [pc, #8]	@ (8000a8c <DMA1_Stream6_IRQHandler+0x10>)
 8000a82:	f000 fb33 	bl	80010ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200000f8 	.word	0x200000f8

08000a90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a94:	4802      	ldr	r0, [pc, #8]	@ (8000aa0 <USART2_IRQHandler+0x10>)
 8000a96:	f002 fde3 	bl	8003660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	200000b0 	.word	0x200000b0

08000aa4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000aa8:	4b06      	ldr	r3, [pc, #24]	@ (8000ac4 <SystemInit+0x20>)
 8000aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000aae:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <SystemInit+0x20>)
 8000ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000acc:	f7ff ffea 	bl	8000aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	@ (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	@ (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f005 f8a7 	bl	8005c48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fcdd 	bl	80004b8 <main>
  bx  lr    
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000b0c:	08005d3c 	.word	0x08005d3c
  ldr r2, =_sbss
 8000b10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000b14:	200003cc 	.word	0x200003cc

08000b18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b20:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <HAL_Init+0x40>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	@ (8000b5c <HAL_Init+0x40>)
 8000b26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <HAL_Init+0x40>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0a      	ldr	r2, [pc, #40]	@ (8000b5c <HAL_Init+0x40>)
 8000b32:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b38:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <HAL_Init+0x40>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a07      	ldr	r2, [pc, #28]	@ (8000b5c <HAL_Init+0x40>)
 8000b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b44:	2003      	movs	r0, #3
 8000b46:	f000 f94f 	bl	8000de8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b4a:	200f      	movs	r0, #15
 8000b4c:	f000 f808 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b50:	f7ff fe52 	bl	80007f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40023c00 	.word	0x40023c00

08000b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b68:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_InitTick+0x54>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <HAL_InitTick+0x58>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	4619      	mov	r1, r3
 8000b72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f000 f967 	bl	8000e52 <HAL_SYSTICK_Config>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	e00e      	b.n	8000bac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d80a      	bhi.n	8000baa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 f92f 	bl	8000dfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba0:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <HAL_InitTick+0x5c>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	e000      	b.n	8000bac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000baa:	2301      	movs	r3, #1
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000004 	.word	0x20000004
 8000bb8:	2000000c 	.word	0x2000000c
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bc4:	4b06      	ldr	r3, [pc, #24]	@ (8000be0 <HAL_IncTick+0x20>)
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4413      	add	r3, r2
 8000bd0:	4a04      	ldr	r2, [pc, #16]	@ (8000be4 <HAL_IncTick+0x24>)
 8000bd2:	6013      	str	r3, [r2, #0]
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr
 8000bde:	bf00      	nop
 8000be0:	2000000c 	.word	0x2000000c
 8000be4:	2000038c 	.word	0x2000038c

08000be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  return uwTick;
 8000bec:	4b03      	ldr	r3, [pc, #12]	@ (8000bfc <HAL_GetTick+0x14>)
 8000bee:	681b      	ldr	r3, [r3, #0]
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000038c 	.word	0x2000038c

08000c00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b084      	sub	sp, #16
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c08:	f7ff ffee 	bl	8000be8 <HAL_GetTick>
 8000c0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c18:	d005      	beq.n	8000c26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c44 <HAL_Delay+0x44>)
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	461a      	mov	r2, r3
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	4413      	add	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c26:	bf00      	nop
 8000c28:	f7ff ffde 	bl	8000be8 <HAL_GetTick>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	1ad3      	subs	r3, r2, r3
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	429a      	cmp	r2, r3
 8000c36:	d8f7      	bhi.n	8000c28 <HAL_Delay+0x28>
  {
  }
}
 8000c38:	bf00      	nop
 8000c3a:	bf00      	nop
 8000c3c:	3710      	adds	r7, #16
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	2000000c 	.word	0x2000000c

08000c48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b085      	sub	sp, #20
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f003 0307 	and.w	r3, r3, #7
 8000c56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c58:	4b0c      	ldr	r3, [pc, #48]	@ (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5e:	68ba      	ldr	r2, [r7, #8]
 8000c60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c64:	4013      	ands	r3, r2
 8000c66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c7a:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <__NVIC_SetPriorityGrouping+0x44>)
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	60d3      	str	r3, [r2, #12]
}
 8000c80:	bf00      	nop
 8000c82:	3714      	adds	r7, #20
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	e000ed00 	.word	0xe000ed00

08000c90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c94:	4b04      	ldr	r3, [pc, #16]	@ (8000ca8 <__NVIC_GetPriorityGrouping+0x18>)
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	0a1b      	lsrs	r3, r3, #8
 8000c9a:	f003 0307 	and.w	r3, r3, #7
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	db0b      	blt.n	8000cd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cbe:	79fb      	ldrb	r3, [r7, #7]
 8000cc0:	f003 021f 	and.w	r2, r3, #31
 8000cc4:	4907      	ldr	r1, [pc, #28]	@ (8000ce4 <__NVIC_EnableIRQ+0x38>)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	095b      	lsrs	r3, r3, #5
 8000ccc:	2001      	movs	r0, #1
 8000cce:	fa00 f202 	lsl.w	r2, r0, r2
 8000cd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cd6:	bf00      	nop
 8000cd8:	370c      	adds	r7, #12
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000e100 	.word	0xe000e100

08000ce8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	db0a      	blt.n	8000d12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	b2da      	uxtb	r2, r3
 8000d00:	490c      	ldr	r1, [pc, #48]	@ (8000d34 <__NVIC_SetPriority+0x4c>)
 8000d02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d06:	0112      	lsls	r2, r2, #4
 8000d08:	b2d2      	uxtb	r2, r2
 8000d0a:	440b      	add	r3, r1
 8000d0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d10:	e00a      	b.n	8000d28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	683b      	ldr	r3, [r7, #0]
 8000d14:	b2da      	uxtb	r2, r3
 8000d16:	4908      	ldr	r1, [pc, #32]	@ (8000d38 <__NVIC_SetPriority+0x50>)
 8000d18:	79fb      	ldrb	r3, [r7, #7]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	3b04      	subs	r3, #4
 8000d20:	0112      	lsls	r2, r2, #4
 8000d22:	b2d2      	uxtb	r2, r2
 8000d24:	440b      	add	r3, r1
 8000d26:	761a      	strb	r2, [r3, #24]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000e100 	.word	0xe000e100
 8000d38:	e000ed00 	.word	0xe000ed00

08000d3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b089      	sub	sp, #36	@ 0x24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	60f8      	str	r0, [r7, #12]
 8000d44:	60b9      	str	r1, [r7, #8]
 8000d46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	f003 0307 	and.w	r3, r3, #7
 8000d4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f1c3 0307 	rsb	r3, r3, #7
 8000d56:	2b04      	cmp	r3, #4
 8000d58:	bf28      	it	cs
 8000d5a:	2304      	movcs	r3, #4
 8000d5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3304      	adds	r3, #4
 8000d62:	2b06      	cmp	r3, #6
 8000d64:	d902      	bls.n	8000d6c <NVIC_EncodePriority+0x30>
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	3b03      	subs	r3, #3
 8000d6a:	e000      	b.n	8000d6e <NVIC_EncodePriority+0x32>
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d70:	f04f 32ff 	mov.w	r2, #4294967295
 8000d74:	69bb      	ldr	r3, [r7, #24]
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	43da      	mvns	r2, r3
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	401a      	ands	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d84:	f04f 31ff 	mov.w	r1, #4294967295
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d8e:	43d9      	mvns	r1, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	4313      	orrs	r3, r2
         );
}
 8000d96:	4618      	mov	r0, r3
 8000d98:	3724      	adds	r7, #36	@ 0x24
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
	...

08000da4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	3b01      	subs	r3, #1
 8000db0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000db4:	d301      	bcc.n	8000dba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000db6:	2301      	movs	r3, #1
 8000db8:	e00f      	b.n	8000dda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dba:	4a0a      	ldr	r2, [pc, #40]	@ (8000de4 <SysTick_Config+0x40>)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dc2:	210f      	movs	r1, #15
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc8:	f7ff ff8e 	bl	8000ce8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dcc:	4b05      	ldr	r3, [pc, #20]	@ (8000de4 <SysTick_Config+0x40>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dd2:	4b04      	ldr	r3, [pc, #16]	@ (8000de4 <SysTick_Config+0x40>)
 8000dd4:	2207      	movs	r2, #7
 8000dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dd8:	2300      	movs	r3, #0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	e000e010 	.word	0xe000e010

08000de8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f7ff ff29 	bl	8000c48 <__NVIC_SetPriorityGrouping>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b086      	sub	sp, #24
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	4603      	mov	r3, r0
 8000e06:	60b9      	str	r1, [r7, #8]
 8000e08:	607a      	str	r2, [r7, #4]
 8000e0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e10:	f7ff ff3e 	bl	8000c90 <__NVIC_GetPriorityGrouping>
 8000e14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e16:	687a      	ldr	r2, [r7, #4]
 8000e18:	68b9      	ldr	r1, [r7, #8]
 8000e1a:	6978      	ldr	r0, [r7, #20]
 8000e1c:	f7ff ff8e 	bl	8000d3c <NVIC_EncodePriority>
 8000e20:	4602      	mov	r2, r0
 8000e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff ff5d 	bl	8000ce8 <__NVIC_SetPriority>
}
 8000e2e:	bf00      	nop
 8000e30:	3718      	adds	r7, #24
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}

08000e36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e36:	b580      	push	{r7, lr}
 8000e38:	b082      	sub	sp, #8
 8000e3a:	af00      	add	r7, sp, #0
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff31 	bl	8000cac <__NVIC_EnableIRQ>
}
 8000e4a:	bf00      	nop
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f7ff ffa2 	bl	8000da4 <SysTick_Config>
 8000e60:	4603      	mov	r3, r0
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
	...

08000e6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e74:	2300      	movs	r3, #0
 8000e76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000e78:	f7ff feb6 	bl	8000be8 <HAL_GetTick>
 8000e7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d101      	bne.n	8000e88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000e84:	2301      	movs	r3, #1
 8000e86:	e099      	b.n	8000fbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2200      	movs	r2, #0
 8000e94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f022 0201 	bic.w	r2, r2, #1
 8000ea6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000ea8:	e00f      	b.n	8000eca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000eaa:	f7ff fe9d 	bl	8000be8 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	693b      	ldr	r3, [r7, #16]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b05      	cmp	r3, #5
 8000eb6:	d908      	bls.n	8000eca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2220      	movs	r2, #32
 8000ebc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2203      	movs	r2, #3
 8000ec2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	e078      	b.n	8000fbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d1e8      	bne.n	8000eaa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	4b38      	ldr	r3, [pc, #224]	@ (8000fc4 <HAL_DMA_Init+0x158>)
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	685a      	ldr	r2, [r3, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000ef6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000f02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000f0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6a1b      	ldr	r3, [r3, #32]
 8000f14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4313      	orrs	r3, r2
 8000f1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f20:	2b04      	cmp	r3, #4
 8000f22:	d107      	bne.n	8000f34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	697a      	ldr	r2, [r7, #20]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	697a      	ldr	r2, [r7, #20]
 8000f3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	695b      	ldr	r3, [r3, #20]
 8000f42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f023 0307 	bic.w	r3, r3, #7
 8000f4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f50:	697a      	ldr	r2, [r7, #20]
 8000f52:	4313      	orrs	r3, r2
 8000f54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f5a:	2b04      	cmp	r3, #4
 8000f5c:	d117      	bne.n	8000f8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f62:	697a      	ldr	r2, [r7, #20]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d00e      	beq.n	8000f8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f000 fa7b 	bl	800146c <DMA_CheckFifoParam>
 8000f76:	4603      	mov	r3, r0
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d008      	beq.n	8000f8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2240      	movs	r2, #64	@ 0x40
 8000f80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2201      	movs	r2, #1
 8000f86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e016      	b.n	8000fbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	697a      	ldr	r2, [r7, #20]
 8000f94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 fa32 	bl	8001400 <DMA_CalcBaseAndBitshift>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fa4:	223f      	movs	r2, #63	@ 0x3f
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2200      	movs	r2, #0
 8000fb0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	2201      	movs	r2, #1
 8000fb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8000fba:	2300      	movs	r3, #0
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	3718      	adds	r7, #24
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	f010803f 	.word	0xf010803f

08000fc8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fd4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000fd6:	f7ff fe07 	bl	8000be8 <HAL_GetTick>
 8000fda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fe2:	b2db      	uxtb	r3, r3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d008      	beq.n	8000ffa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2280      	movs	r2, #128	@ 0x80
 8000fec:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e052      	b.n	80010a0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f022 0216 	bic.w	r2, r2, #22
 8001008:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	695a      	ldr	r2, [r3, #20]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001018:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800101e:	2b00      	cmp	r3, #0
 8001020:	d103      	bne.n	800102a <HAL_DMA_Abort+0x62>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001026:	2b00      	cmp	r3, #0
 8001028:	d007      	beq.n	800103a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f022 0208 	bic.w	r2, r2, #8
 8001038:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f022 0201 	bic.w	r2, r2, #1
 8001048:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800104a:	e013      	b.n	8001074 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800104c:	f7ff fdcc 	bl	8000be8 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b05      	cmp	r3, #5
 8001058:	d90c      	bls.n	8001074 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2220      	movs	r2, #32
 800105e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2203      	movs	r2, #3
 8001064:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001070:	2303      	movs	r3, #3
 8001072:	e015      	b.n	80010a0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1e4      	bne.n	800104c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001086:	223f      	movs	r2, #63	@ 0x3f
 8001088:	409a      	lsls	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2200      	movs	r2, #0
 800109a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80010b6:	b2db      	uxtb	r3, r3
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d004      	beq.n	80010c6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2280      	movs	r2, #128	@ 0x80
 80010c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e00c      	b.n	80010e0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2205      	movs	r2, #5
 80010ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	681a      	ldr	r2, [r3, #0]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f022 0201 	bic.w	r2, r2, #1
 80010dc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80010f4:	2300      	movs	r3, #0
 80010f6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80010f8:	4b8e      	ldr	r3, [pc, #568]	@ (8001334 <HAL_DMA_IRQHandler+0x248>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a8e      	ldr	r2, [pc, #568]	@ (8001338 <HAL_DMA_IRQHandler+0x24c>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0a9b      	lsrs	r3, r3, #10
 8001104:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800110a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001116:	2208      	movs	r2, #8
 8001118:	409a      	lsls	r2, r3
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4013      	ands	r3, r2
 800111e:	2b00      	cmp	r3, #0
 8001120:	d01a      	beq.n	8001158 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0304 	and.w	r3, r3, #4
 800112c:	2b00      	cmp	r3, #0
 800112e:	d013      	beq.n	8001158 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	681a      	ldr	r2, [r3, #0]
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f022 0204 	bic.w	r2, r2, #4
 800113e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001144:	2208      	movs	r2, #8
 8001146:	409a      	lsls	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001150:	f043 0201 	orr.w	r2, r3, #1
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800115c:	2201      	movs	r2, #1
 800115e:	409a      	lsls	r2, r3
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d012      	beq.n	800118e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	695b      	ldr	r3, [r3, #20]
 800116e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001172:	2b00      	cmp	r3, #0
 8001174:	d00b      	beq.n	800118e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800117a:	2201      	movs	r2, #1
 800117c:	409a      	lsls	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001186:	f043 0202 	orr.w	r2, r3, #2
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001192:	2204      	movs	r2, #4
 8001194:	409a      	lsls	r2, r3
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4013      	ands	r3, r2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d012      	beq.n	80011c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f003 0302 	and.w	r3, r3, #2
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00b      	beq.n	80011c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011b0:	2204      	movs	r2, #4
 80011b2:	409a      	lsls	r2, r3
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80011bc:	f043 0204 	orr.w	r2, r3, #4
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011c8:	2210      	movs	r2, #16
 80011ca:	409a      	lsls	r2, r3
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	4013      	ands	r3, r2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d043      	beq.n	800125c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0308 	and.w	r3, r3, #8
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d03c      	beq.n	800125c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80011e6:	2210      	movs	r2, #16
 80011e8:	409a      	lsls	r2, r3
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d018      	beq.n	800122e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d108      	bne.n	800121c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800120e:	2b00      	cmp	r3, #0
 8001210:	d024      	beq.n	800125c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	4798      	blx	r3
 800121a:	e01f      	b.n	800125c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01b      	beq.n	800125c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	4798      	blx	r3
 800122c:	e016      	b.n	800125c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001238:	2b00      	cmp	r3, #0
 800123a:	d107      	bne.n	800124c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	681a      	ldr	r2, [r3, #0]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f022 0208 	bic.w	r2, r2, #8
 800124a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001250:	2b00      	cmp	r3, #0
 8001252:	d003      	beq.n	800125c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001258:	6878      	ldr	r0, [r7, #4]
 800125a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001260:	2220      	movs	r2, #32
 8001262:	409a      	lsls	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	f000 808f 	beq.w	800138c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	f000 8087 	beq.w	800138c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001282:	2220      	movs	r2, #32
 8001284:	409a      	lsls	r2, r3
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001290:	b2db      	uxtb	r3, r3
 8001292:	2b05      	cmp	r3, #5
 8001294:	d136      	bne.n	8001304 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f022 0216 	bic.w	r2, r2, #22
 80012a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	695a      	ldr	r2, [r3, #20]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <HAL_DMA_IRQHandler+0x1da>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d007      	beq.n	80012d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0208 	bic.w	r2, r2, #8
 80012d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012da:	223f      	movs	r2, #63	@ 0x3f
 80012dc:	409a      	lsls	r2, r3
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d07e      	beq.n	80013f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	4798      	blx	r3
        }
        return;
 8001302:	e079      	b.n	80013f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d01d      	beq.n	800134e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800131c:	2b00      	cmp	r3, #0
 800131e:	d10d      	bne.n	800133c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001324:	2b00      	cmp	r3, #0
 8001326:	d031      	beq.n	800138c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
 8001330:	e02c      	b.n	800138c <HAL_DMA_IRQHandler+0x2a0>
 8001332:	bf00      	nop
 8001334:	20000004 	.word	0x20000004
 8001338:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001340:	2b00      	cmp	r3, #0
 8001342:	d023      	beq.n	800138c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	4798      	blx	r3
 800134c:	e01e      	b.n	800138c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d10f      	bne.n	800137c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0210 	bic.w	r2, r2, #16
 800136a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2201      	movs	r2, #1
 8001370:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001390:	2b00      	cmp	r3, #0
 8001392:	d032      	beq.n	80013fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d022      	beq.n	80013e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2205      	movs	r2, #5
 80013a4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f022 0201 	bic.w	r2, r2, #1
 80013b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	3301      	adds	r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d307      	bcc.n	80013d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d1f2      	bne.n	80013b8 <HAL_DMA_IRQHandler+0x2cc>
 80013d2:	e000      	b.n	80013d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80013d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2201      	movs	r2, #1
 80013da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d005      	beq.n	80013fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	4798      	blx	r3
 80013f6:	e000      	b.n	80013fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80013f8:	bf00      	nop
    }
  }
}
 80013fa:	3718      	adds	r7, #24
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}

08001400 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	3b10      	subs	r3, #16
 8001410:	4a14      	ldr	r2, [pc, #80]	@ (8001464 <DMA_CalcBaseAndBitshift+0x64>)
 8001412:	fba2 2303 	umull	r2, r3, r2, r3
 8001416:	091b      	lsrs	r3, r3, #4
 8001418:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <DMA_CalcBaseAndBitshift+0x68>)
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4413      	add	r3, r2
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	461a      	mov	r2, r3
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b03      	cmp	r3, #3
 800142c:	d909      	bls.n	8001442 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001436:	f023 0303 	bic.w	r3, r3, #3
 800143a:	1d1a      	adds	r2, r3, #4
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	659a      	str	r2, [r3, #88]	@ 0x58
 8001440:	e007      	b.n	8001452 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800144a:	f023 0303 	bic.w	r3, r3, #3
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	aaaaaaab 	.word	0xaaaaaaab
 8001468:	08005d10 	.word	0x08005d10

0800146c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800146c:	b480      	push	{r7}
 800146e:	b085      	sub	sp, #20
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001474:	2300      	movs	r3, #0
 8001476:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800147c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d11f      	bne.n	80014c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001486:	68bb      	ldr	r3, [r7, #8]
 8001488:	2b03      	cmp	r3, #3
 800148a:	d856      	bhi.n	800153a <DMA_CheckFifoParam+0xce>
 800148c:	a201      	add	r2, pc, #4	@ (adr r2, 8001494 <DMA_CheckFifoParam+0x28>)
 800148e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001492:	bf00      	nop
 8001494:	080014a5 	.word	0x080014a5
 8001498:	080014b7 	.word	0x080014b7
 800149c:	080014a5 	.word	0x080014a5
 80014a0:	0800153b 	.word	0x0800153b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d046      	beq.n	800153e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80014b0:	2301      	movs	r3, #1
 80014b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014b4:	e043      	b.n	800153e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80014be:	d140      	bne.n	8001542 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80014c0:	2301      	movs	r3, #1
 80014c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80014c4:	e03d      	b.n	8001542 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014ce:	d121      	bne.n	8001514 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	2b03      	cmp	r3, #3
 80014d4:	d837      	bhi.n	8001546 <DMA_CheckFifoParam+0xda>
 80014d6:	a201      	add	r2, pc, #4	@ (adr r2, 80014dc <DMA_CheckFifoParam+0x70>)
 80014d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014dc:	080014ed 	.word	0x080014ed
 80014e0:	080014f3 	.word	0x080014f3
 80014e4:	080014ed 	.word	0x080014ed
 80014e8:	08001505 	.word	0x08001505
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80014ec:	2301      	movs	r3, #1
 80014ee:	73fb      	strb	r3, [r7, #15]
      break;
 80014f0:	e030      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d025      	beq.n	800154a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001502:	e022      	b.n	800154a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001508:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800150c:	d11f      	bne.n	800154e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001512:	e01c      	b.n	800154e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	2b02      	cmp	r3, #2
 8001518:	d903      	bls.n	8001522 <DMA_CheckFifoParam+0xb6>
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	2b03      	cmp	r3, #3
 800151e:	d003      	beq.n	8001528 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001520:	e018      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001522:	2301      	movs	r3, #1
 8001524:	73fb      	strb	r3, [r7, #15]
      break;
 8001526:	e015      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800152c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001530:	2b00      	cmp	r3, #0
 8001532:	d00e      	beq.n	8001552 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	73fb      	strb	r3, [r7, #15]
      break;
 8001538:	e00b      	b.n	8001552 <DMA_CheckFifoParam+0xe6>
      break;
 800153a:	bf00      	nop
 800153c:	e00a      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;
 800153e:	bf00      	nop
 8001540:	e008      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;
 8001542:	bf00      	nop
 8001544:	e006      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;
 8001546:	bf00      	nop
 8001548:	e004      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;
 800154a:	bf00      	nop
 800154c:	e002      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;   
 800154e:	bf00      	nop
 8001550:	e000      	b.n	8001554 <DMA_CheckFifoParam+0xe8>
      break;
 8001552:	bf00      	nop
    }
  } 
  
  return status; 
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop

08001564 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001564:	b480      	push	{r7}
 8001566:	b089      	sub	sp, #36	@ 0x24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800156e:	2300      	movs	r3, #0
 8001570:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001576:	2300      	movs	r3, #0
 8001578:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800157a:	2300      	movs	r3, #0
 800157c:	61fb      	str	r3, [r7, #28]
 800157e:	e16b      	b.n	8001858 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001580:	2201      	movs	r2, #1
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	697a      	ldr	r2, [r7, #20]
 8001590:	4013      	ands	r3, r2
 8001592:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	429a      	cmp	r2, r3
 800159a:	f040 815a 	bne.w	8001852 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d005      	beq.n	80015b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d130      	bne.n	8001618 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	2203      	movs	r2, #3
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43db      	mvns	r3, r3
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	4013      	ands	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	68da      	ldr	r2, [r3, #12]
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	005b      	lsls	r3, r3, #1
 80015d6:	fa02 f303 	lsl.w	r3, r2, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4313      	orrs	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	69ba      	ldr	r2, [r7, #24]
 80015e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015ec:	2201      	movs	r2, #1
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	69ba      	ldr	r2, [r7, #24]
 80015f8:	4013      	ands	r3, r2
 80015fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	091b      	lsrs	r3, r3, #4
 8001602:	f003 0201 	and.w	r2, r3, #1
 8001606:	69fb      	ldr	r3, [r7, #28]
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b03      	cmp	r3, #3
 8001622:	d017      	beq.n	8001654 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	2203      	movs	r2, #3
 8001630:	fa02 f303 	lsl.w	r3, r2, r3
 8001634:	43db      	mvns	r3, r3
 8001636:	69ba      	ldr	r2, [r7, #24]
 8001638:	4013      	ands	r3, r2
 800163a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d123      	bne.n	80016a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	08da      	lsrs	r2, r3, #3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3208      	adds	r2, #8
 8001668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f003 0307 	and.w	r3, r3, #7
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	691a      	ldr	r2, [r3, #16]
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	69b9      	ldr	r1, [r7, #24]
 80016a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	69ba      	ldr	r2, [r7, #24]
 80016bc:	4013      	ands	r3, r2
 80016be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0203 	and.w	r2, r3, #3
 80016c8:	69fb      	ldr	r3, [r7, #28]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	69ba      	ldr	r2, [r7, #24]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	f000 80b4 	beq.w	8001852 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b60      	ldr	r3, [pc, #384]	@ (8001870 <HAL_GPIO_Init+0x30c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	4a5f      	ldr	r2, [pc, #380]	@ (8001870 <HAL_GPIO_Init+0x30c>)
 80016f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016fa:	4b5d      	ldr	r3, [pc, #372]	@ (8001870 <HAL_GPIO_Init+0x30c>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001706:	4a5b      	ldr	r2, [pc, #364]	@ (8001874 <HAL_GPIO_Init+0x310>)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	f003 0303 	and.w	r3, r3, #3
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	220f      	movs	r2, #15
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a52      	ldr	r2, [pc, #328]	@ (8001878 <HAL_GPIO_Init+0x314>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d02b      	beq.n	800178a <HAL_GPIO_Init+0x226>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a51      	ldr	r2, [pc, #324]	@ (800187c <HAL_GPIO_Init+0x318>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d025      	beq.n	8001786 <HAL_GPIO_Init+0x222>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a50      	ldr	r2, [pc, #320]	@ (8001880 <HAL_GPIO_Init+0x31c>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d01f      	beq.n	8001782 <HAL_GPIO_Init+0x21e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a4f      	ldr	r2, [pc, #316]	@ (8001884 <HAL_GPIO_Init+0x320>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d019      	beq.n	800177e <HAL_GPIO_Init+0x21a>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a4e      	ldr	r2, [pc, #312]	@ (8001888 <HAL_GPIO_Init+0x324>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d013      	beq.n	800177a <HAL_GPIO_Init+0x216>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	4a4d      	ldr	r2, [pc, #308]	@ (800188c <HAL_GPIO_Init+0x328>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d00d      	beq.n	8001776 <HAL_GPIO_Init+0x212>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4a4c      	ldr	r2, [pc, #304]	@ (8001890 <HAL_GPIO_Init+0x32c>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d007      	beq.n	8001772 <HAL_GPIO_Init+0x20e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4a4b      	ldr	r2, [pc, #300]	@ (8001894 <HAL_GPIO_Init+0x330>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d101      	bne.n	800176e <HAL_GPIO_Init+0x20a>
 800176a:	2307      	movs	r3, #7
 800176c:	e00e      	b.n	800178c <HAL_GPIO_Init+0x228>
 800176e:	2308      	movs	r3, #8
 8001770:	e00c      	b.n	800178c <HAL_GPIO_Init+0x228>
 8001772:	2306      	movs	r3, #6
 8001774:	e00a      	b.n	800178c <HAL_GPIO_Init+0x228>
 8001776:	2305      	movs	r3, #5
 8001778:	e008      	b.n	800178c <HAL_GPIO_Init+0x228>
 800177a:	2304      	movs	r3, #4
 800177c:	e006      	b.n	800178c <HAL_GPIO_Init+0x228>
 800177e:	2303      	movs	r3, #3
 8001780:	e004      	b.n	800178c <HAL_GPIO_Init+0x228>
 8001782:	2302      	movs	r3, #2
 8001784:	e002      	b.n	800178c <HAL_GPIO_Init+0x228>
 8001786:	2301      	movs	r3, #1
 8001788:	e000      	b.n	800178c <HAL_GPIO_Init+0x228>
 800178a:	2300      	movs	r3, #0
 800178c:	69fa      	ldr	r2, [r7, #28]
 800178e:	f002 0203 	and.w	r2, r2, #3
 8001792:	0092      	lsls	r2, r2, #2
 8001794:	4093      	lsls	r3, r2
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800179c:	4935      	ldr	r1, [pc, #212]	@ (8001874 <HAL_GPIO_Init+0x310>)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	089b      	lsrs	r3, r3, #2
 80017a2:	3302      	adds	r3, #2
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001898 <HAL_GPIO_Init+0x334>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017b0:	693b      	ldr	r3, [r7, #16]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4013      	ands	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d003      	beq.n	80017ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017c6:	69ba      	ldr	r2, [r7, #24]
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017ce:	4a32      	ldr	r2, [pc, #200]	@ (8001898 <HAL_GPIO_Init+0x334>)
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017d4:	4b30      	ldr	r3, [pc, #192]	@ (8001898 <HAL_GPIO_Init+0x334>)
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d003      	beq.n	80017f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017f8:	4a27      	ldr	r2, [pc, #156]	@ (8001898 <HAL_GPIO_Init+0x334>)
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017fe:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <HAL_GPIO_Init+0x334>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d003      	beq.n	8001822 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001822:	4a1d      	ldr	r2, [pc, #116]	@ (8001898 <HAL_GPIO_Init+0x334>)
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001828:	4b1b      	ldr	r3, [pc, #108]	@ (8001898 <HAL_GPIO_Init+0x334>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d003      	beq.n	800184c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	4313      	orrs	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800184c:	4a12      	ldr	r2, [pc, #72]	@ (8001898 <HAL_GPIO_Init+0x334>)
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	3301      	adds	r3, #1
 8001856:	61fb      	str	r3, [r7, #28]
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	2b0f      	cmp	r3, #15
 800185c:	f67f ae90 	bls.w	8001580 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001860:	bf00      	nop
 8001862:	bf00      	nop
 8001864:	3724      	adds	r7, #36	@ 0x24
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40023800 	.word	0x40023800
 8001874:	40013800 	.word	0x40013800
 8001878:	40020000 	.word	0x40020000
 800187c:	40020400 	.word	0x40020400
 8001880:	40020800 	.word	0x40020800
 8001884:	40020c00 	.word	0x40020c00
 8001888:	40021000 	.word	0x40021000
 800188c:	40021400 	.word	0x40021400
 8001890:	40021800 	.word	0x40021800
 8001894:	40021c00 	.word	0x40021c00
 8001898:	40013c00 	.word	0x40013c00

0800189c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	887b      	ldrh	r3, [r7, #2]
 80018ae:	4013      	ands	r3, r2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d002      	beq.n	80018ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80018b4:	2301      	movs	r3, #1
 80018b6:	73fb      	strb	r3, [r7, #15]
 80018b8:	e001      	b.n	80018be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3714      	adds	r7, #20
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	460b      	mov	r3, r1
 80018d6:	807b      	strh	r3, [r7, #2]
 80018d8:	4613      	mov	r3, r2
 80018da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018dc:	787b      	ldrb	r3, [r7, #1]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018e2:	887a      	ldrh	r2, [r7, #2]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018e8:	e003      	b.n	80018f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ea:	887b      	ldrh	r3, [r7, #2]
 80018ec:	041a      	lsls	r2, r3, #16
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	619a      	str	r2, [r3, #24]
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
	...

08001900 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e267      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	2b00      	cmp	r3, #0
 800191c:	d075      	beq.n	8001a0a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800191e:	4b88      	ldr	r3, [pc, #544]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f003 030c 	and.w	r3, r3, #12
 8001926:	2b04      	cmp	r3, #4
 8001928:	d00c      	beq.n	8001944 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800192a:	4b85      	ldr	r3, [pc, #532]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 800192c:	689b      	ldr	r3, [r3, #8]
 800192e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001932:	2b08      	cmp	r3, #8
 8001934:	d112      	bne.n	800195c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001936:	4b82      	ldr	r3, [pc, #520]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800193e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001942:	d10b      	bne.n	800195c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001944:	4b7e      	ldr	r3, [pc, #504]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800194c:	2b00      	cmp	r3, #0
 800194e:	d05b      	beq.n	8001a08 <HAL_RCC_OscConfig+0x108>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d157      	bne.n	8001a08 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e242      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001964:	d106      	bne.n	8001974 <HAL_RCC_OscConfig+0x74>
 8001966:	4b76      	ldr	r3, [pc, #472]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4a75      	ldr	r2, [pc, #468]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 800196c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001970:	6013      	str	r3, [r2, #0]
 8001972:	e01d      	b.n	80019b0 <HAL_RCC_OscConfig+0xb0>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800197c:	d10c      	bne.n	8001998 <HAL_RCC_OscConfig+0x98>
 800197e:	4b70      	ldr	r3, [pc, #448]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a6f      	ldr	r2, [pc, #444]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001988:	6013      	str	r3, [r2, #0]
 800198a:	4b6d      	ldr	r3, [pc, #436]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a6c      	ldr	r2, [pc, #432]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	e00b      	b.n	80019b0 <HAL_RCC_OscConfig+0xb0>
 8001998:	4b69      	ldr	r3, [pc, #420]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a68      	ldr	r2, [pc, #416]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 800199e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b66      	ldr	r3, [pc, #408]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a65      	ldr	r2, [pc, #404]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 80019aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d013      	beq.n	80019e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b8:	f7ff f916 	bl	8000be8 <HAL_GetTick>
 80019bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019be:	e008      	b.n	80019d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019c0:	f7ff f912 	bl	8000be8 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	2b64      	cmp	r3, #100	@ 0x64
 80019cc:	d901      	bls.n	80019d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e207      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d0f0      	beq.n	80019c0 <HAL_RCC_OscConfig+0xc0>
 80019de:	e014      	b.n	8001a0a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff f902 	bl	8000be8 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff f8fe 	bl	8000be8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	@ 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e1f3      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019fa:	4b51      	ldr	r3, [pc, #324]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0xe8>
 8001a06:	e000      	b.n	8001a0a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d063      	beq.n	8001ade <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a16:	4b4a      	ldr	r3, [pc, #296]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	f003 030c 	and.w	r3, r3, #12
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d00b      	beq.n	8001a3a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a22:	4b47      	ldr	r3, [pc, #284]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d11c      	bne.n	8001a68 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a2e:	4b44      	ldr	r3, [pc, #272]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d116      	bne.n	8001a68 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a3a:	4b41      	ldr	r3, [pc, #260]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d005      	beq.n	8001a52 <HAL_RCC_OscConfig+0x152>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	68db      	ldr	r3, [r3, #12]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d001      	beq.n	8001a52 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e1c7      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a52:	4b3b      	ldr	r3, [pc, #236]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	691b      	ldr	r3, [r3, #16]
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	4937      	ldr	r1, [pc, #220]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a62:	4313      	orrs	r3, r2
 8001a64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a66:	e03a      	b.n	8001ade <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d020      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a70:	4b34      	ldr	r3, [pc, #208]	@ (8001b44 <HAL_RCC_OscConfig+0x244>)
 8001a72:	2201      	movs	r2, #1
 8001a74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a76:	f7ff f8b7 	bl	8000be8 <HAL_GetTick>
 8001a7a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	e008      	b.n	8001a90 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7e:	f7ff f8b3 	bl	8000be8 <HAL_GetTick>
 8001a82:	4602      	mov	r2, r0
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	1ad3      	subs	r3, r2, r3
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d901      	bls.n	8001a90 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	e1a8      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a90:	4b2b      	ldr	r3, [pc, #172]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d0f0      	beq.n	8001a7e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9c:	4b28      	ldr	r3, [pc, #160]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	00db      	lsls	r3, r3, #3
 8001aaa:	4925      	ldr	r1, [pc, #148]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001aac:	4313      	orrs	r3, r2
 8001aae:	600b      	str	r3, [r1, #0]
 8001ab0:	e015      	b.n	8001ade <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab2:	4b24      	ldr	r3, [pc, #144]	@ (8001b44 <HAL_RCC_OscConfig+0x244>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f896 	bl	8000be8 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac0:	f7ff f892 	bl	8000be8 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e187      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ad2:	4b1b      	ldr	r3, [pc, #108]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0302 	and.w	r3, r3, #2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d036      	beq.n	8001b58 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d016      	beq.n	8001b20 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001af2:	4b15      	ldr	r3, [pc, #84]	@ (8001b48 <HAL_RCC_OscConfig+0x248>)
 8001af4:	2201      	movs	r2, #1
 8001af6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f876 	bl	8000be8 <HAL_GetTick>
 8001afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001afe:	e008      	b.n	8001b12 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b00:	f7ff f872 	bl	8000be8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	2b02      	cmp	r3, #2
 8001b0c:	d901      	bls.n	8001b12 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e167      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b12:	4b0b      	ldr	r3, [pc, #44]	@ (8001b40 <HAL_RCC_OscConfig+0x240>)
 8001b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b16:	f003 0302 	and.w	r3, r3, #2
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d0f0      	beq.n	8001b00 <HAL_RCC_OscConfig+0x200>
 8001b1e:	e01b      	b.n	8001b58 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b20:	4b09      	ldr	r3, [pc, #36]	@ (8001b48 <HAL_RCC_OscConfig+0x248>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b26:	f7ff f85f 	bl	8000be8 <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b2c:	e00e      	b.n	8001b4c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b2e:	f7ff f85b 	bl	8000be8 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d907      	bls.n	8001b4c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e150      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
 8001b40:	40023800 	.word	0x40023800
 8001b44:	42470000 	.word	0x42470000
 8001b48:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b4c:	4b88      	ldr	r3, [pc, #544]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001b4e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b50:	f003 0302 	and.w	r3, r3, #2
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1ea      	bne.n	8001b2e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 8097 	beq.w	8001c94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b66:	2300      	movs	r3, #0
 8001b68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b6a:	4b81      	ldr	r3, [pc, #516]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d10f      	bne.n	8001b96 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60bb      	str	r3, [r7, #8]
 8001b7a:	4b7d      	ldr	r3, [pc, #500]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b7e:	4a7c      	ldr	r2, [pc, #496]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001b80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b84:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b86:	4b7a      	ldr	r3, [pc, #488]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001b88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b8e:	60bb      	str	r3, [r7, #8]
 8001b90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b92:	2301      	movs	r3, #1
 8001b94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b96:	4b77      	ldr	r3, [pc, #476]	@ (8001d74 <HAL_RCC_OscConfig+0x474>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d118      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ba2:	4b74      	ldr	r3, [pc, #464]	@ (8001d74 <HAL_RCC_OscConfig+0x474>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a73      	ldr	r2, [pc, #460]	@ (8001d74 <HAL_RCC_OscConfig+0x474>)
 8001ba8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bae:	f7ff f81b 	bl	8000be8 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bb6:	f7ff f817 	bl	8000be8 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e10c      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc8:	4b6a      	ldr	r3, [pc, #424]	@ (8001d74 <HAL_RCC_OscConfig+0x474>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d106      	bne.n	8001bea <HAL_RCC_OscConfig+0x2ea>
 8001bdc:	4b64      	ldr	r3, [pc, #400]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be0:	4a63      	ldr	r2, [pc, #396]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001be2:	f043 0301 	orr.w	r3, r3, #1
 8001be6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be8:	e01c      	b.n	8001c24 <HAL_RCC_OscConfig+0x324>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	2b05      	cmp	r3, #5
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0x30c>
 8001bf2:	4b5f      	ldr	r3, [pc, #380]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001bf4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bf6:	4a5e      	ldr	r2, [pc, #376]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	f043 0304 	orr.w	r3, r3, #4
 8001bfc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bfe:	4b5c      	ldr	r3, [pc, #368]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c02:	4a5b      	ldr	r2, [pc, #364]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c04:	f043 0301 	orr.w	r3, r3, #1
 8001c08:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_OscConfig+0x324>
 8001c0c:	4b58      	ldr	r3, [pc, #352]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c10:	4a57      	ldr	r2, [pc, #348]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c12:	f023 0301 	bic.w	r3, r3, #1
 8001c16:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c18:	4b55      	ldr	r3, [pc, #340]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c1c:	4a54      	ldr	r2, [pc, #336]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c1e:	f023 0304 	bic.w	r3, r3, #4
 8001c22:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d015      	beq.n	8001c58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c2c:	f7fe ffdc 	bl	8000be8 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c32:	e00a      	b.n	8001c4a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c34:	f7fe ffd8 	bl	8000be8 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d901      	bls.n	8001c4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c46:	2303      	movs	r3, #3
 8001c48:	e0cb      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c4a:	4b49      	ldr	r3, [pc, #292]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d0ee      	beq.n	8001c34 <HAL_RCC_OscConfig+0x334>
 8001c56:	e014      	b.n	8001c82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c58:	f7fe ffc6 	bl	8000be8 <HAL_GetTick>
 8001c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7fe ffc2 	bl	8000be8 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e0b5      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c76:	4b3e      	ldr	r3, [pc, #248]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7a:	f003 0302 	and.w	r3, r3, #2
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d1ee      	bne.n	8001c60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c82:	7dfb      	ldrb	r3, [r7, #23]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c88:	4b39      	ldr	r3, [pc, #228]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8c:	4a38      	ldr	r2, [pc, #224]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001c8e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	699b      	ldr	r3, [r3, #24]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	f000 80a1 	beq.w	8001de0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c9e:	4b34      	ldr	r3, [pc, #208]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 030c 	and.w	r3, r3, #12
 8001ca6:	2b08      	cmp	r3, #8
 8001ca8:	d05c      	beq.n	8001d64 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d141      	bne.n	8001d36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cb2:	4b31      	ldr	r3, [pc, #196]	@ (8001d78 <HAL_RCC_OscConfig+0x478>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb8:	f7fe ff96 	bl	8000be8 <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7fe ff92 	bl	8000be8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e087      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cd2:	4b27      	ldr	r3, [pc, #156]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	69da      	ldr	r2, [r3, #28]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	019b      	lsls	r3, r3, #6
 8001cee:	431a      	orrs	r2, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	085b      	lsrs	r3, r3, #1
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	041b      	lsls	r3, r3, #16
 8001cfa:	431a      	orrs	r2, r3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d00:	061b      	lsls	r3, r3, #24
 8001d02:	491b      	ldr	r1, [pc, #108]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d08:	4b1b      	ldr	r3, [pc, #108]	@ (8001d78 <HAL_RCC_OscConfig+0x478>)
 8001d0a:	2201      	movs	r2, #1
 8001d0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe ff6b 	bl	8000be8 <HAL_GetTick>
 8001d12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d14:	e008      	b.n	8001d28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d16:	f7fe ff67 	bl	8000be8 <HAL_GetTick>
 8001d1a:	4602      	mov	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e05c      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d28:	4b11      	ldr	r3, [pc, #68]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCC_OscConfig+0x416>
 8001d34:	e054      	b.n	8001de0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d36:	4b10      	ldr	r3, [pc, #64]	@ (8001d78 <HAL_RCC_OscConfig+0x478>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7fe ff54 	bl	8000be8 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7fe ff50 	bl	8000be8 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e045      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d56:	4b06      	ldr	r3, [pc, #24]	@ (8001d70 <HAL_RCC_OscConfig+0x470>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0x444>
 8001d62:	e03d      	b.n	8001de0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d107      	bne.n	8001d7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e038      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
 8001d70:	40023800 	.word	0x40023800
 8001d74:	40007000 	.word	0x40007000
 8001d78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d7c:	4b1b      	ldr	r3, [pc, #108]	@ (8001dec <HAL_RCC_OscConfig+0x4ec>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	699b      	ldr	r3, [r3, #24]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d028      	beq.n	8001ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d121      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d11a      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001da6:	68fa      	ldr	r2, [r7, #12]
 8001da8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001dac:	4013      	ands	r3, r2
 8001dae:	687a      	ldr	r2, [r7, #4]
 8001db0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001db2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d111      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc2:	085b      	lsrs	r3, r3, #1
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d107      	bne.n	8001ddc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e000      	b.n	8001de2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001de0:	2300      	movs	r3, #0
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800

08001df0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0cc      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b68      	ldr	r3, [pc, #416]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d90c      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b65      	ldr	r3, [pc, #404]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	683a      	ldr	r2, [r7, #0]
 8001e16:	b2d2      	uxtb	r2, r2
 8001e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b63      	ldr	r3, [pc, #396]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e0b8      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d020      	beq.n	8001e7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0304 	and.w	r3, r3, #4
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d005      	beq.n	8001e50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e44:	4b59      	ldr	r3, [pc, #356]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	4a58      	ldr	r2, [pc, #352]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e4e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d005      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e5c:	4b53      	ldr	r3, [pc, #332]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	4a52      	ldr	r2, [pc, #328]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e68:	4b50      	ldr	r3, [pc, #320]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	494d      	ldr	r1, [pc, #308]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d044      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d107      	bne.n	8001e9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e8e:	4b47      	ldr	r3, [pc, #284]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d119      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e07f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d003      	beq.n	8001eae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b3f      	ldr	r3, [pc, #252]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e06f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b3b      	ldr	r3, [pc, #236]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e067      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b37      	ldr	r3, [pc, #220]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4934      	ldr	r1, [pc, #208]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ee0:	f7fe fe82 	bl	8000be8 <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7fe fe7e 	bl	8000be8 <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e04f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b2b      	ldr	r3, [pc, #172]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b25      	ldr	r3, [pc, #148]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d20c      	bcs.n	8001f38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b22      	ldr	r3, [pc, #136]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	b2d2      	uxtb	r2, r2
 8001f24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f26:	4b20      	ldr	r3, [pc, #128]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	683a      	ldr	r2, [r7, #0]
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d001      	beq.n	8001f38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f34:	2301      	movs	r3, #1
 8001f36:	e032      	b.n	8001f9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0304 	and.w	r3, r3, #4
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d008      	beq.n	8001f56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f44:	4b19      	ldr	r3, [pc, #100]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	4916      	ldr	r1, [pc, #88]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f003 0308 	and.w	r3, r3, #8
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d009      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	490e      	ldr	r1, [pc, #56]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f76:	f000 f821 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fac <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	091b      	lsrs	r3, r3, #4
 8001f82:	f003 030f 	and.w	r3, r3, #15
 8001f86:	490a      	ldr	r1, [pc, #40]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f88:	5ccb      	ldrb	r3, [r1, r3]
 8001f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8e:	4a09      	ldr	r2, [pc, #36]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f92:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f7fe fde2 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023c00 	.word	0x40023c00
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	08005cf8 	.word	0x08005cf8
 8001fb4:	20000004 	.word	0x20000004
 8001fb8:	20000008 	.word	0x20000008

08001fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc0:	b094      	sub	sp, #80	@ 0x50
 8001fc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fd4:	4b79      	ldr	r3, [pc, #484]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d00d      	beq.n	8001ffc <HAL_RCC_GetSysClockFreq+0x40>
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	f200 80e1 	bhi.w	80021a8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x34>
 8001fea:	2b04      	cmp	r3, #4
 8001fec:	d003      	beq.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001fee:	e0db      	b.n	80021a8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ff0:	4b73      	ldr	r3, [pc, #460]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001ff2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ff4:	e0db      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ff6:	4b73      	ldr	r3, [pc, #460]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ff8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ffa:	e0d8      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ffc:	4b6f      	ldr	r3, [pc, #444]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002004:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002006:	4b6d      	ldr	r3, [pc, #436]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d063      	beq.n	80020da <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002012:	4b6a      	ldr	r3, [pc, #424]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	099b      	lsrs	r3, r3, #6
 8002018:	2200      	movs	r2, #0
 800201a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800201c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800201e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002024:	633b      	str	r3, [r7, #48]	@ 0x30
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	@ 0x34
 800202a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800202e:	4622      	mov	r2, r4
 8002030:	462b      	mov	r3, r5
 8002032:	f04f 0000 	mov.w	r0, #0
 8002036:	f04f 0100 	mov.w	r1, #0
 800203a:	0159      	lsls	r1, r3, #5
 800203c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002040:	0150      	lsls	r0, r2, #5
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4621      	mov	r1, r4
 8002048:	1a51      	subs	r1, r2, r1
 800204a:	6139      	str	r1, [r7, #16]
 800204c:	4629      	mov	r1, r5
 800204e:	eb63 0301 	sbc.w	r3, r3, r1
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	f04f 0200 	mov.w	r2, #0
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002060:	4659      	mov	r1, fp
 8002062:	018b      	lsls	r3, r1, #6
 8002064:	4651      	mov	r1, sl
 8002066:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800206a:	4651      	mov	r1, sl
 800206c:	018a      	lsls	r2, r1, #6
 800206e:	4651      	mov	r1, sl
 8002070:	ebb2 0801 	subs.w	r8, r2, r1
 8002074:	4659      	mov	r1, fp
 8002076:	eb63 0901 	sbc.w	r9, r3, r1
 800207a:	f04f 0200 	mov.w	r2, #0
 800207e:	f04f 0300 	mov.w	r3, #0
 8002082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800208a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800208e:	4690      	mov	r8, r2
 8002090:	4699      	mov	r9, r3
 8002092:	4623      	mov	r3, r4
 8002094:	eb18 0303 	adds.w	r3, r8, r3
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	462b      	mov	r3, r5
 800209c:	eb49 0303 	adc.w	r3, r9, r3
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80020ae:	4629      	mov	r1, r5
 80020b0:	024b      	lsls	r3, r1, #9
 80020b2:	4621      	mov	r1, r4
 80020b4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80020b8:	4621      	mov	r1, r4
 80020ba:	024a      	lsls	r2, r1, #9
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80020c2:	2200      	movs	r2, #0
 80020c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80020c8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80020cc:	f7fe f87c 	bl	80001c8 <__aeabi_uldivmod>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	4613      	mov	r3, r2
 80020d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80020d8:	e058      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020da:	4b38      	ldr	r3, [pc, #224]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	099b      	lsrs	r3, r3, #6
 80020e0:	2200      	movs	r2, #0
 80020e2:	4618      	mov	r0, r3
 80020e4:	4611      	mov	r1, r2
 80020e6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020ea:	623b      	str	r3, [r7, #32]
 80020ec:	2300      	movs	r3, #0
 80020ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80020f0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020f4:	4642      	mov	r2, r8
 80020f6:	464b      	mov	r3, r9
 80020f8:	f04f 0000 	mov.w	r0, #0
 80020fc:	f04f 0100 	mov.w	r1, #0
 8002100:	0159      	lsls	r1, r3, #5
 8002102:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002106:	0150      	lsls	r0, r2, #5
 8002108:	4602      	mov	r2, r0
 800210a:	460b      	mov	r3, r1
 800210c:	4641      	mov	r1, r8
 800210e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002112:	4649      	mov	r1, r9
 8002114:	eb63 0b01 	sbc.w	fp, r3, r1
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 0300 	mov.w	r3, #0
 8002120:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002124:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002128:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800212c:	ebb2 040a 	subs.w	r4, r2, sl
 8002130:	eb63 050b 	sbc.w	r5, r3, fp
 8002134:	f04f 0200 	mov.w	r2, #0
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	00eb      	lsls	r3, r5, #3
 800213e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002142:	00e2      	lsls	r2, r4, #3
 8002144:	4614      	mov	r4, r2
 8002146:	461d      	mov	r5, r3
 8002148:	4643      	mov	r3, r8
 800214a:	18e3      	adds	r3, r4, r3
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	464b      	mov	r3, r9
 8002150:	eb45 0303 	adc.w	r3, r5, r3
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	f04f 0200 	mov.w	r2, #0
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002162:	4629      	mov	r1, r5
 8002164:	028b      	lsls	r3, r1, #10
 8002166:	4621      	mov	r1, r4
 8002168:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800216c:	4621      	mov	r1, r4
 800216e:	028a      	lsls	r2, r1, #10
 8002170:	4610      	mov	r0, r2
 8002172:	4619      	mov	r1, r3
 8002174:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002176:	2200      	movs	r2, #0
 8002178:	61bb      	str	r3, [r7, #24]
 800217a:	61fa      	str	r2, [r7, #28]
 800217c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002180:	f7fe f822 	bl	80001c8 <__aeabi_uldivmod>
 8002184:	4602      	mov	r2, r0
 8002186:	460b      	mov	r3, r1
 8002188:	4613      	mov	r3, r2
 800218a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800218c:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <HAL_RCC_GetSysClockFreq+0x200>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	0c1b      	lsrs	r3, r3, #16
 8002192:	f003 0303 	and.w	r3, r3, #3
 8002196:	3301      	adds	r3, #1
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800219c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800219e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80021a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021a6:	e002      	b.n	80021ae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a8:	4b05      	ldr	r3, [pc, #20]	@ (80021c0 <HAL_RCC_GetSysClockFreq+0x204>)
 80021aa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80021ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3750      	adds	r7, #80	@ 0x50
 80021b4:	46bd      	mov	sp, r7
 80021b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021ba:	bf00      	nop
 80021bc:	40023800 	.word	0x40023800
 80021c0:	00f42400 	.word	0x00f42400
 80021c4:	007a1200 	.word	0x007a1200

080021c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <HAL_RCC_GetHCLKFreq+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000004 	.word	0x20000004

080021e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021e4:	f7ff fff0 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 80021e8:	4602      	mov	r2, r0
 80021ea:	4b05      	ldr	r3, [pc, #20]	@ (8002200 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	0a9b      	lsrs	r3, r3, #10
 80021f0:	f003 0307 	and.w	r3, r3, #7
 80021f4:	4903      	ldr	r1, [pc, #12]	@ (8002204 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f6:	5ccb      	ldrb	r3, [r1, r3]
 80021f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800
 8002204:	08005d08 	.word	0x08005d08

08002208 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800220c:	f7ff ffdc 	bl	80021c8 <HAL_RCC_GetHCLKFreq>
 8002210:	4602      	mov	r2, r0
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	0b5b      	lsrs	r3, r3, #13
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	4903      	ldr	r1, [pc, #12]	@ (800222c <HAL_RCC_GetPCLK2Freq+0x24>)
 800221e:	5ccb      	ldrb	r3, [r1, r3]
 8002220:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002224:	4618      	mov	r0, r3
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	08005d08 	.word	0x08005d08

08002230 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e022      	b.n	8002288 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	2200      	movs	r2, #0
 8002252:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7fe faf7 	bl	8000848 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2203      	movs	r2, #3
 800225e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f814 	bl	8002290 <HAL_SD_InitCard>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00a      	b.n	8002288 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002290:	b5b0      	push	{r4, r5, r7, lr}
 8002292:	b08e      	sub	sp, #56	@ 0x38
 8002294:	af04      	add	r7, sp, #16
 8002296:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002298:	2300      	movs	r3, #0
 800229a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 800229c:	2300      	movs	r3, #0
 800229e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80022a0:	2300      	movs	r3, #0
 80022a2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80022a4:	2300      	movs	r3, #0
 80022a6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80022a8:	2300      	movs	r3, #0
 80022aa:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80022ac:	2376      	movs	r3, #118	@ 0x76
 80022ae:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681d      	ldr	r5, [r3, #0]
 80022b4:	466c      	mov	r4, sp
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80022be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80022c2:	f107 0308 	add.w	r3, r7, #8
 80022c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022c8:	4628      	mov	r0, r5
 80022ca:	f002 f8c7 	bl	800445c <SDIO_Init>
 80022ce:	4603      	mov	r3, r0
 80022d0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80022d4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d001      	beq.n	80022e0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e04f      	b.n	8002380 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80022e0:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <HAL_SD_InitCard+0xf8>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f002 f8ff 	bl	80044ee <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80022f0:	4b25      	ldr	r3, [pc, #148]	@ (8002388 <HAL_SD_InitCard+0xf8>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80022f6:	2002      	movs	r0, #2
 80022f8:	f7fe fc82 	bl	8000c00 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f000 ff13 	bl	8003128 <SD_PowerON>
 8002302:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002304:	6a3b      	ldr	r3, [r7, #32]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002316:	6a3b      	ldr	r3, [r7, #32]
 8002318:	431a      	orrs	r2, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e02e      	b.n	8002380 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fe32 	bl	8002f8c <SD_InitCard>
 8002328:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800232a:	6a3b      	ldr	r3, [r7, #32]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00b      	beq.n	8002348 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800233c:	6a3b      	ldr	r3, [r7, #32]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e01b      	b.n	8002380 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002350:	4618      	mov	r0, r3
 8002352:	f002 f95e 	bl	8004612 <SDMMC_CmdBlockLength>
 8002356:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002358:	6a3b      	ldr	r3, [r7, #32]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00f      	beq.n	800237e <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a0a      	ldr	r2, [pc, #40]	@ (800238c <HAL_SD_InitCard+0xfc>)
 8002364:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800236a:	6a3b      	ldr	r3, [r7, #32]
 800236c:	431a      	orrs	r2, r3
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e000      	b.n	8002380 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	3728      	adds	r7, #40	@ 0x28
 8002384:	46bd      	mov	sp, r7
 8002386:	bdb0      	pop	{r4, r5, r7, pc}
 8002388:	422580a0 	.word	0x422580a0
 800238c:	004005ff 	.word	0x004005ff

08002390 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b092      	sub	sp, #72	@ 0x48
 8002394:	af00      	add	r7, sp, #0
 8002396:	60f8      	str	r0, [r7, #12]
 8002398:	60b9      	str	r1, [r7, #8]
 800239a:	607a      	str	r2, [r7, #4]
 800239c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800239e:	f7fe fc23 	bl	8000be8 <HAL_GetTick>
 80023a2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d107      	bne.n	80023c2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80023be:	2301      	movs	r3, #1
 80023c0:	e1c5      	b.n	800274e <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	f040 81b8 	bne.w	8002740 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2200      	movs	r2, #0
 80023d4:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80023d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	441a      	add	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d907      	bls.n	80023f4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023e8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e1ac      	b.n	800274e <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2203      	movs	r2, #3
 80023f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	2200      	movs	r2, #0
 8002402:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002408:	2b01      	cmp	r3, #1
 800240a:	d002      	beq.n	8002412 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800240c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800240e:	025b      	lsls	r3, r3, #9
 8002410:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002412:	f04f 33ff 	mov.w	r3, #4294967295
 8002416:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	025b      	lsls	r3, r3, #9
 800241c:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800241e:	2390      	movs	r3, #144	@ 0x90
 8002420:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002422:	2302      	movs	r3, #2
 8002424:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002426:	2300      	movs	r3, #0
 8002428:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800242a:	2301      	movs	r3, #1
 800242c:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f107 0214 	add.w	r2, r7, #20
 8002436:	4611      	mov	r1, r2
 8002438:	4618      	mov	r0, r3
 800243a:	f002 f8be 	bl	80045ba <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	2b01      	cmp	r3, #1
 8002442:	d90a      	bls.n	800245a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2202      	movs	r2, #2
 8002448:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002450:	4618      	mov	r0, r3
 8002452:	f002 f922 	bl	800469a <SDMMC_CmdReadMultiBlock>
 8002456:	6478      	str	r0, [r7, #68]	@ 0x44
 8002458:	e009      	b.n	800246e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002466:	4618      	mov	r0, r3
 8002468:	f002 f8f5 	bl	8004656 <SDMMC_CmdReadSingleBlock>
 800246c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800246e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002470:	2b00      	cmp	r3, #0
 8002472:	d012      	beq.n	800249a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a7e      	ldr	r2, [pc, #504]	@ (8002674 <HAL_SD_ReadBlocks+0x2e4>)
 800247a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002480:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002482:	431a      	orrs	r2, r3
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	2200      	movs	r2, #0
 8002494:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	e159      	b.n	800274e <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800249e:	e061      	b.n	8002564 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d03c      	beq.n	8002528 <HAL_SD_ReadBlocks+0x198>
 80024ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d039      	beq.n	8002528 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80024b8:	e033      	b.n	8002522 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f001 fff7 	bl	80044b2 <SDIO_ReadFIFO>
 80024c4:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80024c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024c8:	b2da      	uxtb	r2, r3
 80024ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024cc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80024ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024d0:	3301      	adds	r3, #1
 80024d2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80024d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024d6:	3b01      	subs	r3, #1
 80024d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80024da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024dc:	0a1b      	lsrs	r3, r3, #8
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80024e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024e6:	3301      	adds	r3, #1
 80024e8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80024ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80024ec:	3b01      	subs	r3, #1
 80024ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80024f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024f2:	0c1b      	lsrs	r3, r3, #16
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024f8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80024fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80024fc:	3301      	adds	r3, #1
 80024fe:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002502:	3b01      	subs	r3, #1
 8002504:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002508:	0e1b      	lsrs	r3, r3, #24
 800250a:	b2da      	uxtb	r2, r3
 800250c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800250e:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002510:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002512:	3301      	adds	r3, #1
 8002514:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002516:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002518:	3b01      	subs	r3, #1
 800251a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 800251c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800251e:	3301      	adds	r3, #1
 8002520:	643b      	str	r3, [r7, #64]	@ 0x40
 8002522:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002524:	2b07      	cmp	r3, #7
 8002526:	d9c8      	bls.n	80024ba <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002528:	f7fe fb5e 	bl	8000be8 <HAL_GetTick>
 800252c:	4602      	mov	r2, r0
 800252e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002530:	1ad3      	subs	r3, r2, r3
 8002532:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002534:	429a      	cmp	r2, r3
 8002536:	d902      	bls.n	800253e <HAL_SD_ReadBlocks+0x1ae>
 8002538:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800253a:	2b00      	cmp	r3, #0
 800253c:	d112      	bne.n	8002564 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a4c      	ldr	r2, [pc, #304]	@ (8002674 <HAL_SD_ReadBlocks+0x2e4>)
 8002544:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2201      	movs	r2, #1
 8002556:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e0f4      	b.n	800274e <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800256a:	f240 332a 	movw	r3, #810	@ 0x32a
 800256e:	4013      	ands	r3, r2
 8002570:	2b00      	cmp	r3, #0
 8002572:	d095      	beq.n	80024a0 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800257a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257e:	2b00      	cmp	r3, #0
 8002580:	d022      	beq.n	80025c8 <HAL_SD_ReadBlocks+0x238>
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d91f      	bls.n	80025c8 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800258c:	2b03      	cmp	r3, #3
 800258e:	d01b      	beq.n	80025c8 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4618      	mov	r0, r3
 8002596:	f002 f8e7 	bl	8004768 <SDMMC_CmdStopTransfer>
 800259a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800259c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d012      	beq.n	80025c8 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a33      	ldr	r2, [pc, #204]	@ (8002674 <HAL_SD_ReadBlocks+0x2e4>)
 80025a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80025b0:	431a      	orrs	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0c2      	b.n	800274e <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d106      	bne.n	80025e4 <HAL_SD_ReadBlocks+0x254>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d012      	beq.n	800260a <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a22      	ldr	r2, [pc, #136]	@ (8002674 <HAL_SD_ReadBlocks+0x2e4>)
 80025ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025f0:	f043 0208 	orr.w	r2, r3, #8
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2200      	movs	r2, #0
 8002604:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e0a1      	b.n	800274e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d012      	beq.n	800263e <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a15      	ldr	r2, [pc, #84]	@ (8002674 <HAL_SD_ReadBlocks+0x2e4>)
 800261e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002624:	f043 0202 	orr.w	r2, r3, #2
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2200      	movs	r2, #0
 8002638:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	e087      	b.n	800274e <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002644:	f003 0320 	and.w	r3, r3, #32
 8002648:	2b00      	cmp	r3, #0
 800264a:	d064      	beq.n	8002716 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a08      	ldr	r2, [pc, #32]	@ (8002674 <HAL_SD_ReadBlocks+0x2e4>)
 8002652:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002658:	f043 0220 	orr.w	r2, r3, #32
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2200      	movs	r2, #0
 800266c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e06d      	b.n	800274e <HAL_SD_ReadBlocks+0x3be>
 8002672:	bf00      	nop
 8002674:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f001 ff18 	bl	80044b2 <SDIO_ReadFIFO>
 8002682:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002686:	b2da      	uxtb	r2, r3
 8002688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800268a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800268c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800268e:	3301      	adds	r3, #1
 8002690:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002694:	3b01      	subs	r3, #1
 8002696:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800269a:	0a1b      	lsrs	r3, r3, #8
 800269c:	b2da      	uxtb	r2, r3
 800269e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80026a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a4:	3301      	adds	r3, #1
 80026a6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80026a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026aa:	3b01      	subs	r3, #1
 80026ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80026ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026b0:	0c1b      	lsrs	r3, r3, #16
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b6:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80026b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026ba:	3301      	adds	r3, #1
 80026bc:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80026be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026c0:	3b01      	subs	r3, #1
 80026c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80026c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026c6:	0e1b      	lsrs	r3, r3, #24
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026cc:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80026ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026d0:	3301      	adds	r3, #1
 80026d2:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80026d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80026d6:	3b01      	subs	r3, #1
 80026d8:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80026da:	f7fe fa85 	bl	8000be8 <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d902      	bls.n	80026f0 <HAL_SD_ReadBlocks+0x360>
 80026ea:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d112      	bne.n	8002716 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	4a18      	ldr	r2, [pc, #96]	@ (8002758 <HAL_SD_ReadBlocks+0x3c8>)
 80026f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026fc:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2201      	movs	r2, #1
 8002708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8002712:	2301      	movs	r3, #1
 8002714:	e01b      	b.n	800274e <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800271c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d002      	beq.n	800272a <HAL_SD_ReadBlocks+0x39a>
 8002724:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1a6      	bne.n	8002678 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002732:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800273c:	2300      	movs	r3, #0
 800273e:	e006      	b.n	800274e <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002744:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
  }
}
 800274e:	4618      	mov	r0, r3
 8002750:	3748      	adds	r7, #72	@ 0x48
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	004005ff 	.word	0x004005ff

0800275c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b092      	sub	sp, #72	@ 0x48
 8002760:	af00      	add	r7, sp, #0
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
 8002768:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800276a:	f7fe fa3d 	bl	8000be8 <HAL_GetTick>
 800276e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d107      	bne.n	800278e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002782:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e16d      	b.n	8002a6a <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002794:	b2db      	uxtb	r3, r3
 8002796:	2b01      	cmp	r3, #1
 8002798:	f040 8160 	bne.w	8002a5c <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80027a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	441a      	add	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ac:	429a      	cmp	r2, r3
 80027ae:	d907      	bls.n	80027c0 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027b4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e154      	b.n	8002a6a <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2203      	movs	r2, #3
 80027c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2200      	movs	r2, #0
 80027ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d002      	beq.n	80027de <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 80027d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80027da:	025b      	lsls	r3, r3, #9
 80027dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80027de:	f04f 33ff 	mov.w	r3, #4294967295
 80027e2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	025b      	lsls	r3, r3, #9
 80027e8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80027ea:	2390      	movs	r3, #144	@ 0x90
 80027ec:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80027ee:	2300      	movs	r3, #0
 80027f0:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80027f2:	2300      	movs	r3, #0
 80027f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 80027f6:	2301      	movs	r3, #1
 80027f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f107 0218 	add.w	r2, r7, #24
 8002802:	4611      	mov	r1, r2
 8002804:	4618      	mov	r0, r3
 8002806:	f001 fed8 	bl	80045ba <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d90a      	bls.n	8002826 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2220      	movs	r2, #32
 8002814:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800281c:	4618      	mov	r0, r3
 800281e:	f001 ff80 	bl	8004722 <SDMMC_CmdWriteMultiBlock>
 8002822:	6478      	str	r0, [r7, #68]	@ 0x44
 8002824:	e009      	b.n	800283a <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2210      	movs	r2, #16
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002832:	4618      	mov	r0, r3
 8002834:	f001 ff53 	bl	80046de <SDMMC_CmdWriteSingleBlock>
 8002838:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800283a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800283c:	2b00      	cmp	r3, #0
 800283e:	d012      	beq.n	8002866 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a8b      	ldr	r2, [pc, #556]	@ (8002a74 <HAL_SD_WriteBlocks+0x318>)
 8002846:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800284c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800284e:	431a      	orrs	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	e101      	b.n	8002a6a <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800286a:	e065      	b.n	8002938 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002872:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d040      	beq.n	80028fc <HAL_SD_WriteBlocks+0x1a0>
 800287a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d03d      	beq.n	80028fc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002880:	2300      	movs	r3, #0
 8002882:	643b      	str	r3, [r7, #64]	@ 0x40
 8002884:	e037      	b.n	80028f6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800288c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800288e:	3301      	adds	r3, #1
 8002890:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002894:	3b01      	subs	r3, #1
 8002896:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002898:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	021a      	lsls	r2, r3, #8
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80028a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a6:	3301      	adds	r3, #1
 80028a8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80028aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028ac:	3b01      	subs	r3, #1
 80028ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 80028b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	041a      	lsls	r2, r3, #16
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	4313      	orrs	r3, r2
 80028ba:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80028bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028be:	3301      	adds	r3, #1
 80028c0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80028c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028c4:	3b01      	subs	r3, #1
 80028c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 80028c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	061a      	lsls	r2, r3, #24
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	4313      	orrs	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80028d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028d6:	3301      	adds	r3, #1
 80028d8:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80028da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80028dc:	3b01      	subs	r3, #1
 80028de:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f107 0214 	add.w	r2, r7, #20
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f001 fdee 	bl	80044cc <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 80028f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028f2:	3301      	adds	r3, #1
 80028f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80028f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80028f8:	2b07      	cmp	r3, #7
 80028fa:	d9c4      	bls.n	8002886 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80028fc:	f7fe f974 	bl	8000be8 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002908:	429a      	cmp	r2, r3
 800290a:	d902      	bls.n	8002912 <HAL_SD_WriteBlocks+0x1b6>
 800290c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800290e:	2b00      	cmp	r3, #0
 8002910:	d112      	bne.n	8002938 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a57      	ldr	r2, [pc, #348]	@ (8002a74 <HAL_SD_WriteBlocks+0x318>)
 8002918:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800291e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002920:	431a      	orrs	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2201      	movs	r2, #1
 800292a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2200      	movs	r2, #0
 8002932:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e098      	b.n	8002a6a <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800293e:	f240 331a 	movw	r3, #794	@ 0x31a
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d091      	beq.n	800286c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800294e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002952:	2b00      	cmp	r3, #0
 8002954:	d022      	beq.n	800299c <HAL_SD_WriteBlocks+0x240>
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d91f      	bls.n	800299c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002960:	2b03      	cmp	r3, #3
 8002962:	d01b      	beq.n	800299c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4618      	mov	r0, r3
 800296a:	f001 fefd 	bl	8004768 <SDMMC_CmdStopTransfer>
 800296e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002970:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002972:	2b00      	cmp	r3, #0
 8002974:	d012      	beq.n	800299c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a74 <HAL_SD_WriteBlocks+0x318>)
 800297c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002982:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002984:	431a      	orrs	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	2201      	movs	r2, #1
 800298e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	2200      	movs	r2, #0
 8002996:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	e066      	b.n	8002a6a <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d106      	bne.n	80029b8 <HAL_SD_WriteBlocks+0x25c>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d012      	beq.n	80029de <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a2d      	ldr	r2, [pc, #180]	@ (8002a74 <HAL_SD_WriteBlocks+0x318>)
 80029be:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c4:	f043 0208 	orr.w	r2, r3, #8
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2201      	movs	r2, #1
 80029d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	e045      	b.n	8002a6a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d012      	beq.n	8002a12 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a20      	ldr	r2, [pc, #128]	@ (8002a74 <HAL_SD_WriteBlocks+0x318>)
 80029f2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	f043 0202 	orr.w	r2, r3, #2
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e02b      	b.n	8002a6a <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a18:	f003 0310 	and.w	r3, r3, #16
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d012      	beq.n	8002a46 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a13      	ldr	r2, [pc, #76]	@ (8002a74 <HAL_SD_WriteBlocks+0x318>)
 8002a26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a2c:	f043 0210 	orr.w	r2, r3, #16
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e011      	b.n	8002a6a <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002a4e:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e006      	b.n	8002a6a <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a60:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
  }
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3748      	adds	r7, #72	@ 0x48
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	004005ff 	.word	0x004005ff

08002a78 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a86:	0f9b      	lsrs	r3, r3, #30
 8002a88:	b2da      	uxtb	r2, r3
 8002a8a:	683b      	ldr	r3, [r7, #0]
 8002a8c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a92:	0e9b      	lsrs	r3, r3, #26
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	f003 030f 	and.w	r3, r3, #15
 8002a9a:	b2da      	uxtb	r2, r3
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002aa4:	0e1b      	lsrs	r3, r3, #24
 8002aa6:	b2db      	uxtb	r3, r3
 8002aa8:	f003 0303 	and.w	r3, r3, #3
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ab6:	0c1b      	lsrs	r3, r3, #16
 8002ab8:	b2da      	uxtb	r2, r3
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ac2:	0a1b      	lsrs	r3, r3, #8
 8002ac4:	b2da      	uxtb	r2, r3
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ace:	b2da      	uxtb	r2, r3
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ad8:	0d1b      	lsrs	r3, r3, #20
 8002ada:	b29a      	uxth	r2, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ae4:	0c1b      	lsrs	r3, r3, #16
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	b2da      	uxtb	r2, r3
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002af6:	0bdb      	lsrs	r3, r3, #15
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	f003 0301 	and.w	r3, r3, #1
 8002afe:	b2da      	uxtb	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b08:	0b9b      	lsrs	r3, r3, #14
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	b2da      	uxtb	r2, r3
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b1a:	0b5b      	lsrs	r3, r3, #13
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	b2da      	uxtb	r2, r3
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b2c:	0b1b      	lsrs	r3, r3, #12
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	b2da      	uxtb	r2, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d163      	bne.n	8002c10 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b4c:	009a      	lsls	r2, r3, #2
 8002b4e:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002b52:	4013      	ands	r3, r2
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002b58:	0f92      	lsrs	r2, r2, #30
 8002b5a:	431a      	orrs	r2, r3
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b64:	0edb      	lsrs	r3, r3, #27
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	b2da      	uxtb	r2, r3
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b76:	0e1b      	lsrs	r3, r3, #24
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	b2da      	uxtb	r2, r3
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b88:	0d5b      	lsrs	r3, r3, #21
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002b9a:	0c9b      	lsrs	r3, r3, #18
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	f003 0307 	and.w	r3, r3, #7
 8002ba2:	b2da      	uxtb	r2, r3
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002bac:	0bdb      	lsrs	r3, r3, #15
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	b2da      	uxtb	r2, r3
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	691b      	ldr	r3, [r3, #16]
 8002bbe:	1c5a      	adds	r2, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	7e1b      	ldrb	r3, [r3, #24]
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	f003 0307 	and.w	r3, r3, #7
 8002bce:	3302      	adds	r3, #2
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002bda:	fb03 f202 	mul.w	r2, r3, r2
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	7a1b      	ldrb	r3, [r3, #8]
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	f003 030f 	and.w	r3, r3, #15
 8002bec:	2201      	movs	r2, #1
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002bfc:	0a52      	lsrs	r2, r2, #9
 8002bfe:	fb03 f202 	mul.w	r2, r3, r2
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c0c:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c0e:	e031      	b.n	8002c74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d11d      	bne.n	8002c54 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002c1c:	041b      	lsls	r3, r3, #16
 8002c1e:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c26:	0c1b      	lsrs	r3, r3, #16
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	3301      	adds	r3, #1
 8002c34:	029a      	lsls	r2, r3, #10
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002c48:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	661a      	str	r2, [r3, #96]	@ 0x60
 8002c52:	e00f      	b.n	8002c74 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a58      	ldr	r2, [pc, #352]	@ (8002dbc <HAL_SD_GetCardCSD+0x344>)
 8002c5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c60:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e09d      	b.n	8002db0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c78:	0b9b      	lsrs	r3, r3, #14
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	b2da      	uxtb	r2, r3
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c8a:	09db      	lsrs	r3, r3, #7
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cac:	0fdb      	lsrs	r3, r3, #31
 8002cae:	b2da      	uxtb	r2, r3
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cb8:	0f5b      	lsrs	r3, r3, #29
 8002cba:	b2db      	uxtb	r3, r3
 8002cbc:	f003 0303 	and.w	r3, r3, #3
 8002cc0:	b2da      	uxtb	r2, r3
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cca:	0e9b      	lsrs	r3, r3, #26
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	b2da      	uxtb	r2, r3
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cdc:	0d9b      	lsrs	r3, r3, #22
 8002cde:	b2db      	uxtb	r3, r3
 8002ce0:	f003 030f 	and.w	r3, r3, #15
 8002ce4:	b2da      	uxtb	r2, r3
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cee:	0d5b      	lsrs	r3, r3, #21
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	b2da      	uxtb	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	2200      	movs	r2, #0
 8002d02:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0a:	0c1b      	lsrs	r3, r3, #16
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	b2da      	uxtb	r2, r3
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	0bdb      	lsrs	r3, r3, #15
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	f003 0301 	and.w	r3, r3, #1
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d32:	0b9b      	lsrs	r3, r3, #14
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	f003 0301 	and.w	r3, r3, #1
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d46:	0b5b      	lsrs	r3, r3, #13
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5a:	0b1b      	lsrs	r3, r3, #12
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	f003 0301 	and.w	r3, r3, #1
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d6e:	0a9b      	lsrs	r3, r3, #10
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	f003 0303 	and.w	r3, r3, #3
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d82:	0a1b      	lsrs	r3, r3, #8
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	b2da      	uxtb	r2, r3
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d9e:	b2da      	uxtb	r2, r3
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	370c      	adds	r7, #12
 8002db4:	46bd      	mov	sp, r7
 8002db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dba:	4770      	bx	lr
 8002dbc:	004005ff 	.word	0x004005ff

08002dc0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b083      	sub	sp, #12
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8002e18:	b5b0      	push	{r4, r5, r7, lr}
 8002e1a:	b08e      	sub	sp, #56	@ 0x38
 8002e1c:	af04      	add	r7, sp, #16
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8002e22:	2300      	movs	r3, #0
 8002e24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2203      	movs	r2, #3
 8002e2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d02e      	beq.n	8002e96 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e3e:	d106      	bne.n	8002e4e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e44:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e4c:	e029      	b.n	8002ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002e54:	d10a      	bne.n	8002e6c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 fa1c 	bl	8003294 <SD_WideBus_Enable>
 8002e5c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	431a      	orrs	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e6a:	e01a      	b.n	8002ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d10a      	bne.n	8002e88 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 fa59 	bl	800332a <SD_WideBus_Disable>
 8002e78:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e7e:	6a3b      	ldr	r3, [r7, #32]
 8002e80:	431a      	orrs	r2, r3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e86:	e00c      	b.n	8002ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e94:	e005      	b.n	8002ea2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9a:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00b      	beq.n	8002ec2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a26      	ldr	r2, [pc, #152]	@ (8002f48 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002eb0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8002ec0:	e01f      	b.n	8002f02 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	68db      	ldr	r3, [r3, #12]
 8002ed2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	695b      	ldr	r3, [r3, #20]
 8002edc:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681d      	ldr	r5, [r3, #0]
 8002ee8:	466c      	mov	r4, sp
 8002eea:	f107 0314 	add.w	r3, r7, #20
 8002eee:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002ef2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002ef6:	f107 0308 	add.w	r3, r7, #8
 8002efa:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002efc:	4628      	mov	r0, r5
 8002efe:	f001 faad 	bl	800445c <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f001 fb81 	bl	8004612 <SDMMC_CmdBlockLength>
 8002f10:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d00c      	beq.n	8002f32 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a0a      	ldr	r2, [pc, #40]	@ (8002f48 <HAL_SD_ConfigWideBusOperation+0x130>)
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f24:	6a3b      	ldr	r3, [r7, #32]
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2201      	movs	r2, #1
 8002f36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8002f3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3728      	adds	r7, #40	@ 0x28
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bdb0      	pop	{r4, r5, r7, pc}
 8002f46:	bf00      	nop
 8002f48:	004005ff 	.word	0x004005ff

08002f4c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8002f58:	f107 030c 	add.w	r3, r7, #12
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 f970 	bl	8003244 <SD_SendStatus>
 8002f64:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	431a      	orrs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	0a5b      	lsrs	r3, r3, #9
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8002f82:	693b      	ldr	r3, [r7, #16]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002f8c:	b5b0      	push	{r4, r5, r7, lr}
 8002f8e:	b094      	sub	sp, #80	@ 0x50
 8002f90:	af04      	add	r7, sp, #16
 8002f92:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002f94:	2301      	movs	r3, #1
 8002f96:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f001 fab4 	bl	800450a <SDIO_GetPowerState>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002fa8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8002fac:	e0b8      	b.n	8003120 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d02f      	beq.n	8003016 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f001 fcde 	bl	800497c <SDMMC_CmdSendCID>
 8002fc0:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d001      	beq.n	8002fcc <SD_InitCard+0x40>
    {
      return errorstate;
 8002fc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002fca:	e0a9      	b.n	8003120 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2100      	movs	r1, #0
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f001 fade 	bl	8004594 <SDIO_GetResponse>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2104      	movs	r1, #4
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 fad5 	bl	8004594 <SDIO_GetResponse>
 8002fea:	4602      	mov	r2, r0
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	2108      	movs	r1, #8
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	f001 facc 	bl	8004594 <SDIO_GetResponse>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	210c      	movs	r1, #12
 8003008:	4618      	mov	r0, r3
 800300a:	f001 fac3 	bl	8004594 <SDIO_GetResponse>
 800300e:	4602      	mov	r2, r0
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800301a:	2b03      	cmp	r3, #3
 800301c:	d00d      	beq.n	800303a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f107 020e 	add.w	r2, r7, #14
 8003026:	4611      	mov	r1, r2
 8003028:	4618      	mov	r0, r3
 800302a:	f001 fce4 	bl	80049f6 <SDMMC_CmdSetRelAdd>
 800302e:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003030:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003032:	2b00      	cmp	r3, #0
 8003034:	d001      	beq.n	800303a <SD_InitCard+0xae>
    {
      return errorstate;
 8003036:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003038:	e072      	b.n	8003120 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303e:	2b03      	cmp	r3, #3
 8003040:	d036      	beq.n	80030b0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003042:	89fb      	ldrh	r3, [r7, #14]
 8003044:	461a      	mov	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003052:	041b      	lsls	r3, r3, #16
 8003054:	4619      	mov	r1, r3
 8003056:	4610      	mov	r0, r2
 8003058:	f001 fcae 	bl	80049b8 <SDMMC_CmdSendCSD>
 800305c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800305e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003064:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003066:	e05b      	b.n	8003120 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2100      	movs	r1, #0
 800306e:	4618      	mov	r0, r3
 8003070:	f001 fa90 	bl	8004594 <SDIO_GetResponse>
 8003074:	4602      	mov	r2, r0
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	2104      	movs	r1, #4
 8003080:	4618      	mov	r0, r3
 8003082:	f001 fa87 	bl	8004594 <SDIO_GetResponse>
 8003086:	4602      	mov	r2, r0
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2108      	movs	r1, #8
 8003092:	4618      	mov	r0, r3
 8003094:	f001 fa7e 	bl	8004594 <SDIO_GetResponse>
 8003098:	4602      	mov	r2, r0
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	210c      	movs	r1, #12
 80030a4:	4618      	mov	r0, r3
 80030a6:	f001 fa75 	bl	8004594 <SDIO_GetResponse>
 80030aa:	4602      	mov	r2, r0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	2104      	movs	r1, #4
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 fa6c 	bl	8004594 <SDIO_GetResponse>
 80030bc:	4603      	mov	r3, r0
 80030be:	0d1a      	lsrs	r2, r3, #20
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80030c4:	f107 0310 	add.w	r3, r7, #16
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fcd4 	bl	8002a78 <HAL_SD_GetCardCSD>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80030d6:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80030da:	e021      	b.n	8003120 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6819      	ldr	r1, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80030e4:	041b      	lsls	r3, r3, #16
 80030e6:	2200      	movs	r2, #0
 80030e8:	461c      	mov	r4, r3
 80030ea:	4615      	mov	r5, r2
 80030ec:	4622      	mov	r2, r4
 80030ee:	462b      	mov	r3, r5
 80030f0:	4608      	mov	r0, r1
 80030f2:	f001 fb5b 	bl	80047ac <SDMMC_CmdSelDesel>
 80030f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80030f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d001      	beq.n	8003102 <SD_InitCard+0x176>
  {
    return errorstate;
 80030fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003100:	e00e      	b.n	8003120 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681d      	ldr	r5, [r3, #0]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	466c      	mov	r4, sp
 800310a:	f103 0210 	add.w	r2, r3, #16
 800310e:	ca07      	ldmia	r2, {r0, r1, r2}
 8003110:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003114:	3304      	adds	r3, #4
 8003116:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003118:	4628      	mov	r0, r5
 800311a:	f001 f99f 	bl	800445c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3740      	adds	r7, #64	@ 0x40
 8003124:	46bd      	mov	sp, r7
 8003126:	bdb0      	pop	{r4, r5, r7, pc}

08003128 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003130:	2300      	movs	r3, #0
 8003132:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003134:	2300      	movs	r3, #0
 8003136:	617b      	str	r3, [r7, #20]
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4618      	mov	r0, r3
 8003142:	f001 fb56 	bl	80047f2 <SDMMC_CmdGoIdleState>
 8003146:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d001      	beq.n	8003152 <SD_PowerON+0x2a>
  {
    return errorstate;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	e072      	b.n	8003238 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4618      	mov	r0, r3
 8003158:	f001 fb69 	bl	800482e <SDMMC_CmdOperCond>
 800315c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d00d      	beq.n	8003180 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f001 fb3f 	bl	80047f2 <SDMMC_CmdGoIdleState>
 8003174:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d004      	beq.n	8003186 <SD_PowerON+0x5e>
    {
      return errorstate;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	e05b      	b.n	8003238 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800318a:	2b01      	cmp	r3, #1
 800318c:	d137      	bne.n	80031fe <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2100      	movs	r1, #0
 8003194:	4618      	mov	r0, r3
 8003196:	f001 fb69 	bl	800486c <SDMMC_CmdAppCommand>
 800319a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d02d      	beq.n	80031fe <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80031a6:	e047      	b.n	8003238 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	2100      	movs	r1, #0
 80031ae:	4618      	mov	r0, r3
 80031b0:	f001 fb5c 	bl	800486c <SDMMC_CmdAppCommand>
 80031b4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <SD_PowerON+0x98>
    {
      return errorstate;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	e03b      	b.n	8003238 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	491e      	ldr	r1, [pc, #120]	@ (8003240 <SD_PowerON+0x118>)
 80031c6:	4618      	mov	r0, r3
 80031c8:	f001 fb72 	bl	80048b0 <SDMMC_CmdAppOperCommand>
 80031cc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d002      	beq.n	80031da <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80031d4:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80031d8:	e02e      	b.n	8003238 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f001 f9d7 	bl	8004594 <SDIO_GetResponse>
 80031e6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	0fdb      	lsrs	r3, r3, #31
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <SD_PowerON+0xcc>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <SD_PowerON+0xce>
 80031f4:	2300      	movs	r3, #0
 80031f6:	613b      	str	r3, [r7, #16]

    count++;
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	3301      	adds	r3, #1
 80031fc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003204:	4293      	cmp	r3, r2
 8003206:	d802      	bhi.n	800320e <SD_PowerON+0xe6>
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0cc      	beq.n	80031a8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003214:	4293      	cmp	r3, r2
 8003216:	d902      	bls.n	800321e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003218:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800321c:	e00c      	b.n	8003238 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d003      	beq.n	8003230 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	645a      	str	r2, [r3, #68]	@ 0x44
 800322e:	e002      	b.n	8003236 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003236:	2300      	movs	r3, #0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3718      	adds	r7, #24
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	c1100000 	.word	0xc1100000

08003244 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b084      	sub	sp, #16
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d102      	bne.n	800325a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003254:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003258:	e018      	b.n	800328c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681a      	ldr	r2, [r3, #0]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003262:	041b      	lsls	r3, r3, #16
 8003264:	4619      	mov	r1, r3
 8003266:	4610      	mov	r0, r2
 8003268:	f001 fbe6 	bl	8004a38 <SDMMC_CmdSendStatus>
 800326c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d001      	beq.n	8003278 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	e009      	b.n	800328c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f001 f988 	bl	8004594 <SDIO_GetResponse>
 8003284:	4602      	mov	r2, r0
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800329c:	2300      	movs	r3, #0
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	2300      	movs	r3, #0
 80032a2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2100      	movs	r1, #0
 80032aa:	4618      	mov	r0, r3
 80032ac:	f001 f972 	bl	8004594 <SDIO_GetResponse>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80032ba:	d102      	bne.n	80032c2 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80032bc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80032c0:	e02f      	b.n	8003322 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80032c2:	f107 030c 	add.w	r3, r7, #12
 80032c6:	4619      	mov	r1, r3
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	f000 f879 	bl	80033c0 <SD_FindSCR>
 80032ce:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	e023      	b.n	8003322 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d01c      	beq.n	800331e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681a      	ldr	r2, [r3, #0]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ec:	041b      	lsls	r3, r3, #16
 80032ee:	4619      	mov	r1, r3
 80032f0:	4610      	mov	r0, r2
 80032f2:	f001 fabb 	bl	800486c <SDMMC_CmdAppCommand>
 80032f6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	e00f      	b.n	8003322 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	2102      	movs	r1, #2
 8003308:	4618      	mov	r0, r3
 800330a:	f001 faf4 	bl	80048f6 <SDMMC_CmdBusWidth>
 800330e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	e003      	b.n	8003322 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800331a:	2300      	movs	r3, #0
 800331c:	e001      	b.n	8003322 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800331e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003332:	2300      	movs	r3, #0
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	2300      	movs	r3, #0
 8003338:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f001 f927 	bl	8004594 <SDIO_GetResponse>
 8003346:	4603      	mov	r3, r0
 8003348:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003350:	d102      	bne.n	8003358 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003352:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003356:	e02f      	b.n	80033b8 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003358:	f107 030c 	add.w	r3, r7, #12
 800335c:	4619      	mov	r1, r3
 800335e:	6878      	ldr	r0, [r7, #4]
 8003360:	f000 f82e 	bl	80033c0 <SD_FindSCR>
 8003364:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d001      	beq.n	8003370 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	e023      	b.n	80033b8 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01c      	beq.n	80033b4 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003382:	041b      	lsls	r3, r3, #16
 8003384:	4619      	mov	r1, r3
 8003386:	4610      	mov	r0, r2
 8003388:	f001 fa70 	bl	800486c <SDMMC_CmdAppCommand>
 800338c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	e00f      	b.n	80033b8 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2100      	movs	r1, #0
 800339e:	4618      	mov	r0, r3
 80033a0:	f001 faa9 	bl	80048f6 <SDMMC_CmdBusWidth>
 80033a4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	e003      	b.n	80033b8 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	e001      	b.n	80033b8 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80033b4:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3718      	adds	r7, #24
 80033bc:	46bd      	mov	sp, r7
 80033be:	bd80      	pop	{r7, pc}

080033c0 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80033c0:	b590      	push	{r4, r7, lr}
 80033c2:	b08f      	sub	sp, #60	@ 0x3c
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80033ca:	f7fd fc0d 	bl	8000be8 <HAL_GetTick>
 80033ce:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80033d0:	2300      	movs	r3, #0
 80033d2:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80033d4:	2300      	movs	r3, #0
 80033d6:	60bb      	str	r3, [r7, #8]
 80033d8:	2300      	movs	r3, #0
 80033da:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	2108      	movs	r1, #8
 80033e6:	4618      	mov	r0, r3
 80033e8:	f001 f913 	bl	8004612 <SDMMC_CmdBlockLength>
 80033ec:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d001      	beq.n	80033f8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80033f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033f6:	e0b9      	b.n	800356c <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	4619      	mov	r1, r3
 8003404:	4610      	mov	r0, r2
 8003406:	f001 fa31 	bl	800486c <SDMMC_CmdAppCommand>
 800340a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800340c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003414:	e0aa      	b.n	800356c <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
 800341a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800341c:	2308      	movs	r3, #8
 800341e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003420:	2330      	movs	r3, #48	@ 0x30
 8003422:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003424:	2302      	movs	r3, #2
 8003426:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003428:	2300      	movs	r3, #0
 800342a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 800342c:	2301      	movs	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f107 0210 	add.w	r2, r7, #16
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f001 f8bd 	bl	80045ba <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4618      	mov	r0, r3
 8003446:	f001 fa78 	bl	800493a <SDMMC_CmdSendSCR>
 800344a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800344c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344e:	2b00      	cmp	r3, #0
 8003450:	d02a      	beq.n	80034a8 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003454:	e08a      	b.n	800356c <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800345c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00f      	beq.n	8003484 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6819      	ldr	r1, [r3, #0]
 8003468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	f107 0208 	add.w	r2, r7, #8
 8003470:	18d4      	adds	r4, r2, r3
 8003472:	4608      	mov	r0, r1
 8003474:	f001 f81d 	bl	80044b2 <SDIO_ReadFIFO>
 8003478:	4603      	mov	r3, r0
 800347a:	6023      	str	r3, [r4, #0]
      index++;
 800347c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800347e:	3301      	adds	r3, #1
 8003480:	637b      	str	r3, [r7, #52]	@ 0x34
 8003482:	e006      	b.n	8003492 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800348a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d012      	beq.n	80034b8 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8003492:	f7fd fba9 	bl	8000be8 <HAL_GetTick>
 8003496:	4602      	mov	r2, r0
 8003498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a0:	d102      	bne.n	80034a8 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80034a2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80034a6:	e061      	b.n	800356c <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ae:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d0cf      	beq.n	8003456 <SD_FindSCR+0x96>
 80034b6:	e000      	b.n	80034ba <SD_FindSCR+0xfa>
      break;
 80034b8:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034c0:	f003 0308 	and.w	r3, r3, #8
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <SD_FindSCR+0x116>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	2208      	movs	r2, #8
 80034dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80034de:	2308      	movs	r3, #8
 80034e0:	e044      	b.n	800356c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2202      	movs	r2, #2
 80034f6:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80034f8:	2302      	movs	r3, #2
 80034fa:	e037      	b.n	800356c <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003502:	f003 0320 	and.w	r3, r3, #32
 8003506:	2b00      	cmp	r3, #0
 8003508:	d005      	beq.n	8003516 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	2220      	movs	r2, #32
 8003510:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003512:	2320      	movs	r3, #32
 8003514:	e02a      	b.n	800356c <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f240 523a 	movw	r2, #1338	@ 0x53a
 800351e:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	061a      	lsls	r2, r3, #24
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	021b      	lsls	r3, r3, #8
 8003528:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800352c:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	0a1b      	lsrs	r3, r3, #8
 8003532:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003536:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	0e1b      	lsrs	r3, r3, #24
 800353c:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800353e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003540:	601a      	str	r2, [r3, #0]
    scr++;
 8003542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003544:	3304      	adds	r3, #4
 8003546:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	061a      	lsls	r2, r3, #24
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	021b      	lsls	r3, r3, #8
 8003550:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003554:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800355e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	0e1b      	lsrs	r3, r3, #24
 8003564:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003566:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003568:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800356a:	2300      	movs	r3, #0
}
 800356c:	4618      	mov	r0, r3
 800356e:	373c      	adds	r7, #60	@ 0x3c
 8003570:	46bd      	mov	sp, r7
 8003572:	bd90      	pop	{r4, r7, pc}

08003574 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e042      	b.n	800360c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	d106      	bne.n	80035a0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7fd f9bc 	bl	8000918 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2224      	movs	r2, #36	@ 0x24
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68da      	ldr	r2, [r3, #12]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80035b6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fcdb 	bl	8003f74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	691a      	ldr	r2, [r3, #16]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80035cc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695a      	ldr	r2, [r3, #20]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80035dc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68da      	ldr	r2, [r3, #12]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80035ec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2220      	movs	r2, #32
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2220      	movs	r2, #32
 8003600:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800360a:	2300      	movs	r3, #0
}
 800360c:	4618      	mov	r0, r3
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	4613      	mov	r3, r2
 8003620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b20      	cmp	r3, #32
 800362c:	d112      	bne.n	8003654 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d002      	beq.n	800363a <HAL_UART_Receive_IT+0x26>
 8003634:	88fb      	ldrh	r3, [r7, #6]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d101      	bne.n	800363e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	e00b      	b.n	8003656 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003644:	88fb      	ldrh	r3, [r7, #6]
 8003646:	461a      	mov	r2, r3
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	68f8      	ldr	r0, [r7, #12]
 800364c:	f000 faba 	bl	8003bc4 <UART_Start_Receive_IT>
 8003650:	4603      	mov	r3, r0
 8003652:	e000      	b.n	8003656 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b0ba      	sub	sp, #232	@ 0xe8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003686:	2300      	movs	r3, #0
 8003688:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800368c:	2300      	movs	r3, #0
 800368e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003696:	f003 030f 	and.w	r3, r3, #15
 800369a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800369e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036aa:	f003 0320 	and.w	r3, r3, #32
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_UART_IRQHandler+0x66>
 80036b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036b6:	f003 0320 	and.w	r3, r3, #32
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fb99 	bl	8003df6 <UART_Receive_IT>
      return;
 80036c4:	e25b      	b.n	8003b7e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80036c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 80de 	beq.w	800388c <HAL_UART_IRQHandler+0x22c>
 80036d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80036d4:	f003 0301 	and.w	r3, r3, #1
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d106      	bne.n	80036ea <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80036dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036e0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 80d1 	beq.w	800388c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80036ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00b      	beq.n	800370e <HAL_UART_IRQHandler+0xae>
 80036f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800370e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003712:	f003 0304 	and.w	r3, r3, #4
 8003716:	2b00      	cmp	r3, #0
 8003718:	d00b      	beq.n	8003732 <HAL_UART_IRQHandler+0xd2>
 800371a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800371e:	f003 0301 	and.w	r3, r3, #1
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372a:	f043 0202 	orr.w	r2, r3, #2
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_UART_IRQHandler+0xf6>
 800373e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	f043 0204 	orr.w	r2, r3, #4
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375a:	f003 0308 	and.w	r3, r3, #8
 800375e:	2b00      	cmp	r3, #0
 8003760:	d011      	beq.n	8003786 <HAL_UART_IRQHandler+0x126>
 8003762:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d105      	bne.n	800377a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800376e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003772:	f003 0301 	and.w	r3, r3, #1
 8003776:	2b00      	cmp	r3, #0
 8003778:	d005      	beq.n	8003786 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800377e:	f043 0208 	orr.w	r2, r3, #8
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 81f2 	beq.w	8003b74 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003794:	f003 0320 	and.w	r3, r3, #32
 8003798:	2b00      	cmp	r3, #0
 800379a:	d008      	beq.n	80037ae <HAL_UART_IRQHandler+0x14e>
 800379c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d002      	beq.n	80037ae <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 fb24 	bl	8003df6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	695b      	ldr	r3, [r3, #20]
 80037b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037b8:	2b40      	cmp	r3, #64	@ 0x40
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d103      	bne.n	80037da <HAL_UART_IRQHandler+0x17a>
 80037d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d04f      	beq.n	800387a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fa2c 	bl	8003c38 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ea:	2b40      	cmp	r3, #64	@ 0x40
 80037ec:	d141      	bne.n	8003872 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3314      	adds	r3, #20
 80037f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80037fc:	e853 3f00 	ldrex	r3, [r3]
 8003800:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003804:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003808:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800380c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	3314      	adds	r3, #20
 8003816:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800381a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800381e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003826:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800382a:	e841 2300 	strex	r3, r2, [r1]
 800382e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003832:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1d9      	bne.n	80037ee <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800383e:	2b00      	cmp	r3, #0
 8003840:	d013      	beq.n	800386a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003846:	4a7e      	ldr	r2, [pc, #504]	@ (8003a40 <HAL_UART_IRQHandler+0x3e0>)
 8003848:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384e:	4618      	mov	r0, r3
 8003850:	f7fd fc2a 	bl	80010a8 <HAL_DMA_Abort_IT>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d016      	beq.n	8003888 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800385e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003864:	4610      	mov	r0, r2
 8003866:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003868:	e00e      	b.n	8003888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f994 	bl	8003b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003870:	e00a      	b.n	8003888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 f990 	bl	8003b98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	e006      	b.n	8003888 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f98c 	bl	8003b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2200      	movs	r2, #0
 8003884:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003886:	e175      	b.n	8003b74 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003888:	bf00      	nop
    return;
 800388a:	e173      	b.n	8003b74 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003890:	2b01      	cmp	r3, #1
 8003892:	f040 814f 	bne.w	8003b34 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800389a:	f003 0310 	and.w	r3, r3, #16
 800389e:	2b00      	cmp	r3, #0
 80038a0:	f000 8148 	beq.w	8003b34 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038a8:	f003 0310 	and.w	r3, r3, #16
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8141 	beq.w	8003b34 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038b2:	2300      	movs	r3, #0
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	60bb      	str	r3, [r7, #8]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	695b      	ldr	r3, [r3, #20]
 80038ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d2:	2b40      	cmp	r3, #64	@ 0x40
 80038d4:	f040 80b6 	bne.w	8003a44 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80038e4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 8145 	beq.w	8003b78 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80038f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80038f6:	429a      	cmp	r2, r3
 80038f8:	f080 813e 	bcs.w	8003b78 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003902:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800390e:	f000 8088 	beq.w	8003a22 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	330c      	adds	r3, #12
 8003918:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003928:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800392c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003930:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	330c      	adds	r3, #12
 800393a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800393e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003942:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003946:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800394a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800394e:	e841 2300 	strex	r3, r2, [r1]
 8003952:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003956:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1d9      	bne.n	8003912 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3314      	adds	r3, #20
 8003964:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003966:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003968:	e853 3f00 	ldrex	r3, [r3]
 800396c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800396e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003970:	f023 0301 	bic.w	r3, r3, #1
 8003974:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	3314      	adds	r3, #20
 800397e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003982:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003986:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800398a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800398e:	e841 2300 	strex	r3, r2, [r1]
 8003992:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003994:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1e1      	bne.n	800395e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	3314      	adds	r3, #20
 80039a0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039a4:	e853 3f00 	ldrex	r3, [r3]
 80039a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3314      	adds	r3, #20
 80039ba:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80039be:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80039c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80039c4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80039c6:	e841 2300 	strex	r3, r2, [r1]
 80039ca:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80039cc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d1e3      	bne.n	800399a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2220      	movs	r2, #32
 80039d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	330c      	adds	r3, #12
 80039e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80039f0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039f2:	f023 0310 	bic.w	r3, r3, #16
 80039f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	330c      	adds	r3, #12
 8003a00:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a04:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a06:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e3      	bne.n	80039e0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fd fad3 	bl	8000fc8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a30:	b29b      	uxth	r3, r3
 8003a32:	1ad3      	subs	r3, r2, r3
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	4619      	mov	r1, r3
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f000 f8b7 	bl	8003bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a3e:	e09b      	b.n	8003b78 <HAL_UART_IRQHandler+0x518>
 8003a40:	08003cff 	.word	0x08003cff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 808e 	beq.w	8003b7c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003a60:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 8089 	beq.w	8003b7c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	330c      	adds	r3, #12
 8003a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a74:	e853 3f00 	ldrex	r3, [r3]
 8003a78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003a8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003a90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003a96:	e841 2300 	strex	r3, r2, [r1]
 8003a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d1e3      	bne.n	8003a6a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	3314      	adds	r3, #20
 8003aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aac:	e853 3f00 	ldrex	r3, [r3]
 8003ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8003ab2:	6a3b      	ldr	r3, [r7, #32]
 8003ab4:	f023 0301 	bic.w	r3, r3, #1
 8003ab8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	3314      	adds	r3, #20
 8003ac2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ac6:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ac8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003acc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ace:	e841 2300 	strex	r3, r2, [r1]
 8003ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1e3      	bne.n	8003aa2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	330c      	adds	r3, #12
 8003aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	e853 3f00 	ldrex	r3, [r3]
 8003af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f023 0310 	bic.w	r3, r3, #16
 8003afe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	330c      	adds	r3, #12
 8003b08:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b0c:	61fa      	str	r2, [r7, #28]
 8003b0e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b10:	69b9      	ldr	r1, [r7, #24]
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	e841 2300 	strex	r3, r2, [r1]
 8003b18:	617b      	str	r3, [r7, #20]
   return(result);
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d1e3      	bne.n	8003ae8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f83d 	bl	8003bac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b32:	e023      	b.n	8003b7c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d009      	beq.n	8003b54 <HAL_UART_IRQHandler+0x4f4>
 8003b40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d003      	beq.n	8003b54 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f8ea 	bl	8003d26 <UART_Transmit_IT>
    return;
 8003b52:	e014      	b.n	8003b7e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00e      	beq.n	8003b7e <HAL_UART_IRQHandler+0x51e>
 8003b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d008      	beq.n	8003b7e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f92a 	bl	8003dc6 <UART_EndTransmit_IT>
    return;
 8003b72:	e004      	b.n	8003b7e <HAL_UART_IRQHandler+0x51e>
    return;
 8003b74:	bf00      	nop
 8003b76:	e002      	b.n	8003b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b78:	bf00      	nop
 8003b7a:	e000      	b.n	8003b7e <HAL_UART_IRQHandler+0x51e>
      return;
 8003b7c:	bf00      	nop
  }
}
 8003b7e:	37e8      	adds	r7, #232	@ 0xe8
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}

08003b84 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	460b      	mov	r3, r1
 8003bb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bb8:	bf00      	nop
 8003bba:	370c      	adds	r7, #12
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr

08003bc4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	60f8      	str	r0, [r7, #12]
 8003bcc:	60b9      	str	r1, [r7, #8]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	68ba      	ldr	r2, [r7, #8]
 8003bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	88fa      	ldrh	r2, [r7, #6]
 8003bdc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	88fa      	ldrh	r2, [r7, #6]
 8003be2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2222      	movs	r2, #34	@ 0x22
 8003bee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d007      	beq.n	8003c0a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	695a      	ldr	r2, [r3, #20]
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f042 0201 	orr.w	r2, r2, #1
 8003c18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68da      	ldr	r2, [r3, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f042 0220 	orr.w	r2, r2, #32
 8003c28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3714      	adds	r7, #20
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b095      	sub	sp, #84	@ 0x54
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	330c      	adds	r3, #12
 8003c46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c4a:	e853 3f00 	ldrex	r3, [r3]
 8003c4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c60:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c62:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c68:	e841 2300 	strex	r3, r2, [r1]
 8003c6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d1e5      	bne.n	8003c40 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	3314      	adds	r3, #20
 8003c7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c7c:	6a3b      	ldr	r3, [r7, #32]
 8003c7e:	e853 3f00 	ldrex	r3, [r3]
 8003c82:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c84:	69fb      	ldr	r3, [r7, #28]
 8003c86:	f023 0301 	bic.w	r3, r3, #1
 8003c8a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3314      	adds	r3, #20
 8003c92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003c94:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c9a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c9c:	e841 2300 	strex	r3, r2, [r1]
 8003ca0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e5      	bne.n	8003c74 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d119      	bne.n	8003ce4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	330c      	adds	r3, #12
 8003cb6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	e853 3f00 	ldrex	r3, [r3]
 8003cbe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	f023 0310 	bic.w	r3, r3, #16
 8003cc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	330c      	adds	r3, #12
 8003cce:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003cd0:	61ba      	str	r2, [r7, #24]
 8003cd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6979      	ldr	r1, [r7, #20]
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	613b      	str	r3, [r7, #16]
   return(result);
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e5      	bne.n	8003cb0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003cf2:	bf00      	nop
 8003cf4:	3754      	adds	r7, #84	@ 0x54
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr

08003cfe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003d0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003d18:	68f8      	ldr	r0, [r7, #12]
 8003d1a:	f7ff ff3d 	bl	8003b98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d1e:	bf00      	nop
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}

08003d26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003d26:	b480      	push	{r7}
 8003d28:	b085      	sub	sp, #20
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b21      	cmp	r3, #33	@ 0x21
 8003d38:	d13e      	bne.n	8003db8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d42:	d114      	bne.n	8003d6e <UART_Transmit_IT+0x48>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	691b      	ldr	r3, [r3, #16]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d110      	bne.n	8003d6e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6a1b      	ldr	r3, [r3, #32]
 8003d50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	881b      	ldrh	r3, [r3, #0]
 8003d56:	461a      	mov	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6a1b      	ldr	r3, [r3, #32]
 8003d66:	1c9a      	adds	r2, r3, #2
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	621a      	str	r2, [r3, #32]
 8003d6c:	e008      	b.n	8003d80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	1c59      	adds	r1, r3, #1
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	6211      	str	r1, [r2, #32]
 8003d78:	781a      	ldrb	r2, [r3, #0]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29b      	uxth	r3, r3
 8003d8a:	687a      	ldr	r2, [r7, #4]
 8003d8c:	4619      	mov	r1, r3
 8003d8e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d10f      	bne.n	8003db4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003da2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68da      	ldr	r2, [r3, #12]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003db2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003db4:	2300      	movs	r3, #0
 8003db6:	e000      	b.n	8003dba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
  }
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	3714      	adds	r7, #20
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr

08003dc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68da      	ldr	r2, [r3, #12]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ddc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fc fcea 	bl	80007c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3708      	adds	r7, #8
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}

08003df6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003df6:	b580      	push	{r7, lr}
 8003df8:	b08c      	sub	sp, #48	@ 0x30
 8003dfa:	af00      	add	r7, sp, #0
 8003dfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b22      	cmp	r3, #34	@ 0x22
 8003e08:	f040 80ae 	bne.w	8003f68 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e14:	d117      	bne.n	8003e46 <UART_Receive_IT+0x50>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d113      	bne.n	8003e46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e26:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e3e:	1c9a      	adds	r2, r3, #2
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	629a      	str	r2, [r3, #40]	@ 0x28
 8003e44:	e026      	b.n	8003e94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e58:	d007      	beq.n	8003e6a <UART_Receive_IT+0x74>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10a      	bne.n	8003e78 <UART_Receive_IT+0x82>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d106      	bne.n	8003e78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e74:	701a      	strb	r2, [r3, #0]
 8003e76:	e008      	b.n	8003e8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e84:	b2da      	uxtb	r2, r3
 8003e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8e:	1c5a      	adds	r2, r3, #1
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e98:	b29b      	uxth	r3, r3
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	4619      	mov	r1, r3
 8003ea2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d15d      	bne.n	8003f64 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	68da      	ldr	r2, [r3, #12]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0220 	bic.w	r2, r2, #32
 8003eb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	68da      	ldr	r2, [r3, #12]
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ec6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	695a      	ldr	r2, [r3, #20]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f022 0201 	bic.w	r2, r2, #1
 8003ed6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2220      	movs	r2, #32
 8003edc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d135      	bne.n	8003f5a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	330c      	adds	r3, #12
 8003efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	613b      	str	r3, [r7, #16]
   return(result);
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f023 0310 	bic.w	r3, r3, #16
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f14:	623a      	str	r2, [r7, #32]
 8003f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f18:	69f9      	ldr	r1, [r7, #28]
 8003f1a:	6a3a      	ldr	r2, [r7, #32]
 8003f1c:	e841 2300 	strex	r3, r2, [r1]
 8003f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d1e5      	bne.n	8003ef4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f003 0310 	and.w	r3, r3, #16
 8003f32:	2b10      	cmp	r3, #16
 8003f34:	d10a      	bne.n	8003f4c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f36:	2300      	movs	r3, #0
 8003f38:	60fb      	str	r3, [r7, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003f50:	4619      	mov	r1, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f7ff fe2a 	bl	8003bac <HAL_UARTEx_RxEventCallback>
 8003f58:	e002      	b.n	8003f60 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fe12 	bl	8003b84 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003f60:	2300      	movs	r3, #0
 8003f62:	e002      	b.n	8003f6a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003f64:	2300      	movs	r3, #0
 8003f66:	e000      	b.n	8003f6a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003f68:	2302      	movs	r3, #2
  }
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3730      	adds	r7, #48	@ 0x30
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f78:	b0c0      	sub	sp, #256	@ 0x100
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	691b      	ldr	r3, [r3, #16]
 8003f88:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003f8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f90:	68d9      	ldr	r1, [r3, #12]
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	ea40 0301 	orr.w	r3, r0, r1
 8003f9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa2:	689a      	ldr	r2, [r3, #8]
 8003fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	431a      	orrs	r2, r3
 8003fac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb0:	695b      	ldr	r3, [r3, #20]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb8:	69db      	ldr	r3, [r3, #28]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003fcc:	f021 010c 	bic.w	r1, r1, #12
 8003fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003fda:	430b      	orrs	r3, r1
 8003fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	695b      	ldr	r3, [r3, #20]
 8003fe6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003fea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fee:	6999      	ldr	r1, [r3, #24]
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	ea40 0301 	orr.w	r3, r0, r1
 8003ffa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b8f      	ldr	r3, [pc, #572]	@ (8004240 <UART_SetConfig+0x2cc>)
 8004004:	429a      	cmp	r2, r3
 8004006:	d005      	beq.n	8004014 <UART_SetConfig+0xa0>
 8004008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	4b8d      	ldr	r3, [pc, #564]	@ (8004244 <UART_SetConfig+0x2d0>)
 8004010:	429a      	cmp	r2, r3
 8004012:	d104      	bne.n	800401e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004014:	f7fe f8f8 	bl	8002208 <HAL_RCC_GetPCLK2Freq>
 8004018:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800401c:	e003      	b.n	8004026 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800401e:	f7fe f8df 	bl	80021e0 <HAL_RCC_GetPCLK1Freq>
 8004022:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800402a:	69db      	ldr	r3, [r3, #28]
 800402c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004030:	f040 810c 	bne.w	800424c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004034:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004038:	2200      	movs	r2, #0
 800403a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800403e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004042:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004046:	4622      	mov	r2, r4
 8004048:	462b      	mov	r3, r5
 800404a:	1891      	adds	r1, r2, r2
 800404c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800404e:	415b      	adcs	r3, r3
 8004050:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004052:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004056:	4621      	mov	r1, r4
 8004058:	eb12 0801 	adds.w	r8, r2, r1
 800405c:	4629      	mov	r1, r5
 800405e:	eb43 0901 	adc.w	r9, r3, r1
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	f04f 0300 	mov.w	r3, #0
 800406a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800406e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004072:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004076:	4690      	mov	r8, r2
 8004078:	4699      	mov	r9, r3
 800407a:	4623      	mov	r3, r4
 800407c:	eb18 0303 	adds.w	r3, r8, r3
 8004080:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004084:	462b      	mov	r3, r5
 8004086:	eb49 0303 	adc.w	r3, r9, r3
 800408a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800408e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800409a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800409e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80040a2:	460b      	mov	r3, r1
 80040a4:	18db      	adds	r3, r3, r3
 80040a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80040a8:	4613      	mov	r3, r2
 80040aa:	eb42 0303 	adc.w	r3, r2, r3
 80040ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80040b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80040b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80040b8:	f7fc f886 	bl	80001c8 <__aeabi_uldivmod>
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	4b61      	ldr	r3, [pc, #388]	@ (8004248 <UART_SetConfig+0x2d4>)
 80040c2:	fba3 2302 	umull	r2, r3, r3, r2
 80040c6:	095b      	lsrs	r3, r3, #5
 80040c8:	011c      	lsls	r4, r3, #4
 80040ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80040d4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80040d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80040dc:	4642      	mov	r2, r8
 80040de:	464b      	mov	r3, r9
 80040e0:	1891      	adds	r1, r2, r2
 80040e2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80040e4:	415b      	adcs	r3, r3
 80040e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80040ec:	4641      	mov	r1, r8
 80040ee:	eb12 0a01 	adds.w	sl, r2, r1
 80040f2:	4649      	mov	r1, r9
 80040f4:	eb43 0b01 	adc.w	fp, r3, r1
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	f04f 0300 	mov.w	r3, #0
 8004100:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004104:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004108:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800410c:	4692      	mov	sl, r2
 800410e:	469b      	mov	fp, r3
 8004110:	4643      	mov	r3, r8
 8004112:	eb1a 0303 	adds.w	r3, sl, r3
 8004116:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800411a:	464b      	mov	r3, r9
 800411c:	eb4b 0303 	adc.w	r3, fp, r3
 8004120:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004130:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004134:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004138:	460b      	mov	r3, r1
 800413a:	18db      	adds	r3, r3, r3
 800413c:	643b      	str	r3, [r7, #64]	@ 0x40
 800413e:	4613      	mov	r3, r2
 8004140:	eb42 0303 	adc.w	r3, r2, r3
 8004144:	647b      	str	r3, [r7, #68]	@ 0x44
 8004146:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800414a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800414e:	f7fc f83b 	bl	80001c8 <__aeabi_uldivmod>
 8004152:	4602      	mov	r2, r0
 8004154:	460b      	mov	r3, r1
 8004156:	4611      	mov	r1, r2
 8004158:	4b3b      	ldr	r3, [pc, #236]	@ (8004248 <UART_SetConfig+0x2d4>)
 800415a:	fba3 2301 	umull	r2, r3, r3, r1
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	2264      	movs	r2, #100	@ 0x64
 8004162:	fb02 f303 	mul.w	r3, r2, r3
 8004166:	1acb      	subs	r3, r1, r3
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800416e:	4b36      	ldr	r3, [pc, #216]	@ (8004248 <UART_SetConfig+0x2d4>)
 8004170:	fba3 2302 	umull	r2, r3, r3, r2
 8004174:	095b      	lsrs	r3, r3, #5
 8004176:	005b      	lsls	r3, r3, #1
 8004178:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800417c:	441c      	add	r4, r3
 800417e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004182:	2200      	movs	r2, #0
 8004184:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004188:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800418c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004190:	4642      	mov	r2, r8
 8004192:	464b      	mov	r3, r9
 8004194:	1891      	adds	r1, r2, r2
 8004196:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004198:	415b      	adcs	r3, r3
 800419a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800419c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80041a0:	4641      	mov	r1, r8
 80041a2:	1851      	adds	r1, r2, r1
 80041a4:	6339      	str	r1, [r7, #48]	@ 0x30
 80041a6:	4649      	mov	r1, r9
 80041a8:	414b      	adcs	r3, r1
 80041aa:	637b      	str	r3, [r7, #52]	@ 0x34
 80041ac:	f04f 0200 	mov.w	r2, #0
 80041b0:	f04f 0300 	mov.w	r3, #0
 80041b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80041b8:	4659      	mov	r1, fp
 80041ba:	00cb      	lsls	r3, r1, #3
 80041bc:	4651      	mov	r1, sl
 80041be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041c2:	4651      	mov	r1, sl
 80041c4:	00ca      	lsls	r2, r1, #3
 80041c6:	4610      	mov	r0, r2
 80041c8:	4619      	mov	r1, r3
 80041ca:	4603      	mov	r3, r0
 80041cc:	4642      	mov	r2, r8
 80041ce:	189b      	adds	r3, r3, r2
 80041d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041d4:	464b      	mov	r3, r9
 80041d6:	460a      	mov	r2, r1
 80041d8:	eb42 0303 	adc.w	r3, r2, r3
 80041dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80041ec:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80041f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80041f4:	460b      	mov	r3, r1
 80041f6:	18db      	adds	r3, r3, r3
 80041f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041fa:	4613      	mov	r3, r2
 80041fc:	eb42 0303 	adc.w	r3, r2, r3
 8004200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004202:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004206:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800420a:	f7fb ffdd 	bl	80001c8 <__aeabi_uldivmod>
 800420e:	4602      	mov	r2, r0
 8004210:	460b      	mov	r3, r1
 8004212:	4b0d      	ldr	r3, [pc, #52]	@ (8004248 <UART_SetConfig+0x2d4>)
 8004214:	fba3 1302 	umull	r1, r3, r3, r2
 8004218:	095b      	lsrs	r3, r3, #5
 800421a:	2164      	movs	r1, #100	@ 0x64
 800421c:	fb01 f303 	mul.w	r3, r1, r3
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	3332      	adds	r3, #50	@ 0x32
 8004226:	4a08      	ldr	r2, [pc, #32]	@ (8004248 <UART_SetConfig+0x2d4>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	095b      	lsrs	r3, r3, #5
 800422e:	f003 0207 	and.w	r2, r3, #7
 8004232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4422      	add	r2, r4
 800423a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800423c:	e106      	b.n	800444c <UART_SetConfig+0x4d8>
 800423e:	bf00      	nop
 8004240:	40011000 	.word	0x40011000
 8004244:	40011400 	.word	0x40011400
 8004248:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800424c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004250:	2200      	movs	r2, #0
 8004252:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004256:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800425a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800425e:	4642      	mov	r2, r8
 8004260:	464b      	mov	r3, r9
 8004262:	1891      	adds	r1, r2, r2
 8004264:	6239      	str	r1, [r7, #32]
 8004266:	415b      	adcs	r3, r3
 8004268:	627b      	str	r3, [r7, #36]	@ 0x24
 800426a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800426e:	4641      	mov	r1, r8
 8004270:	1854      	adds	r4, r2, r1
 8004272:	4649      	mov	r1, r9
 8004274:	eb43 0501 	adc.w	r5, r3, r1
 8004278:	f04f 0200 	mov.w	r2, #0
 800427c:	f04f 0300 	mov.w	r3, #0
 8004280:	00eb      	lsls	r3, r5, #3
 8004282:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004286:	00e2      	lsls	r2, r4, #3
 8004288:	4614      	mov	r4, r2
 800428a:	461d      	mov	r5, r3
 800428c:	4643      	mov	r3, r8
 800428e:	18e3      	adds	r3, r4, r3
 8004290:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004294:	464b      	mov	r3, r9
 8004296:	eb45 0303 	adc.w	r3, r5, r3
 800429a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800429e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80042aa:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80042ba:	4629      	mov	r1, r5
 80042bc:	008b      	lsls	r3, r1, #2
 80042be:	4621      	mov	r1, r4
 80042c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042c4:	4621      	mov	r1, r4
 80042c6:	008a      	lsls	r2, r1, #2
 80042c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80042cc:	f7fb ff7c 	bl	80001c8 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4b60      	ldr	r3, [pc, #384]	@ (8004458 <UART_SetConfig+0x4e4>)
 80042d6:	fba3 2302 	umull	r2, r3, r3, r2
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	011c      	lsls	r4, r3, #4
 80042de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80042e8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80042ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	1891      	adds	r1, r2, r2
 80042f6:	61b9      	str	r1, [r7, #24]
 80042f8:	415b      	adcs	r3, r3
 80042fa:	61fb      	str	r3, [r7, #28]
 80042fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004300:	4641      	mov	r1, r8
 8004302:	1851      	adds	r1, r2, r1
 8004304:	6139      	str	r1, [r7, #16]
 8004306:	4649      	mov	r1, r9
 8004308:	414b      	adcs	r3, r1
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004318:	4659      	mov	r1, fp
 800431a:	00cb      	lsls	r3, r1, #3
 800431c:	4651      	mov	r1, sl
 800431e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004322:	4651      	mov	r1, sl
 8004324:	00ca      	lsls	r2, r1, #3
 8004326:	4610      	mov	r0, r2
 8004328:	4619      	mov	r1, r3
 800432a:	4603      	mov	r3, r0
 800432c:	4642      	mov	r2, r8
 800432e:	189b      	adds	r3, r3, r2
 8004330:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004334:	464b      	mov	r3, r9
 8004336:	460a      	mov	r2, r1
 8004338:	eb42 0303 	adc.w	r3, r2, r3
 800433c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004340:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	67bb      	str	r3, [r7, #120]	@ 0x78
 800434a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800434c:	f04f 0200 	mov.w	r2, #0
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004358:	4649      	mov	r1, r9
 800435a:	008b      	lsls	r3, r1, #2
 800435c:	4641      	mov	r1, r8
 800435e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004362:	4641      	mov	r1, r8
 8004364:	008a      	lsls	r2, r1, #2
 8004366:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800436a:	f7fb ff2d 	bl	80001c8 <__aeabi_uldivmod>
 800436e:	4602      	mov	r2, r0
 8004370:	460b      	mov	r3, r1
 8004372:	4611      	mov	r1, r2
 8004374:	4b38      	ldr	r3, [pc, #224]	@ (8004458 <UART_SetConfig+0x4e4>)
 8004376:	fba3 2301 	umull	r2, r3, r3, r1
 800437a:	095b      	lsrs	r3, r3, #5
 800437c:	2264      	movs	r2, #100	@ 0x64
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	1acb      	subs	r3, r1, r3
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	3332      	adds	r3, #50	@ 0x32
 8004388:	4a33      	ldr	r2, [pc, #204]	@ (8004458 <UART_SetConfig+0x4e4>)
 800438a:	fba2 2303 	umull	r2, r3, r2, r3
 800438e:	095b      	lsrs	r3, r3, #5
 8004390:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004394:	441c      	add	r4, r3
 8004396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800439a:	2200      	movs	r2, #0
 800439c:	673b      	str	r3, [r7, #112]	@ 0x70
 800439e:	677a      	str	r2, [r7, #116]	@ 0x74
 80043a0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80043a4:	4642      	mov	r2, r8
 80043a6:	464b      	mov	r3, r9
 80043a8:	1891      	adds	r1, r2, r2
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	415b      	adcs	r3, r3
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043b4:	4641      	mov	r1, r8
 80043b6:	1851      	adds	r1, r2, r1
 80043b8:	6039      	str	r1, [r7, #0]
 80043ba:	4649      	mov	r1, r9
 80043bc:	414b      	adcs	r3, r1
 80043be:	607b      	str	r3, [r7, #4]
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043cc:	4659      	mov	r1, fp
 80043ce:	00cb      	lsls	r3, r1, #3
 80043d0:	4651      	mov	r1, sl
 80043d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043d6:	4651      	mov	r1, sl
 80043d8:	00ca      	lsls	r2, r1, #3
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	4603      	mov	r3, r0
 80043e0:	4642      	mov	r2, r8
 80043e2:	189b      	adds	r3, r3, r2
 80043e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043e6:	464b      	mov	r3, r9
 80043e8:	460a      	mov	r2, r1
 80043ea:	eb42 0303 	adc.w	r3, r2, r3
 80043ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80043fa:	667a      	str	r2, [r7, #100]	@ 0x64
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004408:	4649      	mov	r1, r9
 800440a:	008b      	lsls	r3, r1, #2
 800440c:	4641      	mov	r1, r8
 800440e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004412:	4641      	mov	r1, r8
 8004414:	008a      	lsls	r2, r1, #2
 8004416:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800441a:	f7fb fed5 	bl	80001c8 <__aeabi_uldivmod>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4b0d      	ldr	r3, [pc, #52]	@ (8004458 <UART_SetConfig+0x4e4>)
 8004424:	fba3 1302 	umull	r1, r3, r3, r2
 8004428:	095b      	lsrs	r3, r3, #5
 800442a:	2164      	movs	r1, #100	@ 0x64
 800442c:	fb01 f303 	mul.w	r3, r1, r3
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	011b      	lsls	r3, r3, #4
 8004434:	3332      	adds	r3, #50	@ 0x32
 8004436:	4a08      	ldr	r2, [pc, #32]	@ (8004458 <UART_SetConfig+0x4e4>)
 8004438:	fba2 2303 	umull	r2, r3, r2, r3
 800443c:	095b      	lsrs	r3, r3, #5
 800443e:	f003 020f 	and.w	r2, r3, #15
 8004442:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4422      	add	r2, r4
 800444a:	609a      	str	r2, [r3, #8]
}
 800444c:	bf00      	nop
 800444e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004452:	46bd      	mov	sp, r7
 8004454:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004458:	51eb851f 	.word	0x51eb851f

0800445c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800445c:	b084      	sub	sp, #16
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	f107 001c 	add.w	r0, r7, #28
 800446a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004472:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004474:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004476:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800447a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800447c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800447e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004482:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004486:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004496:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800449a:	68fa      	ldr	r2, [r7, #12]
 800449c:	431a      	orrs	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3714      	adds	r7, #20
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	b004      	add	sp, #16
 80044b0:	4770      	bx	lr

080044b2 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b083      	sub	sp, #12
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	370c      	adds	r7, #12
 80044c4:	46bd      	mov	sp, r7
 80044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ca:	4770      	bx	lr

080044cc <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80044e0:	2300      	movs	r3, #0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	370c      	adds	r7, #12
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2203      	movs	r2, #3
 80044fa:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80044fc:	2300      	movs	r3, #0
}
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800450a:	b480      	push	{r7}
 800450c:	b083      	sub	sp, #12
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0303 	and.w	r3, r3, #3
}
 800451a:	4618      	mov	r0, r3
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004530:	2300      	movs	r3, #0
 8004532:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	681a      	ldr	r2, [r3, #0]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004544:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800454a:	431a      	orrs	r2, r3
                       Command->CPSM);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004550:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004552:	68fa      	ldr	r2, [r7, #12]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004560:	f023 030f 	bic.w	r3, r3, #15
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	431a      	orrs	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3714      	adds	r7, #20
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800457a:	b480      	push	{r7}
 800457c:	b083      	sub	sp, #12
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	691b      	ldr	r3, [r3, #16]
 8004586:	b2db      	uxtb	r3, r3
}
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004594:	b480      	push	{r7}
 8004596:	b085      	sub	sp, #20
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3314      	adds	r3, #20
 80045a2:	461a      	mov	r2, r3
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	4413      	add	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
}  
 80045ae:	4618      	mov	r0, r3
 80045b0:	3714      	adds	r7, #20
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80045c4:	2300      	movs	r3, #0
 80045c6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	685a      	ldr	r2, [r3, #4]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80045e0:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80045e6:	431a      	orrs	r2, r3
                       Data->DPSM);
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80045ec:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	431a      	orrs	r2, r3
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8004604:	2300      	movs	r3, #0

}
 8004606:	4618      	mov	r0, r3
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr

08004612 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b088      	sub	sp, #32
 8004616:	af00      	add	r7, sp, #0
 8004618:	6078      	str	r0, [r7, #4]
 800461a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004620:	2310      	movs	r3, #16
 8004622:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004624:	2340      	movs	r3, #64	@ 0x40
 8004626:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004628:	2300      	movs	r3, #0
 800462a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800462c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004630:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004632:	f107 0308 	add.w	r3, r7, #8
 8004636:	4619      	mov	r1, r3
 8004638:	6878      	ldr	r0, [r7, #4]
 800463a:	f7ff ff74 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800463e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004642:	2110      	movs	r1, #16
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f000 fa19 	bl	8004a7c <SDMMC_GetCmdResp1>
 800464a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800464c:	69fb      	ldr	r3, [r7, #28]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3720      	adds	r7, #32
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b088      	sub	sp, #32
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004664:	2311      	movs	r3, #17
 8004666:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004668:	2340      	movs	r3, #64	@ 0x40
 800466a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800466c:	2300      	movs	r3, #0
 800466e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004670:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004674:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004676:	f107 0308 	add.w	r3, r7, #8
 800467a:	4619      	mov	r1, r3
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff ff52 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004686:	2111      	movs	r1, #17
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f9f7 	bl	8004a7c <SDMMC_GetCmdResp1>
 800468e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004690:	69fb      	ldr	r3, [r7, #28]
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}

0800469a <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800469a:	b580      	push	{r7, lr}
 800469c:	b088      	sub	sp, #32
 800469e:	af00      	add	r7, sp, #0
 80046a0:	6078      	str	r0, [r7, #4]
 80046a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80046a8:	2312      	movs	r3, #18
 80046aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046ac:	2340      	movs	r3, #64	@ 0x40
 80046ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046b0:	2300      	movs	r3, #0
 80046b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046ba:	f107 0308 	add.w	r3, r7, #8
 80046be:	4619      	mov	r1, r3
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ff30 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80046c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046ca:	2112      	movs	r1, #18
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f000 f9d5 	bl	8004a7c <SDMMC_GetCmdResp1>
 80046d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80046d4:	69fb      	ldr	r3, [r7, #28]
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3720      	adds	r7, #32
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}

080046de <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80046de:	b580      	push	{r7, lr}
 80046e0:	b088      	sub	sp, #32
 80046e2:	af00      	add	r7, sp, #0
 80046e4:	6078      	str	r0, [r7, #4]
 80046e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80046ec:	2318      	movs	r3, #24
 80046ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80046f0:	2340      	movs	r3, #64	@ 0x40
 80046f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80046f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80046fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80046fe:	f107 0308 	add.w	r3, r7, #8
 8004702:	4619      	mov	r1, r3
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff ff0e 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800470a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800470e:	2118      	movs	r1, #24
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 f9b3 	bl	8004a7c <SDMMC_GetCmdResp1>
 8004716:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004718:	69fb      	ldr	r3, [r7, #28]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3720      	adds	r7, #32
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b088      	sub	sp, #32
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
 800472a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004730:	2319      	movs	r3, #25
 8004732:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004734:	2340      	movs	r3, #64	@ 0x40
 8004736:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800473c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004740:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004742:	f107 0308 	add.w	r3, r7, #8
 8004746:	4619      	mov	r1, r3
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff feec 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800474e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004752:	2119      	movs	r1, #25
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f991 	bl	8004a7c <SDMMC_GetCmdResp1>
 800475a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800475c:	69fb      	ldr	r3, [r7, #28]
}
 800475e:	4618      	mov	r0, r3
 8004760:	3720      	adds	r7, #32
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}
	...

08004768 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b088      	sub	sp, #32
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004774:	230c      	movs	r3, #12
 8004776:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004778:	2340      	movs	r3, #64	@ 0x40
 800477a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800477c:	2300      	movs	r3, #0
 800477e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004780:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004784:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004786:	f107 0308 	add.w	r3, r7, #8
 800478a:	4619      	mov	r1, r3
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff feca 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004792:	4a05      	ldr	r2, [pc, #20]	@ (80047a8 <SDMMC_CmdStopTransfer+0x40>)
 8004794:	210c      	movs	r1, #12
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 f970 	bl	8004a7c <SDMMC_GetCmdResp1>
 800479c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800479e:	69fb      	ldr	r3, [r7, #28]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3720      	adds	r7, #32
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	05f5e100 	.word	0x05f5e100

080047ac <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08a      	sub	sp, #40	@ 0x28
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80047bc:	2307      	movs	r3, #7
 80047be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80047c0:	2340      	movs	r3, #64	@ 0x40
 80047c2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80047c4:	2300      	movs	r3, #0
 80047c6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80047c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80047cc:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80047ce:	f107 0310 	add.w	r3, r7, #16
 80047d2:	4619      	mov	r1, r3
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f7ff fea6 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80047da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047de:	2107      	movs	r1, #7
 80047e0:	68f8      	ldr	r0, [r7, #12]
 80047e2:	f000 f94b 	bl	8004a7c <SDMMC_GetCmdResp1>
 80047e6:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3728      	adds	r7, #40	@ 0x28
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b088      	sub	sp, #32
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80047fa:	2300      	movs	r3, #0
 80047fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80047fe:	2300      	movs	r3, #0
 8004800:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004802:	2300      	movs	r3, #0
 8004804:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800480a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800480e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004810:	f107 0308 	add.w	r3, r7, #8
 8004814:	4619      	mov	r1, r3
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff fe85 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800481c:	6878      	ldr	r0, [r7, #4]
 800481e:	f000 fb65 	bl	8004eec <SDMMC_GetCmdError>
 8004822:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004824:	69fb      	ldr	r3, [r7, #28]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3720      	adds	r7, #32
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}

0800482e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b088      	sub	sp, #32
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004836:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 800483a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800483c:	2308      	movs	r3, #8
 800483e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004840:	2340      	movs	r3, #64	@ 0x40
 8004842:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004844:	2300      	movs	r3, #0
 8004846:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004848:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800484c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800484e:	f107 0308 	add.w	r3, r7, #8
 8004852:	4619      	mov	r1, r3
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fe66 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 faf8 	bl	8004e50 <SDMMC_GetCmdResp7>
 8004860:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004862:	69fb      	ldr	r3, [r7, #28]
}
 8004864:	4618      	mov	r0, r3
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}

0800486c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b088      	sub	sp, #32
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800487a:	2337      	movs	r3, #55	@ 0x37
 800487c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800487e:	2340      	movs	r3, #64	@ 0x40
 8004880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800488a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800488c:	f107 0308 	add.w	r3, r7, #8
 8004890:	4619      	mov	r1, r3
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff fe47 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004898:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489c:	2137      	movs	r1, #55	@ 0x37
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f000 f8ec 	bl	8004a7c <SDMMC_GetCmdResp1>
 80048a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048a6:	69fb      	ldr	r3, [r7, #28]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3720      	adds	r7, #32
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b088      	sub	sp, #32
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80048c0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80048c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80048c6:	2329      	movs	r3, #41	@ 0x29
 80048c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048ca:	2340      	movs	r3, #64	@ 0x40
 80048cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048d8:	f107 0308 	add.w	r3, r7, #8
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fe21 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f9ff 	bl	8004ce8 <SDMMC_GetCmdResp3>
 80048ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80048ec:	69fb      	ldr	r3, [r7, #28]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3720      	adds	r7, #32
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}

080048f6 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80048f6:	b580      	push	{r7, lr}
 80048f8:	b088      	sub	sp, #32
 80048fa:	af00      	add	r7, sp, #0
 80048fc:	6078      	str	r0, [r7, #4]
 80048fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004904:	2306      	movs	r3, #6
 8004906:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004908:	2340      	movs	r3, #64	@ 0x40
 800490a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800490c:	2300      	movs	r3, #0
 800490e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004910:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004914:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004916:	f107 0308 	add.w	r3, r7, #8
 800491a:	4619      	mov	r1, r3
 800491c:	6878      	ldr	r0, [r7, #4]
 800491e:	f7ff fe02 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004926:	2106      	movs	r1, #6
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 f8a7 	bl	8004a7c <SDMMC_GetCmdResp1>
 800492e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004930:	69fb      	ldr	r3, [r7, #28]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3720      	adds	r7, #32
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800493a:	b580      	push	{r7, lr}
 800493c:	b088      	sub	sp, #32
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004946:	2333      	movs	r3, #51	@ 0x33
 8004948:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800494a:	2340      	movs	r3, #64	@ 0x40
 800494c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004952:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004956:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004958:	f107 0308 	add.w	r3, r7, #8
 800495c:	4619      	mov	r1, r3
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f7ff fde1 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004964:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004968:	2133      	movs	r1, #51	@ 0x33
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 f886 	bl	8004a7c <SDMMC_GetCmdResp1>
 8004970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004972:	69fb      	ldr	r3, [r7, #28]
}
 8004974:	4618      	mov	r0, r3
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b088      	sub	sp, #32
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004988:	2302      	movs	r3, #2
 800498a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800498c:	23c0      	movs	r3, #192	@ 0xc0
 800498e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004994:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004998:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800499a:	f107 0308 	add.w	r3, r7, #8
 800499e:	4619      	mov	r1, r3
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f7ff fdc0 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 f956 	bl	8004c58 <SDMMC_GetCmdResp2>
 80049ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ae:	69fb      	ldr	r3, [r7, #28]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3720      	adds	r7, #32
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b088      	sub	sp, #32
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80049c6:	2309      	movs	r3, #9
 80049c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80049ca:	23c0      	movs	r3, #192	@ 0xc0
 80049cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049ce:	2300      	movs	r3, #0
 80049d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049d8:	f107 0308 	add.w	r3, r7, #8
 80049dc:	4619      	mov	r1, r3
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fda1 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f000 f937 	bl	8004c58 <SDMMC_GetCmdResp2>
 80049ea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ec:	69fb      	ldr	r3, [r7, #28]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3720      	adds	r7, #32
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b088      	sub	sp, #32
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004a00:	2300      	movs	r3, #0
 8004a02:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004a04:	2303      	movs	r3, #3
 8004a06:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a08:	2340      	movs	r3, #64	@ 0x40
 8004a0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a10:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a14:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a16:	f107 0308 	add.w	r3, r7, #8
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff fd82 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004a22:	683a      	ldr	r2, [r7, #0]
 8004a24:	2103      	movs	r1, #3
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f99c 	bl	8004d64 <SDMMC_GetCmdResp6>
 8004a2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b088      	sub	sp, #32
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004a46:	230d      	movs	r3, #13
 8004a48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a4a:	2340      	movs	r3, #64	@ 0x40
 8004a4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a58:	f107 0308 	add.w	r3, r7, #8
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f7ff fd61 	bl	8004526 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004a64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a68:	210d      	movs	r1, #13
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f806 	bl	8004a7c <SDMMC_GetCmdResp1>
 8004a70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a72:	69fb      	ldr	r3, [r7, #28]
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3720      	adds	r7, #32
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	460b      	mov	r3, r1
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004a8a:	4b70      	ldr	r3, [pc, #448]	@ (8004c4c <SDMMC_GetCmdResp1+0x1d0>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a70      	ldr	r2, [pc, #448]	@ (8004c50 <SDMMC_GetCmdResp1+0x1d4>)
 8004a90:	fba2 2303 	umull	r2, r3, r2, r3
 8004a94:	0a5a      	lsrs	r2, r3, #9
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	fb02 f303 	mul.w	r3, r2, r3
 8004a9c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	1e5a      	subs	r2, r3, #1
 8004aa2:	61fa      	str	r2, [r7, #28]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004aa8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004aac:	e0c9      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ab2:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ab4:	69bb      	ldr	r3, [r7, #24]
 8004ab6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d0ef      	beq.n	8004a9e <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004abe:	69bb      	ldr	r3, [r7, #24]
 8004ac0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1ea      	bne.n	8004a9e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004acc:	f003 0304 	and.w	r3, r3, #4
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d004      	beq.n	8004ade <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2204      	movs	r2, #4
 8004ad8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004ada:	2304      	movs	r3, #4
 8004adc:	e0b1      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae2:	f003 0301 	and.w	r3, r3, #1
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d004      	beq.n	8004af4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0a6      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	22c5      	movs	r2, #197	@ 0xc5
 8004af8:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7ff fd3d 	bl	800457a <SDIO_GetCommandResponse>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461a      	mov	r2, r3
 8004b04:	7afb      	ldrb	r3, [r7, #11]
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d001      	beq.n	8004b0e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e099      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004b0e:	2100      	movs	r1, #0
 8004b10:	68f8      	ldr	r0, [r7, #12]
 8004b12:	f7ff fd3f 	bl	8004594 <SDIO_GetResponse>
 8004b16:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004b18:	697a      	ldr	r2, [r7, #20]
 8004b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8004c54 <SDMMC_GetCmdResp1+0x1d8>)
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004b22:	2300      	movs	r3, #0
 8004b24:	e08d      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	da02      	bge.n	8004b32 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004b2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004b30:	e087      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004b3c:	2340      	movs	r3, #64	@ 0x40
 8004b3e:	e080      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d001      	beq.n	8004b4e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004b4a:	2380      	movs	r3, #128	@ 0x80
 8004b4c:	e079      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d002      	beq.n	8004b5e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004b58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004b5c:	e071      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d002      	beq.n	8004b6e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004b68:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b6c:	e069      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004b78:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b7c:	e061      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d002      	beq.n	8004b8e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004b88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004b8c:	e059      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004b98:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004b9c:	e051      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004bac:	e049      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004bb8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004bbc:	e041      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004bc8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004bcc:	e039      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004bd8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004bdc:	e031      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d002      	beq.n	8004bee <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004be8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004bec:	e029      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d002      	beq.n	8004bfe <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004bf8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004bfc:	e021      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004c08:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004c0c:	e019      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004c18:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004c1c:	e011      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d002      	beq.n	8004c2e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004c28:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004c2c:	e009      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004c38:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004c3c:	e001      	b.n	8004c42 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004c3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3720      	adds	r7, #32
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000004 	.word	0x20000004
 8004c50:	10624dd3 	.word	0x10624dd3
 8004c54:	fdffe008 	.word	0xfdffe008

08004c58 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004c60:	4b1f      	ldr	r3, [pc, #124]	@ (8004ce0 <SDMMC_GetCmdResp2+0x88>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce4 <SDMMC_GetCmdResp2+0x8c>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	0a5b      	lsrs	r3, r3, #9
 8004c6c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c70:	fb02 f303 	mul.w	r3, r2, r3
 8004c74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	1e5a      	subs	r2, r3, #1
 8004c7a:	60fa      	str	r2, [r7, #12]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d102      	bne.n	8004c86 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004c80:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004c84:	e026      	b.n	8004cd4 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c8a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d0ef      	beq.n	8004c76 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1ea      	bne.n	8004c76 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2204      	movs	r2, #4
 8004cb0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004cb2:	2304      	movs	r3, #4
 8004cb4:	e00e      	b.n	8004cd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d004      	beq.n	8004ccc <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e003      	b.n	8004cd4 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	22c5      	movs	r2, #197	@ 0xc5
 8004cd0:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8004cd2:	2300      	movs	r3, #0
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr
 8004ce0:	20000004 	.word	0x20000004
 8004ce4:	10624dd3 	.word	0x10624dd3

08004ce8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d5c <SDMMC_GetCmdResp3+0x74>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a1a      	ldr	r2, [pc, #104]	@ (8004d60 <SDMMC_GetCmdResp3+0x78>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	0a5b      	lsrs	r3, r3, #9
 8004cfc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
 8004d04:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	1e5a      	subs	r2, r3, #1
 8004d0a:	60fa      	str	r2, [r7, #12]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d102      	bne.n	8004d16 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d10:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d14:	e01b      	b.n	8004d4e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d0ef      	beq.n	8004d06 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ea      	bne.n	8004d06 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d004      	beq.n	8004d46 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2204      	movs	r2, #4
 8004d40:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004d42:	2304      	movs	r3, #4
 8004d44:	e003      	b.n	8004d4e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	22c5      	movs	r2, #197	@ 0xc5
 8004d4a:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	20000004 	.word	0x20000004
 8004d60:	10624dd3 	.word	0x10624dd3

08004d64 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b088      	sub	sp, #32
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004d72:	4b35      	ldr	r3, [pc, #212]	@ (8004e48 <SDMMC_GetCmdResp6+0xe4>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a35      	ldr	r2, [pc, #212]	@ (8004e4c <SDMMC_GetCmdResp6+0xe8>)
 8004d78:	fba2 2303 	umull	r2, r3, r2, r3
 8004d7c:	0a5b      	lsrs	r3, r3, #9
 8004d7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d82:	fb02 f303 	mul.w	r3, r2, r3
 8004d86:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	1e5a      	subs	r2, r3, #1
 8004d8c:	61fa      	str	r2, [r7, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d102      	bne.n	8004d98 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d92:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d96:	e052      	b.n	8004e3e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d9c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d0ef      	beq.n	8004d88 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d1ea      	bne.n	8004d88 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d004      	beq.n	8004dc8 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2204      	movs	r2, #4
 8004dc2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	e03a      	b.n	8004e3e <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e02f      	b.n	8004e3e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004dde:	68f8      	ldr	r0, [r7, #12]
 8004de0:	f7ff fbcb 	bl	800457a <SDIO_GetCommandResponse>
 8004de4:	4603      	mov	r3, r0
 8004de6:	461a      	mov	r2, r3
 8004de8:	7afb      	ldrb	r3, [r7, #11]
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d001      	beq.n	8004df2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e025      	b.n	8004e3e <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	22c5      	movs	r2, #197	@ 0xc5
 8004df6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004df8:	2100      	movs	r1, #0
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff fbca 	bl	8004594 <SDIO_GetResponse>
 8004e00:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d106      	bne.n	8004e1a <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	0c1b      	lsrs	r3, r3, #16
 8004e10:	b29a      	uxth	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e011      	b.n	8004e3e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e24:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e28:	e009      	b.n	8004e3e <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e38:	e001      	b.n	8004e3e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004e3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000004 	.word	0x20000004
 8004e4c:	10624dd3 	.word	0x10624dd3

08004e50 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004e58:	4b22      	ldr	r3, [pc, #136]	@ (8004ee4 <SDMMC_GetCmdResp7+0x94>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a22      	ldr	r2, [pc, #136]	@ (8004ee8 <SDMMC_GetCmdResp7+0x98>)
 8004e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e62:	0a5b      	lsrs	r3, r3, #9
 8004e64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004e68:	fb02 f303 	mul.w	r3, r2, r3
 8004e6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1e5a      	subs	r2, r3, #1
 8004e72:	60fa      	str	r2, [r7, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e78:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004e7c:	e02c      	b.n	8004ed8 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e82:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d0ef      	beq.n	8004e6e <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1ea      	bne.n	8004e6e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e9c:	f003 0304 	and.w	r3, r3, #4
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004eaa:	2304      	movs	r3, #4
 8004eac:	e014      	b.n	8004ed8 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d004      	beq.n	8004ec4 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e009      	b.n	8004ed8 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ec8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d002      	beq.n	8004ed6 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2240      	movs	r2, #64	@ 0x40
 8004ed4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8004ed6:	2300      	movs	r3, #0
  
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3714      	adds	r7, #20
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr
 8004ee4:	20000004 	.word	0x20000004
 8004ee8:	10624dd3 	.word	0x10624dd3

08004eec <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b085      	sub	sp, #20
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004ef4:	4b11      	ldr	r3, [pc, #68]	@ (8004f3c <SDMMC_GetCmdError+0x50>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a11      	ldr	r2, [pc, #68]	@ (8004f40 <SDMMC_GetCmdError+0x54>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	0a5b      	lsrs	r3, r3, #9
 8004f00:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f04:	fb02 f303 	mul.w	r3, r2, r3
 8004f08:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	1e5a      	subs	r2, r3, #1
 8004f0e:	60fa      	str	r2, [r7, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d102      	bne.n	8004f1a <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f14:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004f18:	e009      	b.n	8004f2e <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f1      	beq.n	8004f0a <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	22c5      	movs	r2, #197	@ 0xc5
 8004f2a:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8004f2c:	2300      	movs	r3, #0
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3714      	adds	r7, #20
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	20000004 	.word	0x20000004
 8004f40:	10624dd3 	.word	0x10624dd3

08004f44 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8004f48:	4904      	ldr	r1, [pc, #16]	@ (8004f5c <MX_FATFS_Init+0x18>)
 8004f4a:	4805      	ldr	r0, [pc, #20]	@ (8004f60 <MX_FATFS_Init+0x1c>)
 8004f4c:	f000 fe64 	bl	8005c18 <FATFS_LinkDriver>
 8004f50:	4603      	mov	r3, r0
 8004f52:	461a      	mov	r2, r3
 8004f54:	4b03      	ldr	r3, [pc, #12]	@ (8004f64 <MX_FATFS_Init+0x20>)
 8004f56:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8004f58:	bf00      	nop
 8004f5a:	bd80      	pop	{r7, pc}
 8004f5c:	20000394 	.word	0x20000394
 8004f60:	08005d18 	.word	0x08005d18
 8004f64:	20000390 	.word	0x20000390

08004f68 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8004f72:	f000 f879 	bl	8005068 <BSP_SD_IsDetected>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d001      	beq.n	8004f80 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e012      	b.n	8004fa6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8004f80:	480b      	ldr	r0, [pc, #44]	@ (8004fb0 <BSP_SD_Init+0x48>)
 8004f82:	f7fd f955 	bl	8002230 <HAL_SD_Init>
 8004f86:	4603      	mov	r3, r0
 8004f88:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8004f8a:	79fb      	ldrb	r3, [r7, #7]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d109      	bne.n	8004fa4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8004f90:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004f94:	4806      	ldr	r0, [pc, #24]	@ (8004fb0 <BSP_SD_Init+0x48>)
 8004f96:	f7fd ff3f 	bl	8002e18 <HAL_SD_ConfigWideBusOperation>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d001      	beq.n	8004fa4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8004fa0:	2301      	movs	r3, #1
 8004fa2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8004fa4:	79fb      	ldrb	r3, [r7, #7]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3708      	adds	r7, #8
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	2000002c 	.word	0x2000002c

08004fb4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b088      	sub	sp, #32
 8004fb8:	af02      	add	r7, sp, #8
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	68f9      	ldr	r1, [r7, #12]
 8004fd0:	4806      	ldr	r0, [pc, #24]	@ (8004fec <BSP_SD_ReadBlocks+0x38>)
 8004fd2:	f7fd f9dd 	bl	8002390 <HAL_SD_ReadBlocks>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d001      	beq.n	8004fe0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8004fe0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	2000002c 	.word	0x2000002c

08004ff0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b088      	sub	sp, #32
 8004ff4:	af02      	add	r7, sp, #8
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
 8004ffc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	68f9      	ldr	r1, [r7, #12]
 800500c:	4806      	ldr	r0, [pc, #24]	@ (8005028 <BSP_SD_WriteBlocks+0x38>)
 800500e:	f7fd fba5 	bl	800275c <HAL_SD_WriteBlocks>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d001      	beq.n	800501c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800501c:	7dfb      	ldrb	r3, [r7, #23]
}
 800501e:	4618      	mov	r0, r3
 8005020:	3718      	adds	r7, #24
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
 8005026:	bf00      	nop
 8005028:	2000002c 	.word	0x2000002c

0800502c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005030:	4805      	ldr	r0, [pc, #20]	@ (8005048 <BSP_SD_GetCardState+0x1c>)
 8005032:	f7fd ff8b 	bl	8002f4c <HAL_SD_GetCardState>
 8005036:	4603      	mov	r3, r0
 8005038:	2b04      	cmp	r3, #4
 800503a:	bf14      	ite	ne
 800503c:	2301      	movne	r3, #1
 800503e:	2300      	moveq	r3, #0
 8005040:	b2db      	uxtb	r3, r3
}
 8005042:	4618      	mov	r0, r3
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	2000002c 	.word	0x2000002c

0800504c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005054:	6879      	ldr	r1, [r7, #4]
 8005056:	4803      	ldr	r0, [pc, #12]	@ (8005064 <BSP_SD_GetCardInfo+0x18>)
 8005058:	f7fd feb2 	bl	8002dc0 <HAL_SD_GetCardInfo>
}
 800505c:	bf00      	nop
 800505e:	3708      	adds	r7, #8
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}
 8005064:	2000002c 	.word	0x2000002c

08005068 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b082      	sub	sp, #8
 800506c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800506e:	2301      	movs	r3, #1
 8005070:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005072:	f000 f80b 	bl	800508c <BSP_PlatformIsDetected>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d101      	bne.n	8005080 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800507c:	2300      	movs	r3, #0
 800507e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	b2db      	uxtb	r3, r3
}
 8005084:	4618      	mov	r0, r3
 8005086:	3708      	adds	r7, #8
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}

0800508c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800508c:	b580      	push	{r7, lr}
 800508e:	b082      	sub	sp, #8
 8005090:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005092:	2301      	movs	r3, #1
 8005094:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005096:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800509a:	4806      	ldr	r0, [pc, #24]	@ (80050b4 <BSP_PlatformIsDetected+0x28>)
 800509c:	f7fc fbfe 	bl	800189c <HAL_GPIO_ReadPin>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d001      	beq.n	80050aa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80050a6:	2300      	movs	r3, #0
 80050a8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80050aa:	79fb      	ldrb	r3, [r7, #7]
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40020000 	.word	0x40020000

080050b8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	4603      	mov	r3, r0
 80050c0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80050c2:	4b0b      	ldr	r3, [pc, #44]	@ (80050f0 <SD_CheckStatus+0x38>)
 80050c4:	2201      	movs	r2, #1
 80050c6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80050c8:	f7ff ffb0 	bl	800502c <BSP_SD_GetCardState>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d107      	bne.n	80050e2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80050d2:	4b07      	ldr	r3, [pc, #28]	@ (80050f0 <SD_CheckStatus+0x38>)
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	b2db      	uxtb	r3, r3
 80050d8:	f023 0301 	bic.w	r3, r3, #1
 80050dc:	b2da      	uxtb	r2, r3
 80050de:	4b04      	ldr	r3, [pc, #16]	@ (80050f0 <SD_CheckStatus+0x38>)
 80050e0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80050e2:	4b03      	ldr	r3, [pc, #12]	@ (80050f0 <SD_CheckStatus+0x38>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	b2db      	uxtb	r3, r3
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3708      	adds	r7, #8
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}
 80050f0:	2000000d 	.word	0x2000000d

080050f4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	4603      	mov	r3, r0
 80050fc:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80050fe:	4b0b      	ldr	r3, [pc, #44]	@ (800512c <SD_initialize+0x38>)
 8005100:	2201      	movs	r2, #1
 8005102:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005104:	f7ff ff30 	bl	8004f68 <BSP_SD_Init>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d107      	bne.n	800511e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	4618      	mov	r0, r3
 8005112:	f7ff ffd1 	bl	80050b8 <SD_CheckStatus>
 8005116:	4603      	mov	r3, r0
 8005118:	461a      	mov	r2, r3
 800511a:	4b04      	ldr	r3, [pc, #16]	@ (800512c <SD_initialize+0x38>)
 800511c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800511e:	4b03      	ldr	r3, [pc, #12]	@ (800512c <SD_initialize+0x38>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	b2db      	uxtb	r3, r3
}
 8005124:	4618      	mov	r0, r3
 8005126:	3708      	adds	r7, #8
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	2000000d 	.word	0x2000000d

08005130 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
 8005136:	4603      	mov	r3, r0
 8005138:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800513a:	79fb      	ldrb	r3, [r7, #7]
 800513c:	4618      	mov	r0, r3
 800513e:	f7ff ffbb 	bl	80050b8 <SD_CheckStatus>
 8005142:	4603      	mov	r3, r0
}
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b086      	sub	sp, #24
 8005150:	af00      	add	r7, sp, #0
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
 8005156:	603b      	str	r3, [r7, #0]
 8005158:	4603      	mov	r3, r0
 800515a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005160:	f04f 33ff 	mov.w	r3, #4294967295
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	6879      	ldr	r1, [r7, #4]
 8005168:	68b8      	ldr	r0, [r7, #8]
 800516a:	f7ff ff23 	bl	8004fb4 <BSP_SD_ReadBlocks>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d107      	bne.n	8005184 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005174:	bf00      	nop
 8005176:	f7ff ff59 	bl	800502c <BSP_SD_GetCardState>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	d1fa      	bne.n	8005176 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005184:	7dfb      	ldrb	r3, [r7, #23]
}
 8005186:	4618      	mov	r0, r3
 8005188:	3718      	adds	r7, #24
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}

0800518e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b086      	sub	sp, #24
 8005192:	af00      	add	r7, sp, #0
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
 800519a:	4603      	mov	r3, r0
 800519c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80051a2:	f04f 33ff 	mov.w	r3, #4294967295
 80051a6:	683a      	ldr	r2, [r7, #0]
 80051a8:	6879      	ldr	r1, [r7, #4]
 80051aa:	68b8      	ldr	r0, [r7, #8]
 80051ac:	f7ff ff20 	bl	8004ff0 <BSP_SD_WriteBlocks>
 80051b0:	4603      	mov	r3, r0
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d107      	bne.n	80051c6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80051b6:	bf00      	nop
 80051b8:	f7ff ff38 	bl	800502c <BSP_SD_GetCardState>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1fa      	bne.n	80051b8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80051c2:	2300      	movs	r3, #0
 80051c4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80051c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b08c      	sub	sp, #48	@ 0x30
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	603a      	str	r2, [r7, #0]
 80051da:	71fb      	strb	r3, [r7, #7]
 80051dc:	460b      	mov	r3, r1
 80051de:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80051e0:	2301      	movs	r3, #1
 80051e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80051e6:	4b25      	ldr	r3, [pc, #148]	@ (800527c <SD_ioctl+0xac>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d001      	beq.n	80051f8 <SD_ioctl+0x28>
 80051f4:	2303      	movs	r3, #3
 80051f6:	e03c      	b.n	8005272 <SD_ioctl+0xa2>

  switch (cmd)
 80051f8:	79bb      	ldrb	r3, [r7, #6]
 80051fa:	2b03      	cmp	r3, #3
 80051fc:	d834      	bhi.n	8005268 <SD_ioctl+0x98>
 80051fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005204 <SD_ioctl+0x34>)
 8005200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005204:	08005215 	.word	0x08005215
 8005208:	0800521d 	.word	0x0800521d
 800520c:	08005235 	.word	0x08005235
 8005210:	0800524f 	.word	0x0800524f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005214:	2300      	movs	r3, #0
 8005216:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800521a:	e028      	b.n	800526e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800521c:	f107 030c 	add.w	r3, r7, #12
 8005220:	4618      	mov	r0, r3
 8005222:	f7ff ff13 	bl	800504c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005226:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800522c:	2300      	movs	r3, #0
 800522e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005232:	e01c      	b.n	800526e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005234:	f107 030c 	add.w	r3, r7, #12
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff ff07 	bl	800504c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800523e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005240:	b29a      	uxth	r2, r3
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800524c:	e00f      	b.n	800526e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800524e:	f107 030c 	add.w	r3, r7, #12
 8005252:	4618      	mov	r0, r3
 8005254:	f7ff fefa 	bl	800504c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800525a:	0a5a      	lsrs	r2, r3, #9
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005266:	e002      	b.n	800526e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005268:	2304      	movs	r3, #4
 800526a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800526e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005272:	4618      	mov	r0, r3
 8005274:	3730      	adds	r7, #48	@ 0x30
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	2000000d 	.word	0x2000000d

08005280 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b084      	sub	sp, #16
 8005284:	af00      	add	r7, sp, #0
 8005286:	4603      	mov	r3, r0
 8005288:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800528a:	79fb      	ldrb	r3, [r7, #7]
 800528c:	4a08      	ldr	r2, [pc, #32]	@ (80052b0 <disk_status+0x30>)
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	79fa      	ldrb	r2, [r7, #7]
 8005298:	4905      	ldr	r1, [pc, #20]	@ (80052b0 <disk_status+0x30>)
 800529a:	440a      	add	r2, r1
 800529c:	7a12      	ldrb	r2, [r2, #8]
 800529e:	4610      	mov	r0, r2
 80052a0:	4798      	blx	r3
 80052a2:	4603      	mov	r3, r0
 80052a4:	73fb      	strb	r3, [r7, #15]
  return stat;
 80052a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3710      	adds	r7, #16
 80052ac:	46bd      	mov	sp, r7
 80052ae:	bd80      	pop	{r7, pc}
 80052b0:	200003c0 	.word	0x200003c0

080052b4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	4603      	mov	r3, r0
 80052bc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80052be:	2300      	movs	r3, #0
 80052c0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	4a0e      	ldr	r2, [pc, #56]	@ (8005300 <disk_initialize+0x4c>)
 80052c6:	5cd3      	ldrb	r3, [r2, r3]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d114      	bne.n	80052f6 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80052cc:	79fb      	ldrb	r3, [r7, #7]
 80052ce:	4a0c      	ldr	r2, [pc, #48]	@ (8005300 <disk_initialize+0x4c>)
 80052d0:	009b      	lsls	r3, r3, #2
 80052d2:	4413      	add	r3, r2
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	79fa      	ldrb	r2, [r7, #7]
 80052da:	4909      	ldr	r1, [pc, #36]	@ (8005300 <disk_initialize+0x4c>)
 80052dc:	440a      	add	r2, r1
 80052de:	7a12      	ldrb	r2, [r2, #8]
 80052e0:	4610      	mov	r0, r2
 80052e2:	4798      	blx	r3
 80052e4:	4603      	mov	r3, r0
 80052e6:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80052e8:	7bfb      	ldrb	r3, [r7, #15]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d103      	bne.n	80052f6 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80052ee:	79fb      	ldrb	r3, [r7, #7]
 80052f0:	4a03      	ldr	r2, [pc, #12]	@ (8005300 <disk_initialize+0x4c>)
 80052f2:	2101      	movs	r1, #1
 80052f4:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3710      	adds	r7, #16
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	200003c0 	.word	0x200003c0

08005304 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005304:	b590      	push	{r4, r7, lr}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	607a      	str	r2, [r7, #4]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4603      	mov	r3, r0
 8005312:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005314:	7bfb      	ldrb	r3, [r7, #15]
 8005316:	4a0a      	ldr	r2, [pc, #40]	@ (8005340 <disk_read+0x3c>)
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4413      	add	r3, r2
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	689c      	ldr	r4, [r3, #8]
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	4a07      	ldr	r2, [pc, #28]	@ (8005340 <disk_read+0x3c>)
 8005324:	4413      	add	r3, r2
 8005326:	7a18      	ldrb	r0, [r3, #8]
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	68b9      	ldr	r1, [r7, #8]
 800532e:	47a0      	blx	r4
 8005330:	4603      	mov	r3, r0
 8005332:	75fb      	strb	r3, [r7, #23]
  return res;
 8005334:	7dfb      	ldrb	r3, [r7, #23]
}
 8005336:	4618      	mov	r0, r3
 8005338:	371c      	adds	r7, #28
 800533a:	46bd      	mov	sp, r7
 800533c:	bd90      	pop	{r4, r7, pc}
 800533e:	bf00      	nop
 8005340:	200003c0 	.word	0x200003c0

08005344 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005344:	b590      	push	{r4, r7, lr}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60b9      	str	r1, [r7, #8]
 800534c:	607a      	str	r2, [r7, #4]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	4603      	mov	r3, r0
 8005352:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005354:	7bfb      	ldrb	r3, [r7, #15]
 8005356:	4a0a      	ldr	r2, [pc, #40]	@ (8005380 <disk_write+0x3c>)
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	68dc      	ldr	r4, [r3, #12]
 8005360:	7bfb      	ldrb	r3, [r7, #15]
 8005362:	4a07      	ldr	r2, [pc, #28]	@ (8005380 <disk_write+0x3c>)
 8005364:	4413      	add	r3, r2
 8005366:	7a18      	ldrb	r0, [r3, #8]
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	687a      	ldr	r2, [r7, #4]
 800536c:	68b9      	ldr	r1, [r7, #8]
 800536e:	47a0      	blx	r4
 8005370:	4603      	mov	r3, r0
 8005372:	75fb      	strb	r3, [r7, #23]
  return res;
 8005374:	7dfb      	ldrb	r3, [r7, #23]
}
 8005376:	4618      	mov	r0, r3
 8005378:	371c      	adds	r7, #28
 800537a:	46bd      	mov	sp, r7
 800537c:	bd90      	pop	{r4, r7, pc}
 800537e:	bf00      	nop
 8005380:	200003c0 	.word	0x200003c0

08005384 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	3301      	adds	r3, #1
 8005390:	781b      	ldrb	r3, [r3, #0]
 8005392:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005394:	89fb      	ldrh	r3, [r7, #14]
 8005396:	021b      	lsls	r3, r3, #8
 8005398:	b21a      	sxth	r2, r3
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	781b      	ldrb	r3, [r3, #0]
 800539e:	b21b      	sxth	r3, r3
 80053a0:	4313      	orrs	r3, r2
 80053a2:	b21b      	sxth	r3, r3
 80053a4:	81fb      	strh	r3, [r7, #14]
	return rv;
 80053a6:	89fb      	ldrh	r3, [r7, #14]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3714      	adds	r7, #20
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	3303      	adds	r3, #3
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	021b      	lsls	r3, r3, #8
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	3202      	adds	r2, #2
 80053cc:	7812      	ldrb	r2, [r2, #0]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	021b      	lsls	r3, r3, #8
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	3201      	adds	r2, #1
 80053da:	7812      	ldrb	r2, [r2, #0]
 80053dc:	4313      	orrs	r3, r2
 80053de:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	021b      	lsls	r3, r3, #8
 80053e4:	687a      	ldr	r2, [r7, #4]
 80053e6:	7812      	ldrb	r2, [r2, #0]
 80053e8:	4313      	orrs	r3, r2
 80053ea:	60fb      	str	r3, [r7, #12]
	return rv;
 80053ec:	68fb      	ldr	r3, [r7, #12]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3714      	adds	r7, #20
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
	...

080053fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005404:	2300      	movs	r3, #0
 8005406:	60fb      	str	r3, [r7, #12]
 8005408:	e010      	b.n	800542c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800540a:	4a0d      	ldr	r2, [pc, #52]	@ (8005440 <clear_lock+0x44>)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	011b      	lsls	r3, r3, #4
 8005410:	4413      	add	r3, r2
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	687a      	ldr	r2, [r7, #4]
 8005416:	429a      	cmp	r2, r3
 8005418:	d105      	bne.n	8005426 <clear_lock+0x2a>
 800541a:	4a09      	ldr	r2, [pc, #36]	@ (8005440 <clear_lock+0x44>)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	4413      	add	r3, r2
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	3301      	adds	r3, #1
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d9eb      	bls.n	800540a <clear_lock+0xe>
	}
}
 8005432:	bf00      	nop
 8005434:	bf00      	nop
 8005436:	3714      	adds	r7, #20
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr
 8005440:	200003a0 	.word	0x200003a0

08005444 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b086      	sub	sp, #24
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	78db      	ldrb	r3, [r3, #3]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d034      	beq.n	80054c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800545c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	7858      	ldrb	r0, [r3, #1]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005468:	2301      	movs	r3, #1
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	f7ff ff6a 	bl	8005344 <disk_write>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <sync_window+0x38>
			res = FR_DISK_ERR;
 8005476:	2301      	movs	r3, #1
 8005478:	73fb      	strb	r3, [r7, #15]
 800547a:	e022      	b.n	80054c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	1ad2      	subs	r2, r2, r3
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	699b      	ldr	r3, [r3, #24]
 800548e:	429a      	cmp	r2, r3
 8005490:	d217      	bcs.n	80054c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	789b      	ldrb	r3, [r3, #2]
 8005496:	613b      	str	r3, [r7, #16]
 8005498:	e010      	b.n	80054bc <sync_window+0x78>
					wsect += fs->fsize;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4413      	add	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	7858      	ldrb	r0, [r3, #1]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80054ae:	2301      	movs	r3, #1
 80054b0:	697a      	ldr	r2, [r7, #20]
 80054b2:	f7ff ff47 	bl	8005344 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d8eb      	bhi.n	800549a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3718      	adds	r7, #24
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}

080054cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b084      	sub	sp, #16
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80054d6:	2300      	movs	r3, #0
 80054d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d01b      	beq.n	800551c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7ff ffad 	bl	8005444 <sync_window>
 80054ea:	4603      	mov	r3, r0
 80054ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d113      	bne.n	800551c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	7858      	ldrb	r0, [r3, #1]
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80054fe:	2301      	movs	r3, #1
 8005500:	683a      	ldr	r2, [r7, #0]
 8005502:	f7ff feff 	bl	8005304 <disk_read>
 8005506:	4603      	mov	r3, r0
 8005508:	2b00      	cmp	r3, #0
 800550a:	d004      	beq.n	8005516 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800550c:	f04f 33ff 	mov.w	r3, #4294967295
 8005510:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005512:	2301      	movs	r3, #1
 8005514:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800551c:	7bfb      	ldrb	r3, [r7, #15]
}
 800551e:	4618      	mov	r0, r3
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005526:	b480      	push	{r7}
 8005528:	b087      	sub	sp, #28
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800552e:	f04f 33ff 	mov.w	r3, #4294967295
 8005532:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d031      	beq.n	80055a0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	e002      	b.n	800554a <get_ldnumber+0x24>
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	3301      	adds	r3, #1
 8005548:	617b      	str	r3, [r7, #20]
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	781b      	ldrb	r3, [r3, #0]
 800554e:	2b20      	cmp	r3, #32
 8005550:	d903      	bls.n	800555a <get_ldnumber+0x34>
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b3a      	cmp	r3, #58	@ 0x3a
 8005558:	d1f4      	bne.n	8005544 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	781b      	ldrb	r3, [r3, #0]
 800555e:	2b3a      	cmp	r3, #58	@ 0x3a
 8005560:	d11c      	bne.n	800559c <get_ldnumber+0x76>
			tp = *path;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	1c5a      	adds	r2, r3, #1
 800556c:	60fa      	str	r2, [r7, #12]
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	3b30      	subs	r3, #48	@ 0x30
 8005572:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b09      	cmp	r3, #9
 8005578:	d80e      	bhi.n	8005598 <get_ldnumber+0x72>
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	429a      	cmp	r2, r3
 8005580:	d10a      	bne.n	8005598 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d107      	bne.n	8005598 <get_ldnumber+0x72>
					vol = (int)i;
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	3301      	adds	r3, #1
 8005590:	617b      	str	r3, [r7, #20]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	e002      	b.n	80055a2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800559c:	2300      	movs	r3, #0
 800559e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80055a0:	693b      	ldr	r3, [r7, #16]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	371c      	adds	r7, #28
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
	...

080055b0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	70da      	strb	r2, [r3, #3]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f04f 32ff 	mov.w	r2, #4294967295
 80055c6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff ff7e 	bl	80054cc <move_window>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <check_fs+0x2a>
 80055d6:	2304      	movs	r3, #4
 80055d8:	e038      	b.n	800564c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	3330      	adds	r3, #48	@ 0x30
 80055de:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80055e2:	4618      	mov	r0, r3
 80055e4:	f7ff fece 	bl	8005384 <ld_word>
 80055e8:	4603      	mov	r3, r0
 80055ea:	461a      	mov	r2, r3
 80055ec:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d001      	beq.n	80055f8 <check_fs+0x48>
 80055f4:	2303      	movs	r3, #3
 80055f6:	e029      	b.n	800564c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80055fe:	2be9      	cmp	r3, #233	@ 0xe9
 8005600:	d009      	beq.n	8005616 <check_fs+0x66>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8005608:	2beb      	cmp	r3, #235	@ 0xeb
 800560a:	d11e      	bne.n	800564a <check_fs+0x9a>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005612:	2b90      	cmp	r3, #144	@ 0x90
 8005614:	d119      	bne.n	800564a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	3330      	adds	r3, #48	@ 0x30
 800561a:	3336      	adds	r3, #54	@ 0x36
 800561c:	4618      	mov	r0, r3
 800561e:	f7ff fec9 	bl	80053b4 <ld_dword>
 8005622:	4603      	mov	r3, r0
 8005624:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005628:	4a0a      	ldr	r2, [pc, #40]	@ (8005654 <check_fs+0xa4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d101      	bne.n	8005632 <check_fs+0x82>
 800562e:	2300      	movs	r3, #0
 8005630:	e00c      	b.n	800564c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	3330      	adds	r3, #48	@ 0x30
 8005636:	3352      	adds	r3, #82	@ 0x52
 8005638:	4618      	mov	r0, r3
 800563a:	f7ff febb 	bl	80053b4 <ld_dword>
 800563e:	4603      	mov	r3, r0
 8005640:	4a05      	ldr	r2, [pc, #20]	@ (8005658 <check_fs+0xa8>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d101      	bne.n	800564a <check_fs+0x9a>
 8005646:	2300      	movs	r3, #0
 8005648:	e000      	b.n	800564c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800564a:	2302      	movs	r3, #2
}
 800564c:	4618      	mov	r0, r3
 800564e:	3708      	adds	r7, #8
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}
 8005654:	00544146 	.word	0x00544146
 8005658:	33544146 	.word	0x33544146

0800565c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b096      	sub	sp, #88	@ 0x58
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	4613      	mov	r3, r2
 8005668:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005670:	68f8      	ldr	r0, [r7, #12]
 8005672:	f7ff ff58 	bl	8005526 <get_ldnumber>
 8005676:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005678:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800567a:	2b00      	cmp	r3, #0
 800567c:	da01      	bge.n	8005682 <find_volume+0x26>
 800567e:	230b      	movs	r3, #11
 8005680:	e22d      	b.n	8005ade <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005682:	4aa1      	ldr	r2, [pc, #644]	@ (8005908 <find_volume+0x2ac>)
 8005684:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800568a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800568c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800568e:	2b00      	cmp	r3, #0
 8005690:	d101      	bne.n	8005696 <find_volume+0x3a>
 8005692:	230c      	movs	r3, #12
 8005694:	e223      	b.n	8005ade <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800569a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800569c:	79fb      	ldrb	r3, [r7, #7]
 800569e:	f023 0301 	bic.w	r3, r3, #1
 80056a2:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80056a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a6:	781b      	ldrb	r3, [r3, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d01a      	beq.n	80056e2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80056ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ae:	785b      	ldrb	r3, [r3, #1]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f7ff fde5 	bl	8005280 <disk_status>
 80056b6:	4603      	mov	r3, r0
 80056b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80056bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10c      	bne.n	80056e2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80056c8:	79fb      	ldrb	r3, [r7, #7]
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d007      	beq.n	80056de <find_volume+0x82>
 80056ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80056d2:	f003 0304 	and.w	r3, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d001      	beq.n	80056de <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80056da:	230a      	movs	r3, #10
 80056dc:	e1ff      	b.n	8005ade <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80056de:	2300      	movs	r3, #0
 80056e0:	e1fd      	b.n	8005ade <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80056e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80056e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056ea:	b2da      	uxtb	r2, r3
 80056ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ee:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80056f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f2:	785b      	ldrb	r3, [r3, #1]
 80056f4:	4618      	mov	r0, r3
 80056f6:	f7ff fddd 	bl	80052b4 <disk_initialize>
 80056fa:	4603      	mov	r3, r0
 80056fc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005700:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d001      	beq.n	8005710 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800570c:	2303      	movs	r3, #3
 800570e:	e1e6      	b.n	8005ade <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005710:	79fb      	ldrb	r3, [r7, #7]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <find_volume+0xca>
 8005716:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800571a:	f003 0304 	and.w	r3, r3, #4
 800571e:	2b00      	cmp	r3, #0
 8005720:	d001      	beq.n	8005726 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005722:	230a      	movs	r3, #10
 8005724:	e1db      	b.n	8005ade <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800572a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800572c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800572e:	f7ff ff3f 	bl	80055b0 <check_fs>
 8005732:	4603      	mov	r3, r0
 8005734:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005738:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800573c:	2b02      	cmp	r3, #2
 800573e:	d149      	bne.n	80057d4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005740:	2300      	movs	r3, #0
 8005742:	643b      	str	r3, [r7, #64]	@ 0x40
 8005744:	e01e      	b.n	8005784 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005748:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800574c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005754:	4413      	add	r3, r2
 8005756:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575a:	3304      	adds	r3, #4
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d006      	beq.n	8005770 <find_volume+0x114>
 8005762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005764:	3308      	adds	r3, #8
 8005766:	4618      	mov	r0, r3
 8005768:	f7ff fe24 	bl	80053b4 <ld_dword>
 800576c:	4602      	mov	r2, r0
 800576e:	e000      	b.n	8005772 <find_volume+0x116>
 8005770:	2200      	movs	r2, #0
 8005772:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005774:	009b      	lsls	r3, r3, #2
 8005776:	3358      	adds	r3, #88	@ 0x58
 8005778:	443b      	add	r3, r7
 800577a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800577e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005780:	3301      	adds	r3, #1
 8005782:	643b      	str	r3, [r7, #64]	@ 0x40
 8005784:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005786:	2b03      	cmp	r3, #3
 8005788:	d9dd      	bls.n	8005746 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800578a:	2300      	movs	r3, #0
 800578c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800578e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <find_volume+0x13e>
 8005794:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005796:	3b01      	subs	r3, #1
 8005798:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800579a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	3358      	adds	r3, #88	@ 0x58
 80057a0:	443b      	add	r3, r7
 80057a2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80057a6:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80057a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <find_volume+0x15e>
 80057ae:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80057b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80057b2:	f7ff fefd 	bl	80055b0 <check_fs>
 80057b6:	4603      	mov	r3, r0
 80057b8:	e000      	b.n	80057bc <find_volume+0x160>
 80057ba:	2303      	movs	r3, #3
 80057bc:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80057c0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057c4:	2b01      	cmp	r3, #1
 80057c6:	d905      	bls.n	80057d4 <find_volume+0x178>
 80057c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057ca:	3301      	adds	r3, #1
 80057cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80057ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80057d0:	2b03      	cmp	r3, #3
 80057d2:	d9e2      	bls.n	800579a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80057d4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057d8:	2b04      	cmp	r3, #4
 80057da:	d101      	bne.n	80057e0 <find_volume+0x184>
 80057dc:	2301      	movs	r3, #1
 80057de:	e17e      	b.n	8005ade <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80057e0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d901      	bls.n	80057ec <find_volume+0x190>
 80057e8:	230d      	movs	r3, #13
 80057ea:	e178      	b.n	8005ade <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80057ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057ee:	3330      	adds	r3, #48	@ 0x30
 80057f0:	330b      	adds	r3, #11
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff fdc6 	bl	8005384 <ld_word>
 80057f8:	4603      	mov	r3, r0
 80057fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80057fe:	d001      	beq.n	8005804 <find_volume+0x1a8>
 8005800:	230d      	movs	r3, #13
 8005802:	e16c      	b.n	8005ade <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005804:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005806:	3330      	adds	r3, #48	@ 0x30
 8005808:	3316      	adds	r3, #22
 800580a:	4618      	mov	r0, r3
 800580c:	f7ff fdba 	bl	8005384 <ld_word>
 8005810:	4603      	mov	r3, r0
 8005812:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005814:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d106      	bne.n	8005828 <find_volume+0x1cc>
 800581a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800581c:	3330      	adds	r3, #48	@ 0x30
 800581e:	3324      	adds	r3, #36	@ 0x24
 8005820:	4618      	mov	r0, r3
 8005822:	f7ff fdc7 	bl	80053b4 <ld_dword>
 8005826:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800582a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800582c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800582e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005830:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8005834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005836:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583a:	789b      	ldrb	r3, [r3, #2]
 800583c:	2b01      	cmp	r3, #1
 800583e:	d005      	beq.n	800584c <find_volume+0x1f0>
 8005840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005842:	789b      	ldrb	r3, [r3, #2]
 8005844:	2b02      	cmp	r3, #2
 8005846:	d001      	beq.n	800584c <find_volume+0x1f0>
 8005848:	230d      	movs	r3, #13
 800584a:	e148      	b.n	8005ade <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800584c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800584e:	789b      	ldrb	r3, [r3, #2]
 8005850:	461a      	mov	r2, r3
 8005852:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800585a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005860:	461a      	mov	r2, r3
 8005862:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005864:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005868:	895b      	ldrh	r3, [r3, #10]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d008      	beq.n	8005880 <find_volume+0x224>
 800586e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005870:	895b      	ldrh	r3, [r3, #10]
 8005872:	461a      	mov	r2, r3
 8005874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005876:	895b      	ldrh	r3, [r3, #10]
 8005878:	3b01      	subs	r3, #1
 800587a:	4013      	ands	r3, r2
 800587c:	2b00      	cmp	r3, #0
 800587e:	d001      	beq.n	8005884 <find_volume+0x228>
 8005880:	230d      	movs	r3, #13
 8005882:	e12c      	b.n	8005ade <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005884:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005886:	3330      	adds	r3, #48	@ 0x30
 8005888:	3311      	adds	r3, #17
 800588a:	4618      	mov	r0, r3
 800588c:	f7ff fd7a 	bl	8005384 <ld_word>
 8005890:	4603      	mov	r3, r0
 8005892:	461a      	mov	r2, r3
 8005894:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005896:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589a:	891b      	ldrh	r3, [r3, #8]
 800589c:	f003 030f 	and.w	r3, r3, #15
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d001      	beq.n	80058aa <find_volume+0x24e>
 80058a6:	230d      	movs	r3, #13
 80058a8:	e119      	b.n	8005ade <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80058aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ac:	3330      	adds	r3, #48	@ 0x30
 80058ae:	3313      	adds	r3, #19
 80058b0:	4618      	mov	r0, r3
 80058b2:	f7ff fd67 	bl	8005384 <ld_word>
 80058b6:	4603      	mov	r3, r0
 80058b8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80058ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d106      	bne.n	80058ce <find_volume+0x272>
 80058c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c2:	3330      	adds	r3, #48	@ 0x30
 80058c4:	3320      	adds	r3, #32
 80058c6:	4618      	mov	r0, r3
 80058c8:	f7ff fd74 	bl	80053b4 <ld_dword>
 80058cc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	3330      	adds	r3, #48	@ 0x30
 80058d2:	330e      	adds	r3, #14
 80058d4:	4618      	mov	r0, r3
 80058d6:	f7ff fd55 	bl	8005384 <ld_word>
 80058da:	4603      	mov	r3, r0
 80058dc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80058de:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <find_volume+0x28c>
 80058e4:	230d      	movs	r3, #13
 80058e6:	e0fa      	b.n	8005ade <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80058e8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80058ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ec:	4413      	add	r3, r2
 80058ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80058f0:	8912      	ldrh	r2, [r2, #8]
 80058f2:	0912      	lsrs	r2, r2, #4
 80058f4:	b292      	uxth	r2, r2
 80058f6:	4413      	add	r3, r2
 80058f8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80058fa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058fe:	429a      	cmp	r2, r3
 8005900:	d204      	bcs.n	800590c <find_volume+0x2b0>
 8005902:	230d      	movs	r3, #13
 8005904:	e0eb      	b.n	8005ade <find_volume+0x482>
 8005906:	bf00      	nop
 8005908:	20000398 	.word	0x20000398
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800590c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800590e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005914:	8952      	ldrh	r2, [r2, #10]
 8005916:	fbb3 f3f2 	udiv	r3, r3, r2
 800591a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800591c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800591e:	2b00      	cmp	r3, #0
 8005920:	d101      	bne.n	8005926 <find_volume+0x2ca>
 8005922:	230d      	movs	r3, #13
 8005924:	e0db      	b.n	8005ade <find_volume+0x482>
		fmt = FS_FAT32;
 8005926:	2303      	movs	r3, #3
 8005928:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800592c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005932:	4293      	cmp	r3, r2
 8005934:	d802      	bhi.n	800593c <find_volume+0x2e0>
 8005936:	2302      	movs	r3, #2
 8005938:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800593c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005942:	4293      	cmp	r3, r2
 8005944:	d802      	bhi.n	800594c <find_volume+0x2f0>
 8005946:	2301      	movs	r3, #1
 8005948:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800594c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800594e:	1c9a      	adds	r2, r3, #2
 8005950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005952:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005956:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005958:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800595a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800595c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800595e:	441a      	add	r2, r3
 8005960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005962:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005964:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005968:	441a      	add	r2, r3
 800596a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800596e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005972:	2b03      	cmp	r3, #3
 8005974:	d11e      	bne.n	80059b4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005976:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005978:	3330      	adds	r3, #48	@ 0x30
 800597a:	332a      	adds	r3, #42	@ 0x2a
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fd01 	bl	8005384 <ld_word>
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <find_volume+0x330>
 8005988:	230d      	movs	r3, #13
 800598a:	e0a8      	b.n	8005ade <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800598c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800598e:	891b      	ldrh	r3, [r3, #8]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <find_volume+0x33c>
 8005994:	230d      	movs	r3, #13
 8005996:	e0a2      	b.n	8005ade <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	3330      	adds	r3, #48	@ 0x30
 800599c:	332c      	adds	r3, #44	@ 0x2c
 800599e:	4618      	mov	r0, r3
 80059a0:	f7ff fd08 	bl	80053b4 <ld_dword>
 80059a4:	4602      	mov	r2, r0
 80059a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a8:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80059aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ac:	695b      	ldr	r3, [r3, #20]
 80059ae:	009b      	lsls	r3, r3, #2
 80059b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b2:	e01f      	b.n	80059f4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80059b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b6:	891b      	ldrh	r3, [r3, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <find_volume+0x364>
 80059bc:	230d      	movs	r3, #13
 80059be:	e08e      	b.n	8005ade <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80059c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c2:	6a1a      	ldr	r2, [r3, #32]
 80059c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059c6:	441a      	add	r2, r3
 80059c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ca:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80059cc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d103      	bne.n	80059dc <find_volume+0x380>
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	695b      	ldr	r3, [r3, #20]
 80059d8:	005b      	lsls	r3, r3, #1
 80059da:	e00a      	b.n	80059f2 <find_volume+0x396>
 80059dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059de:	695a      	ldr	r2, [r3, #20]
 80059e0:	4613      	mov	r3, r2
 80059e2:	005b      	lsls	r3, r3, #1
 80059e4:	4413      	add	r3, r2
 80059e6:	085a      	lsrs	r2, r3, #1
 80059e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	f003 0301 	and.w	r3, r3, #1
 80059f0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80059f2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80059f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059f6:	699a      	ldr	r2, [r3, #24]
 80059f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059fa:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 80059fe:	0a5b      	lsrs	r3, r3, #9
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d201      	bcs.n	8005a08 <find_volume+0x3ac>
 8005a04:	230d      	movs	r3, #13
 8005a06:	e06a      	b.n	8005ade <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005a08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a0a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a0e:	611a      	str	r2, [r3, #16]
 8005a10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a12:	691a      	ldr	r2, [r3, #16]
 8005a14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a16:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005a18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a1a:	2280      	movs	r2, #128	@ 0x80
 8005a1c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005a1e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d149      	bne.n	8005aba <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a28:	3330      	adds	r3, #48	@ 0x30
 8005a2a:	3330      	adds	r3, #48	@ 0x30
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f7ff fca9 	bl	8005384 <ld_word>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	d140      	bne.n	8005aba <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005a38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a40:	f7ff fd44 	bl	80054cc <move_window>
 8005a44:	4603      	mov	r3, r0
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d137      	bne.n	8005aba <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a52:	3330      	adds	r3, #48	@ 0x30
 8005a54:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f7ff fc93 	bl	8005384 <ld_word>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	461a      	mov	r2, r3
 8005a62:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d127      	bne.n	8005aba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a6c:	3330      	adds	r3, #48	@ 0x30
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f7ff fca0 	bl	80053b4 <ld_dword>
 8005a74:	4603      	mov	r3, r0
 8005a76:	4a1c      	ldr	r2, [pc, #112]	@ (8005ae8 <find_volume+0x48c>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d11e      	bne.n	8005aba <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a7e:	3330      	adds	r3, #48	@ 0x30
 8005a80:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005a84:	4618      	mov	r0, r3
 8005a86:	f7ff fc95 	bl	80053b4 <ld_dword>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	4a17      	ldr	r2, [pc, #92]	@ (8005aec <find_volume+0x490>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d113      	bne.n	8005aba <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a94:	3330      	adds	r3, #48	@ 0x30
 8005a96:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	f7ff fc8a 	bl	80053b4 <ld_dword>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa4:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa8:	3330      	adds	r3, #48	@ 0x30
 8005aaa:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005aae:	4618      	mov	r0, r3
 8005ab0:	f7ff fc80 	bl	80053b4 <ld_dword>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ab8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005abc:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005ac0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8005af0 <find_volume+0x494>)
 8005ac4:	881b      	ldrh	r3, [r3, #0]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	4b09      	ldr	r3, [pc, #36]	@ (8005af0 <find_volume+0x494>)
 8005acc:	801a      	strh	r2, [r3, #0]
 8005ace:	4b08      	ldr	r3, [pc, #32]	@ (8005af0 <find_volume+0x494>)
 8005ad0:	881a      	ldrh	r2, [r3, #0]
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005ad6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005ad8:	f7ff fc90 	bl	80053fc <clear_lock>
#endif
	return FR_OK;
 8005adc:	2300      	movs	r3, #0
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3758      	adds	r7, #88	@ 0x58
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}
 8005ae6:	bf00      	nop
 8005ae8:	41615252 	.word	0x41615252
 8005aec:	61417272 	.word	0x61417272
 8005af0:	2000039c 	.word	0x2000039c

08005af4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b088      	sub	sp, #32
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005b06:	f107 0310 	add.w	r3, r7, #16
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7ff fd0b 	bl	8005526 <get_ldnumber>
 8005b10:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005b12:	69fb      	ldr	r3, [r7, #28]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	da01      	bge.n	8005b1c <f_mount+0x28>
 8005b18:	230b      	movs	r3, #11
 8005b1a:	e02b      	b.n	8005b74 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005b1c:	4a17      	ldr	r2, [pc, #92]	@ (8005b7c <f_mount+0x88>)
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b24:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005b26:	69bb      	ldr	r3, [r7, #24]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d005      	beq.n	8005b38 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005b2c:	69b8      	ldr	r0, [r7, #24]
 8005b2e:	f7ff fc65 	bl	80053fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	2200      	movs	r2, #0
 8005b36:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d002      	beq.n	8005b44 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	2200      	movs	r2, #0
 8005b42:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005b44:	68fa      	ldr	r2, [r7, #12]
 8005b46:	490d      	ldr	r1, [pc, #52]	@ (8005b7c <f_mount+0x88>)
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d002      	beq.n	8005b5a <f_mount+0x66>
 8005b54:	79fb      	ldrb	r3, [r7, #7]
 8005b56:	2b01      	cmp	r3, #1
 8005b58:	d001      	beq.n	8005b5e <f_mount+0x6a>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	e00a      	b.n	8005b74 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005b5e:	f107 010c 	add.w	r1, r7, #12
 8005b62:	f107 0308 	add.w	r3, r7, #8
 8005b66:	2200      	movs	r2, #0
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff fd77 	bl	800565c <find_volume>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	3720      	adds	r7, #32
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	bd80      	pop	{r7, pc}
 8005b7c:	20000398 	.word	0x20000398

08005b80 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b087      	sub	sp, #28
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	60f8      	str	r0, [r7, #12]
 8005b88:	60b9      	str	r1, [r7, #8]
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005b8e:	2301      	movs	r3, #1
 8005b90:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005b92:	2300      	movs	r3, #0
 8005b94:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005b96:	4b1f      	ldr	r3, [pc, #124]	@ (8005c14 <FATFS_LinkDriverEx+0x94>)
 8005b98:	7a5b      	ldrb	r3, [r3, #9]
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d131      	bne.n	8005c04 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005ba0:	4b1c      	ldr	r3, [pc, #112]	@ (8005c14 <FATFS_LinkDriverEx+0x94>)
 8005ba2:	7a5b      	ldrb	r3, [r3, #9]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	4b1a      	ldr	r3, [pc, #104]	@ (8005c14 <FATFS_LinkDriverEx+0x94>)
 8005baa:	2100      	movs	r1, #0
 8005bac:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005bae:	4b19      	ldr	r3, [pc, #100]	@ (8005c14 <FATFS_LinkDriverEx+0x94>)
 8005bb0:	7a5b      	ldrb	r3, [r3, #9]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	4a17      	ldr	r2, [pc, #92]	@ (8005c14 <FATFS_LinkDriverEx+0x94>)
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005bbe:	4b15      	ldr	r3, [pc, #84]	@ (8005c14 <FATFS_LinkDriverEx+0x94>)
 8005bc0:	7a5b      	ldrb	r3, [r3, #9]
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4b13      	ldr	r3, [pc, #76]	@ (8005c14 <FATFS_LinkDriverEx+0x94>)
 8005bc8:	4413      	add	r3, r2
 8005bca:	79fa      	ldrb	r2, [r7, #7]
 8005bcc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005bce:	4b11      	ldr	r3, [pc, #68]	@ (8005c14 <FATFS_LinkDriverEx+0x94>)
 8005bd0:	7a5b      	ldrb	r3, [r3, #9]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	1c5a      	adds	r2, r3, #1
 8005bd6:	b2d1      	uxtb	r1, r2
 8005bd8:	4a0e      	ldr	r2, [pc, #56]	@ (8005c14 <FATFS_LinkDriverEx+0x94>)
 8005bda:	7251      	strb	r1, [r2, #9]
 8005bdc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005bde:	7dbb      	ldrb	r3, [r7, #22]
 8005be0:	3330      	adds	r3, #48	@ 0x30
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	3301      	adds	r3, #1
 8005bec:	223a      	movs	r2, #58	@ 0x3a
 8005bee:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	3302      	adds	r3, #2
 8005bf4:	222f      	movs	r2, #47	@ 0x2f
 8005bf6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	3303      	adds	r3, #3
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005c00:	2300      	movs	r3, #0
 8005c02:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	371c      	adds	r7, #28
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	200003c0 	.word	0x200003c0

08005c18 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b082      	sub	sp, #8
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
 8005c20:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005c22:	2200      	movs	r2, #0
 8005c24:	6839      	ldr	r1, [r7, #0]
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f7ff ffaa 	bl	8005b80 <FATFS_LinkDriverEx>
 8005c2c:	4603      	mov	r3, r0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <memset>:
 8005c36:	4402      	add	r2, r0
 8005c38:	4603      	mov	r3, r0
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d100      	bne.n	8005c40 <memset+0xa>
 8005c3e:	4770      	bx	lr
 8005c40:	f803 1b01 	strb.w	r1, [r3], #1
 8005c44:	e7f9      	b.n	8005c3a <memset+0x4>
	...

08005c48 <__libc_init_array>:
 8005c48:	b570      	push	{r4, r5, r6, lr}
 8005c4a:	4d0d      	ldr	r5, [pc, #52]	@ (8005c80 <__libc_init_array+0x38>)
 8005c4c:	4c0d      	ldr	r4, [pc, #52]	@ (8005c84 <__libc_init_array+0x3c>)
 8005c4e:	1b64      	subs	r4, r4, r5
 8005c50:	10a4      	asrs	r4, r4, #2
 8005c52:	2600      	movs	r6, #0
 8005c54:	42a6      	cmp	r6, r4
 8005c56:	d109      	bne.n	8005c6c <__libc_init_array+0x24>
 8005c58:	4d0b      	ldr	r5, [pc, #44]	@ (8005c88 <__libc_init_array+0x40>)
 8005c5a:	4c0c      	ldr	r4, [pc, #48]	@ (8005c8c <__libc_init_array+0x44>)
 8005c5c:	f000 f818 	bl	8005c90 <_init>
 8005c60:	1b64      	subs	r4, r4, r5
 8005c62:	10a4      	asrs	r4, r4, #2
 8005c64:	2600      	movs	r6, #0
 8005c66:	42a6      	cmp	r6, r4
 8005c68:	d105      	bne.n	8005c76 <__libc_init_array+0x2e>
 8005c6a:	bd70      	pop	{r4, r5, r6, pc}
 8005c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c70:	4798      	blx	r3
 8005c72:	3601      	adds	r6, #1
 8005c74:	e7ee      	b.n	8005c54 <__libc_init_array+0xc>
 8005c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c7a:	4798      	blx	r3
 8005c7c:	3601      	adds	r6, #1
 8005c7e:	e7f2      	b.n	8005c66 <__libc_init_array+0x1e>
 8005c80:	08005d34 	.word	0x08005d34
 8005c84:	08005d34 	.word	0x08005d34
 8005c88:	08005d34 	.word	0x08005d34
 8005c8c:	08005d38 	.word	0x08005d38

08005c90 <_init>:
 8005c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c92:	bf00      	nop
 8005c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c96:	bc08      	pop	{r3}
 8005c98:	469e      	mov	lr, r3
 8005c9a:	4770      	bx	lr

08005c9c <_fini>:
 8005c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c9e:	bf00      	nop
 8005ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ca2:	bc08      	pop	{r3}
 8005ca4:	469e      	mov	lr, r3
 8005ca6:	4770      	bx	lr
