
SD_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ca8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000012c  08006e38  08006e38  00007e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f64  08006f64  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006f64  08006f64  00007f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f6c  08006f6c  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f6c  08006f6c  00007f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006f70  08006f70  00007f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006f74  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          0000050c  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00003000  20000578  20000578  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001063a  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a9d  00000000  00000000  000186d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  0001b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b04  00000000  00000000  0001bff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002396b  00000000  00000000  0001cafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001380c  00000000  00000000  00040467  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbbc7  00000000  00000000  00053c73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f83a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000426c  00000000  00000000  0011f880  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00123aec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e20 	.word	0x08006e20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006e20 	.word	0x08006e20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fc40 	bl	8000de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f834 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f908 	bl	8000780 <MX_GPIO_Init>
  MX_DMA_Init();
 8000570:	f000 f8e6 	bl	8000740 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000574:	f000 f898 	bl	80006a8 <MX_SDIO_SD_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f8b8 	bl	80006ec <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800057c:	f004 fe48 	bl	8005210 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(DONE_GPIO_Port, DONE_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000586:	4810      	ldr	r0, [pc, #64]	@ (80005c8 <main+0x68>)
 8000588:	f001 fb06 	bl	8001b98 <HAL_GPIO_WritePin>

  if(InitSD() == false) {
 800058c:	f000 f97e 	bl	800088c <InitSD>
 8000590:	4603      	mov	r3, r0
 8000592:	f083 0301 	eor.w	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d007      	beq.n	80005ac <main+0x4c>
	  HAL_GPIO_WritePin(GPIOD, Mount_Status_Pin|DONE_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80005a2:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <main+0x68>)
 80005a4:	f001 faf8 	bl	8001b98 <HAL_GPIO_WritePin>
	  Error_Handler();
 80005a8:	f000 f9d0 	bl	800094c <Error_Handler>
  }
  HAL_GPIO_WritePin(GPIOD, Mount_Status_Pin|DONE_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80005b2:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <main+0x68>)
 80005b4:	f001 faf0 	bl	8001b98 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	4904      	ldr	r1, [pc, #16]	@ (80005cc <main+0x6c>)
 80005bc:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <main+0x70>)
 80005be:	f003 f98f 	bl	80038e0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <main+0x62>
 80005c6:	bf00      	nop
 80005c8:	40020c00 	.word	0x40020c00
 80005cc:	200003e4 	.word	0x200003e4
 80005d0:	2000010c 	.word	0x2000010c

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 fe98 	bl	8006318 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	@ (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	@ (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000648:	23a8      	movs	r3, #168	@ 0xa8
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f001 fab7 	bl	8001bcc <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 f972 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000674:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2105      	movs	r1, #5
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fd18 	bl	80020bc <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000692:	f000 f95b 	bl	800094c <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	@ 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006ae:	4a0e      	ldr	r2, [pc, #56]	@ (80006e8 <MX_SDIO_SD_Init+0x40>)
 80006b0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006ca:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80006d2:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000088 	.word	0x20000088
 80006e8:	40012c00 	.word	0x40012c00

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 80006f2:	4a11      	ldr	r2, [pc, #68]	@ (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2625000;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 80006f8:	4a10      	ldr	r2, [pc, #64]	@ (800073c <MX_USART2_UART_Init+0x50>)
 80006fa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 8000710:	220c      	movs	r2, #12
 8000712:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 8000722:	f003 f88d 	bl	8003840 <HAL_UART_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800072c:	f000 f90e 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000010c 	.word	0x2000010c
 8000738:	40004400 	.word	0x40004400
 800073c:	00280de8 	.word	0x00280de8

08000740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_DMA_Init+0x3c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a0b      	ldr	r2, [pc, #44]	@ (800077c <MX_DMA_Init+0x3c>)
 8000750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_DMA_Init+0x3c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2011      	movs	r0, #17
 8000768:	f000 fcaf 	bl	80010ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800076c:	2011      	movs	r0, #17
 800076e:	f000 fcc8 	bl	8001102 <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b2e      	ldr	r3, [pc, #184]	@ (8000854 <MX_GPIO_Init+0xd4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a2d      	ldr	r2, [pc, #180]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Mount_Status_Pin|DONE_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800080c:	4812      	ldr	r0, [pc, #72]	@ (8000858 <MX_GPIO_Init+0xd8>)
 800080e:	f001 f9c3 	bl	8001b98 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Mount_Status_Pin DONE_Pin */
  GPIO_InitStruct.Pin = Mount_Status_Pin|DONE_Pin;
 8000812:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <MX_GPIO_Init+0xd8>)
 800082c:	f001 f800 	bl	8001830 <HAL_GPIO_Init>

  /*Configure GPIO pin : CD_Pin */
  GPIO_InitStruct.Pin = CD_Pin;
 8000830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083a:	2301      	movs	r3, #1
 800083c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CD_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_GPIO_Init+0xdc>)
 8000846:	f000 fff3 	bl	8001830 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	@ 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40020000 	.word	0x40020000

08000860 <HAL_UART_TxCpltCallback>:

    // Wait for the last DMA transmission to complete
    while (!dma_tx_complete);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a05      	ldr	r2, [pc, #20]	@ (8000884 <HAL_UART_TxCpltCallback+0x24>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d102      	bne.n	8000878 <HAL_UART_TxCpltCallback+0x18>
        dma_tx_complete = 1;  // Set DMA transmission complete flag
 8000872:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <HAL_UART_TxCpltCallback+0x28>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
    }
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40004400 	.word	0x40004400
 8000888:	20000000 	.word	0x20000000

0800088c <InitSD>:

bool InitSD() {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	if (HAL_SD_Init(&hsd) != HAL_OK) {
 8000892:	4824      	ldr	r0, [pc, #144]	@ (8000924 <InitSD+0x98>)
 8000894:	f001 fe32 	bl	80024fc <HAL_SD_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <InitSD+0x1a>
		Error_Handler();
 800089e:	f000 f855 	bl	800094c <Error_Handler>
		return false;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e039      	b.n	800091a <InitSD+0x8e>
	}
	HAL_Delay(100);
 80008a6:	2064      	movs	r0, #100	@ 0x64
 80008a8:	f000 fb10 	bl	8000ecc <HAL_Delay>
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == GPIO_PIN_RESET) {
 80008ac:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008b0:	481d      	ldr	r0, [pc, #116]	@ (8000928 <InitSD+0x9c>)
 80008b2:	f001 f959 	bl	8001b68 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d104      	bne.n	80008c6 <InitSD+0x3a>
        printf("No SD card detected\r\n");
 80008bc:	481b      	ldr	r0, [pc, #108]	@ (800092c <InitSD+0xa0>)
 80008be:	f005 fc4b 	bl	8006158 <puts>
        return false;  // Exit if no card is detected
 80008c2:	2300      	movs	r3, #0
 80008c4:	e029      	b.n	800091a <InitSD+0x8e>
    }
    FRESULT res  = f_mount(&fileSystem, "", 1);
 80008c6:	2201      	movs	r2, #1
 80008c8:	4919      	ldr	r1, [pc, #100]	@ (8000930 <InitSD+0xa4>)
 80008ca:	481a      	ldr	r0, [pc, #104]	@ (8000934 <InitSD+0xa8>)
 80008cc:	f005 fa78 	bl	8005dc0 <f_mount>
 80008d0:	4603      	mov	r3, r0
 80008d2:	71fb      	strb	r3, [r7, #7]
	if (res != FR_OK) {
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d01b      	beq.n	8000912 <InitSD+0x86>
		switch (res) {
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b0d      	cmp	r3, #13
 80008de:	d006      	beq.n	80008ee <InitSD+0x62>
 80008e0:	2b0d      	cmp	r3, #13
 80008e2:	dc10      	bgt.n	8000906 <InitSD+0x7a>
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d006      	beq.n	80008f6 <InitSD+0x6a>
 80008e8:	2b03      	cmp	r3, #3
 80008ea:	d008      	beq.n	80008fe <InitSD+0x72>
 80008ec:	e00b      	b.n	8000906 <InitSD+0x7a>
			case FR_NO_FILESYSTEM:
				printf("no filesystem found");
 80008ee:	4812      	ldr	r0, [pc, #72]	@ (8000938 <InitSD+0xac>)
 80008f0:	f005 fbca 	bl	8006088 <iprintf>
				break;
 80008f4:	e00b      	b.n	800090e <InitSD+0x82>
			case FR_DISK_ERR:
				printf("disk error");
 80008f6:	4811      	ldr	r0, [pc, #68]	@ (800093c <InitSD+0xb0>)
 80008f8:	f005 fbc6 	bl	8006088 <iprintf>
				break;
 80008fc:	e007      	b.n	800090e <InitSD+0x82>
			case FR_NOT_READY:
				printf("Not ready");
 80008fe:	4810      	ldr	r0, [pc, #64]	@ (8000940 <InitSD+0xb4>)
 8000900:	f005 fbc2 	bl	8006088 <iprintf>
				break;
 8000904:	e003      	b.n	800090e <InitSD+0x82>
			default:
				printf("Unknown error");
 8000906:	480f      	ldr	r0, [pc, #60]	@ (8000944 <InitSD+0xb8>)
 8000908:	f005 fbbe 	bl	8006088 <iprintf>
				break;
 800090c:	bf00      	nop
		}
		return false;
 800090e:	2300      	movs	r3, #0
 8000910:	e003      	b.n	800091a <InitSD+0x8e>

	}
	printf("SD card mounted successfully");
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <InitSD+0xbc>)
 8000914:	f005 fbb8 	bl	8006088 <iprintf>
	return true;
 8000918:	2301      	movs	r3, #1
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000088 	.word	0x20000088
 8000928:	40020800 	.word	0x40020800
 800092c:	08006e84 	.word	0x08006e84
 8000930:	08006e9c 	.word	0x08006e9c
 8000934:	200001b4 	.word	0x200001b4
 8000938:	08006ea0 	.word	0x08006ea0
 800093c:	08006eb4 	.word	0x08006eb4
 8000940:	08006ec0 	.word	0x08006ec0
 8000944:	08006ecc 	.word	0x08006ecc
 8000948:	08006edc 	.word	0x08006edc

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	bf00      	nop
 8000956:	e7fd      	b.n	8000954 <Error_Handler+0x8>

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	2300      	movs	r3, #0
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	4a0f      	ldr	r2, [pc, #60]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000968:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800096c:	6453      	str	r3, [r2, #68]	@ 0x44
 800096e:	4b0d      	ldr	r3, [pc, #52]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000972:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000976:	607b      	str	r3, [r7, #4]
 8000978:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000982:	4a08      	ldr	r2, [pc, #32]	@ (80009a4 <HAL_MspInit+0x4c>)
 8000984:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000988:	6413      	str	r3, [r2, #64]	@ 0x40
 800098a:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <HAL_MspInit+0x4c>)
 800098c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800098e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08a      	sub	sp, #40	@ 0x28
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0314 	add.w	r3, r7, #20
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a31      	ldr	r2, [pc, #196]	@ (8000a8c <HAL_SD_MspInit+0xe4>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d15b      	bne.n	8000a82 <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
 80009ce:	4b30      	ldr	r3, [pc, #192]	@ (8000a90 <HAL_SD_MspInit+0xe8>)
 80009d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009d2:	4a2f      	ldr	r2, [pc, #188]	@ (8000a90 <HAL_SD_MspInit+0xe8>)
 80009d4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80009d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009da:	4b2d      	ldr	r3, [pc, #180]	@ (8000a90 <HAL_SD_MspInit+0xe8>)
 80009dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80009e2:	613b      	str	r3, [r7, #16]
 80009e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	60fb      	str	r3, [r7, #12]
 80009ea:	4b29      	ldr	r3, [pc, #164]	@ (8000a90 <HAL_SD_MspInit+0xe8>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	4a28      	ldr	r2, [pc, #160]	@ (8000a90 <HAL_SD_MspInit+0xe8>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009f6:	4b26      	ldr	r3, [pc, #152]	@ (8000a90 <HAL_SD_MspInit+0xe8>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	60bb      	str	r3, [r7, #8]
 8000a06:	4b22      	ldr	r3, [pc, #136]	@ (8000a90 <HAL_SD_MspInit+0xe8>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	4a21      	ldr	r2, [pc, #132]	@ (8000a90 <HAL_SD_MspInit+0xe8>)
 8000a0c:	f043 0308 	orr.w	r3, r3, #8
 8000a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a12:	4b1f      	ldr	r3, [pc, #124]	@ (8000a90 <HAL_SD_MspInit+0xe8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	f003 0308 	and.w	r3, r3, #8
 8000a1a:	60bb      	str	r3, [r7, #8]
 8000a1c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000a1e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a2c:	2303      	movs	r3, #3
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a30:	230c      	movs	r3, #12
 8000a32:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4816      	ldr	r0, [pc, #88]	@ (8000a94 <HAL_SD_MspInit+0xec>)
 8000a3c:	f000 fef8 	bl	8001830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4e:	2303      	movs	r3, #3
 8000a50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a52:	230c      	movs	r3, #12
 8000a54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <HAL_SD_MspInit+0xec>)
 8000a5e:	f000 fee7 	bl	8001830 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a62:	2304      	movs	r3, #4
 8000a64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a72:	230c      	movs	r3, #12
 8000a74:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4806      	ldr	r0, [pc, #24]	@ (8000a98 <HAL_SD_MspInit+0xf0>)
 8000a7e:	f000 fed7 	bl	8001830 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000a82:	bf00      	nop
 8000a84:	3728      	adds	r7, #40	@ 0x28
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40012c00 	.word	0x40012c00
 8000a90:	40023800 	.word	0x40023800
 8000a94:	40020800 	.word	0x40020800
 8000a98:	40020c00 	.word	0x40020c00

08000a9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b08a      	sub	sp, #40	@ 0x28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
 8000ab2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a34      	ldr	r2, [pc, #208]	@ (8000b8c <HAL_UART_MspInit+0xf0>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d162      	bne.n	8000b84 <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	4b33      	ldr	r3, [pc, #204]	@ (8000b90 <HAL_UART_MspInit+0xf4>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac6:	4a32      	ldr	r2, [pc, #200]	@ (8000b90 <HAL_UART_MspInit+0xf4>)
 8000ac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ace:	4b30      	ldr	r3, [pc, #192]	@ (8000b90 <HAL_UART_MspInit+0xf4>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <HAL_UART_MspInit+0xf4>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8000b90 <HAL_UART_MspInit+0xf4>)
 8000ae4:	f043 0301 	orr.w	r3, r3, #1
 8000ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aea:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <HAL_UART_MspInit+0xf4>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000af6:	230c      	movs	r3, #12
 8000af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afa:	2302      	movs	r3, #2
 8000afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afe:	2300      	movs	r3, #0
 8000b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b02:	2303      	movs	r3, #3
 8000b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b06:	2307      	movs	r3, #7
 8000b08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4820      	ldr	r0, [pc, #128]	@ (8000b94 <HAL_UART_MspInit+0xf8>)
 8000b12:	f000 fe8d 	bl	8001830 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000b16:	4b20      	ldr	r3, [pc, #128]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b18:	4a20      	ldr	r2, [pc, #128]	@ (8000b9c <HAL_UART_MspInit+0x100>)
 8000b1a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b22:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b24:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b26:	2240      	movs	r2, #64	@ 0x40
 8000b28:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b2a:	4b1b      	ldr	r3, [pc, #108]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b30:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b36:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b38:	4b17      	ldr	r3, [pc, #92]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b3e:	4b16      	ldr	r3, [pc, #88]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b44:	4b14      	ldr	r3, [pc, #80]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b4a:	4b13      	ldr	r3, [pc, #76]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b4c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b50:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b52:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b58:	480f      	ldr	r0, [pc, #60]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b5a:	f000 faed 	bl	8001138 <HAL_DMA_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b64:	f7ff fef2 	bl	800094c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b6e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b98 <HAL_UART_MspInit+0xfc>)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2100      	movs	r1, #0
 8000b78:	2026      	movs	r0, #38	@ 0x26
 8000b7a:	f000 faa6 	bl	80010ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b7e:	2026      	movs	r0, #38	@ 0x26
 8000b80:	f000 fabf 	bl	8001102 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b84:	bf00      	nop
 8000b86:	3728      	adds	r7, #40	@ 0x28
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40004400 	.word	0x40004400
 8000b90:	40023800 	.word	0x40023800
 8000b94:	40020000 	.word	0x40020000
 8000b98:	20000154 	.word	0x20000154
 8000b9c:	400260a0 	.word	0x400260a0

08000ba0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <NMI_Handler+0x4>

08000ba8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <HardFault_Handler+0x4>

08000bb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bb4:	bf00      	nop
 8000bb6:	e7fd      	b.n	8000bb4 <MemManage_Handler+0x4>

08000bb8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bbc:	bf00      	nop
 8000bbe:	e7fd      	b.n	8000bbc <BusFault_Handler+0x4>

08000bc0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bc4:	bf00      	nop
 8000bc6:	e7fd      	b.n	8000bc4 <UsageFault_Handler+0x4>

08000bc8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr

08000bd6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bf6:	f000 f949 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	bd80      	pop	{r7, pc}
	...

08000c00 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c04:	4802      	ldr	r0, [pc, #8]	@ (8000c10 <DMA1_Stream6_IRQHandler+0x10>)
 8000c06:	f000 fbd7 	bl	80013b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20000154 	.word	0x20000154

08000c14 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c18:	4802      	ldr	r0, [pc, #8]	@ (8000c24 <USART2_IRQHandler+0x10>)
 8000c1a:	f002 fe87 	bl	800392c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	2000010c 	.word	0x2000010c

08000c28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b086      	sub	sp, #24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	60f8      	str	r0, [r7, #12]
 8000c30:	60b9      	str	r1, [r7, #8]
 8000c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	e00a      	b.n	8000c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c3a:	f3af 8000 	nop.w
 8000c3e:	4601      	mov	r1, r0
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	1c5a      	adds	r2, r3, #1
 8000c44:	60ba      	str	r2, [r7, #8]
 8000c46:	b2ca      	uxtb	r2, r1
 8000c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c4a:	697b      	ldr	r3, [r7, #20]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
 8000c50:	697a      	ldr	r2, [r7, #20]
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	dbf0      	blt.n	8000c3a <_read+0x12>
  }

  return len;
 8000c58:	687b      	ldr	r3, [r7, #4]
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}

08000c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c62:	b580      	push	{r7, lr}
 8000c64:	b086      	sub	sp, #24
 8000c66:	af00      	add	r7, sp, #0
 8000c68:	60f8      	str	r0, [r7, #12]
 8000c6a:	60b9      	str	r1, [r7, #8]
 8000c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	e009      	b.n	8000c88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c74:	68bb      	ldr	r3, [r7, #8]
 8000c76:	1c5a      	adds	r2, r3, #1
 8000c78:	60ba      	str	r2, [r7, #8]
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	3301      	adds	r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697a      	ldr	r2, [r7, #20]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	dbf1      	blt.n	8000c74 <_write+0x12>
  }
  return len;
 8000c90:	687b      	ldr	r3, [r7, #4]
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3718      	adds	r7, #24
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <_close>:

int _close(int file)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	b083      	sub	sp, #12
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	b083      	sub	sp, #12
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	6078      	str	r0, [r7, #4]
 8000cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8000cc4:	2300      	movs	r3, #0
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	370c      	adds	r7, #12
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr

08000cd2 <_isatty>:

int _isatty(int file)
{
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cda:	2301      	movs	r3, #1
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b085      	sub	sp, #20
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000cf4:	2300      	movs	r3, #0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
	...

08000d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b086      	sub	sp, #24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d0c:	4a14      	ldr	r2, [pc, #80]	@ (8000d60 <_sbrk+0x5c>)
 8000d0e:	4b15      	ldr	r3, [pc, #84]	@ (8000d64 <_sbrk+0x60>)
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d18:	4b13      	ldr	r3, [pc, #76]	@ (8000d68 <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d102      	bne.n	8000d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d20:	4b11      	ldr	r3, [pc, #68]	@ (8000d68 <_sbrk+0x64>)
 8000d22:	4a12      	ldr	r2, [pc, #72]	@ (8000d6c <_sbrk+0x68>)
 8000d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d26:	4b10      	ldr	r3, [pc, #64]	@ (8000d68 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d207      	bcs.n	8000d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d34:	f005 fb3e 	bl	80063b4 <__errno>
 8000d38:	4603      	mov	r3, r0
 8000d3a:	220c      	movs	r2, #12
 8000d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d42:	e009      	b.n	8000d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d44:	4b08      	ldr	r3, [pc, #32]	@ (8000d68 <_sbrk+0x64>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d4a:	4b07      	ldr	r3, [pc, #28]	@ (8000d68 <_sbrk+0x64>)
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	4a05      	ldr	r2, [pc, #20]	@ (8000d68 <_sbrk+0x64>)
 8000d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3718      	adds	r7, #24
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20020000 	.word	0x20020000
 8000d64:	00001000 	.word	0x00001000
 8000d68:	200003e8 	.word	0x200003e8
 8000d6c:	20000578 	.word	0x20000578

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d74:	4b06      	ldr	r3, [pc, #24]	@ (8000d90 <SystemInit+0x20>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d7a:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <SystemInit+0x20>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dcc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d98:	f7ff ffea 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d9c:	480c      	ldr	r0, [pc, #48]	@ (8000dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d9e:	490d      	ldr	r1, [pc, #52]	@ (8000dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0a      	ldr	r2, [pc, #40]	@ (8000ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000db4:	4c0a      	ldr	r4, [pc, #40]	@ (8000de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dc2:	f005 fafd 	bl	80063c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc6:	f7ff fbcb 	bl	8000560 <main>
  bx  lr    
 8000dca:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dcc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000dd8:	08006f74 	.word	0x08006f74
  ldr r2, =_sbss
 8000ddc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000de0:	20000578 	.word	0x20000578

08000de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de4:	e7fe      	b.n	8000de4 <ADC_IRQHandler>
	...

08000de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dec:	4b0e      	ldr	r3, [pc, #56]	@ (8000e28 <HAL_Init+0x40>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a0d      	ldr	r2, [pc, #52]	@ (8000e28 <HAL_Init+0x40>)
 8000df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	@ (8000e28 <HAL_Init+0x40>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8000e28 <HAL_Init+0x40>)
 8000dfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e04:	4b08      	ldr	r3, [pc, #32]	@ (8000e28 <HAL_Init+0x40>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a07      	ldr	r2, [pc, #28]	@ (8000e28 <HAL_Init+0x40>)
 8000e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f000 f94f 	bl	80010b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e16:	200f      	movs	r0, #15
 8000e18:	f000 f808 	bl	8000e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e1c:	f7ff fd9c 	bl	8000958 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e20:	2300      	movs	r3, #0
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	40023c00 	.word	0x40023c00

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <HAL_InitTick+0x54>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4b12      	ldr	r3, [pc, #72]	@ (8000e84 <HAL_InitTick+0x58>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f967 	bl	800111e <HAL_SYSTICK_Config>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e00e      	b.n	8000e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d80a      	bhi.n	8000e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e60:	2200      	movs	r2, #0
 8000e62:	6879      	ldr	r1, [r7, #4]
 8000e64:	f04f 30ff 	mov.w	r0, #4294967295
 8000e68:	f000 f92f 	bl	80010ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e6c:	4a06      	ldr	r2, [pc, #24]	@ (8000e88 <HAL_InitTick+0x5c>)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e72:	2300      	movs	r3, #0
 8000e74:	e000      	b.n	8000e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
}
 8000e78:	4618      	mov	r0, r3
 8000e7a:	3708      	adds	r7, #8
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	20000004 	.word	0x20000004
 8000e84:	2000000c 	.word	0x2000000c
 8000e88:	20000008 	.word	0x20000008

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	@ (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	@ (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	2000000c 	.word	0x2000000c
 8000eb0:	200003ec 	.word	0x200003ec

08000eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	@ (8000ec8 <HAL_GetTick+0x14>)
 8000eba:	681b      	ldr	r3, [r3, #0]
}
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop
 8000ec8:	200003ec 	.word	0x200003ec

08000ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee4:	d005      	beq.n	8000ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_Delay+0x44>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	461a      	mov	r2, r3
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	4413      	add	r3, r2
 8000ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ef2:	bf00      	nop
 8000ef4:	f7ff ffde 	bl	8000eb4 <HAL_GetTick>
 8000ef8:	4602      	mov	r2, r0
 8000efa:	68bb      	ldr	r3, [r7, #8]
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	68fa      	ldr	r2, [r7, #12]
 8000f00:	429a      	cmp	r2, r3
 8000f02:	d8f7      	bhi.n	8000ef4 <HAL_Delay+0x28>
  {
  }
}
 8000f04:	bf00      	nop
 8000f06:	bf00      	nop
 8000f08:	3710      	adds	r7, #16
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000000c 	.word	0x2000000c

08000f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f14:	b480      	push	{r7}
 8000f16:	b085      	sub	sp, #20
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f24:	4b0c      	ldr	r3, [pc, #48]	@ (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f26:	68db      	ldr	r3, [r3, #12]
 8000f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f2a:	68ba      	ldr	r2, [r7, #8]
 8000f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f30:	4013      	ands	r3, r2
 8000f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f46:	4a04      	ldr	r2, [pc, #16]	@ (8000f58 <__NVIC_SetPriorityGrouping+0x44>)
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	60d3      	str	r3, [r2, #12]
}
 8000f4c:	bf00      	nop
 8000f4e:	3714      	adds	r7, #20
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000ed00 	.word	0xe000ed00

08000f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b04      	ldr	r3, [pc, #16]	@ (8000f74 <__NVIC_GetPriorityGrouping+0x18>)
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	0a1b      	lsrs	r3, r3, #8
 8000f66:	f003 0307 	and.w	r3, r3, #7
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr
 8000f74:	e000ed00 	.word	0xe000ed00

08000f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	4603      	mov	r3, r0
 8000f80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	db0b      	blt.n	8000fa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	f003 021f 	and.w	r2, r3, #31
 8000f90:	4907      	ldr	r1, [pc, #28]	@ (8000fb0 <__NVIC_EnableIRQ+0x38>)
 8000f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f96:	095b      	lsrs	r3, r3, #5
 8000f98:	2001      	movs	r0, #1
 8000f9a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000e100 	.word	0xe000e100

08000fb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4603      	mov	r3, r0
 8000fbc:	6039      	str	r1, [r7, #0]
 8000fbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	db0a      	blt.n	8000fde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	b2da      	uxtb	r2, r3
 8000fcc:	490c      	ldr	r1, [pc, #48]	@ (8001000 <__NVIC_SetPriority+0x4c>)
 8000fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd2:	0112      	lsls	r2, r2, #4
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fdc:	e00a      	b.n	8000ff4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	b2da      	uxtb	r2, r3
 8000fe2:	4908      	ldr	r1, [pc, #32]	@ (8001004 <__NVIC_SetPriority+0x50>)
 8000fe4:	79fb      	ldrb	r3, [r7, #7]
 8000fe6:	f003 030f 	and.w	r3, r3, #15
 8000fea:	3b04      	subs	r3, #4
 8000fec:	0112      	lsls	r2, r2, #4
 8000fee:	b2d2      	uxtb	r2, r2
 8000ff0:	440b      	add	r3, r1
 8000ff2:	761a      	strb	r2, [r3, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	e000e100 	.word	0xe000e100
 8001004:	e000ed00 	.word	0xe000ed00

08001008 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001008:	b480      	push	{r7}
 800100a:	b089      	sub	sp, #36	@ 0x24
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0307 	and.w	r3, r3, #7
 800101a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	f1c3 0307 	rsb	r3, r3, #7
 8001022:	2b04      	cmp	r3, #4
 8001024:	bf28      	it	cs
 8001026:	2304      	movcs	r3, #4
 8001028:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3304      	adds	r3, #4
 800102e:	2b06      	cmp	r3, #6
 8001030:	d902      	bls.n	8001038 <NVIC_EncodePriority+0x30>
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3b03      	subs	r3, #3
 8001036:	e000      	b.n	800103a <NVIC_EncodePriority+0x32>
 8001038:	2300      	movs	r3, #0
 800103a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800103c:	f04f 32ff 	mov.w	r2, #4294967295
 8001040:	69bb      	ldr	r3, [r7, #24]
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	43da      	mvns	r2, r3
 8001048:	68bb      	ldr	r3, [r7, #8]
 800104a:	401a      	ands	r2, r3
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001050:	f04f 31ff 	mov.w	r1, #4294967295
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	fa01 f303 	lsl.w	r3, r1, r3
 800105a:	43d9      	mvns	r1, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	4313      	orrs	r3, r2
         );
}
 8001062:	4618      	mov	r0, r3
 8001064:	3724      	adds	r7, #36	@ 0x24
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
	...

08001070 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3b01      	subs	r3, #1
 800107c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001080:	d301      	bcc.n	8001086 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001082:	2301      	movs	r3, #1
 8001084:	e00f      	b.n	80010a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001086:	4a0a      	ldr	r2, [pc, #40]	@ (80010b0 <SysTick_Config+0x40>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	3b01      	subs	r3, #1
 800108c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800108e:	210f      	movs	r1, #15
 8001090:	f04f 30ff 	mov.w	r0, #4294967295
 8001094:	f7ff ff8e 	bl	8000fb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001098:	4b05      	ldr	r3, [pc, #20]	@ (80010b0 <SysTick_Config+0x40>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800109e:	4b04      	ldr	r3, [pc, #16]	@ (80010b0 <SysTick_Config+0x40>)
 80010a0:	2207      	movs	r2, #7
 80010a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010a4:	2300      	movs	r3, #0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	e000e010 	.word	0xe000e010

080010b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010bc:	6878      	ldr	r0, [r7, #4]
 80010be:	f7ff ff29 	bl	8000f14 <__NVIC_SetPriorityGrouping>
}
 80010c2:	bf00      	nop
 80010c4:	3708      	adds	r7, #8
 80010c6:	46bd      	mov	sp, r7
 80010c8:	bd80      	pop	{r7, pc}

080010ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b086      	sub	sp, #24
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	4603      	mov	r3, r0
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
 80010d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010d8:	2300      	movs	r3, #0
 80010da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010dc:	f7ff ff3e 	bl	8000f5c <__NVIC_GetPriorityGrouping>
 80010e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010e2:	687a      	ldr	r2, [r7, #4]
 80010e4:	68b9      	ldr	r1, [r7, #8]
 80010e6:	6978      	ldr	r0, [r7, #20]
 80010e8:	f7ff ff8e 	bl	8001008 <NVIC_EncodePriority>
 80010ec:	4602      	mov	r2, r0
 80010ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010f2:	4611      	mov	r1, r2
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff5d 	bl	8000fb4 <__NVIC_SetPriority>
}
 80010fa:	bf00      	nop
 80010fc:	3718      	adds	r7, #24
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800110c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001110:	4618      	mov	r0, r3
 8001112:	f7ff ff31 	bl	8000f78 <__NVIC_EnableIRQ>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	b082      	sub	sp, #8
 8001122:	af00      	add	r7, sp, #0
 8001124:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff ffa2 	bl	8001070 <SysTick_Config>
 800112c:	4603      	mov	r3, r0
}
 800112e:	4618      	mov	r0, r3
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
	...

08001138 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b086      	sub	sp, #24
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001144:	f7ff feb6 	bl	8000eb4 <HAL_GetTick>
 8001148:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d101      	bne.n	8001154 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001150:	2301      	movs	r3, #1
 8001152:	e099      	b.n	8001288 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	2202      	movs	r2, #2
 8001158:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f022 0201 	bic.w	r2, r2, #1
 8001172:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001174:	e00f      	b.n	8001196 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001176:	f7ff fe9d 	bl	8000eb4 <HAL_GetTick>
 800117a:	4602      	mov	r2, r0
 800117c:	693b      	ldr	r3, [r7, #16]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b05      	cmp	r3, #5
 8001182:	d908      	bls.n	8001196 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2220      	movs	r2, #32
 8001188:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	2203      	movs	r2, #3
 800118e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001192:	2303      	movs	r3, #3
 8001194:	e078      	b.n	8001288 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1e8      	bne.n	8001176 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011ac:	697a      	ldr	r2, [r7, #20]
 80011ae:	4b38      	ldr	r3, [pc, #224]	@ (8001290 <HAL_DMA_Init+0x158>)
 80011b0:	4013      	ands	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	691b      	ldr	r3, [r3, #16]
 80011c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	699b      	ldr	r3, [r3, #24]
 80011d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	6a1b      	ldr	r3, [r3, #32]
 80011e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011e2:	697a      	ldr	r2, [r7, #20]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d107      	bne.n	8001200 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f8:	4313      	orrs	r3, r2
 80011fa:	697a      	ldr	r2, [r7, #20]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	697a      	ldr	r2, [r7, #20]
 8001206:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	695b      	ldr	r3, [r3, #20]
 800120e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	f023 0307 	bic.w	r3, r3, #7
 8001216:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800121c:	697a      	ldr	r2, [r7, #20]
 800121e:	4313      	orrs	r3, r2
 8001220:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001226:	2b04      	cmp	r3, #4
 8001228:	d117      	bne.n	800125a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122e:	697a      	ldr	r2, [r7, #20]
 8001230:	4313      	orrs	r3, r2
 8001232:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001238:	2b00      	cmp	r3, #0
 800123a:	d00e      	beq.n	800125a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f000 fa7b 	bl	8001738 <DMA_CheckFifoParam>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d008      	beq.n	800125a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2240      	movs	r2, #64	@ 0x40
 800124c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2201      	movs	r2, #1
 8001252:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8001256:	2301      	movs	r3, #1
 8001258:	e016      	b.n	8001288 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	697a      	ldr	r2, [r7, #20]
 8001260:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f000 fa32 	bl	80016cc <DMA_CalcBaseAndBitshift>
 8001268:	4603      	mov	r3, r0
 800126a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001270:	223f      	movs	r2, #63	@ 0x3f
 8001272:	409a      	lsls	r2, r3
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001286:	2300      	movs	r3, #0
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	f010803f 	.word	0xf010803f

08001294 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b084      	sub	sp, #16
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012a2:	f7ff fe07 	bl	8000eb4 <HAL_GetTick>
 80012a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d008      	beq.n	80012c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2280      	movs	r2, #128	@ 0x80
 80012b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e052      	b.n	800136c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f022 0216 	bic.w	r2, r2, #22
 80012d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	695a      	ldr	r2, [r3, #20]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80012e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d103      	bne.n	80012f6 <HAL_DMA_Abort+0x62>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d007      	beq.n	8001306 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f022 0208 	bic.w	r2, r2, #8
 8001304:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0201 	bic.w	r2, r2, #1
 8001314:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001316:	e013      	b.n	8001340 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001318:	f7ff fdcc 	bl	8000eb4 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b05      	cmp	r3, #5
 8001324:	d90c      	bls.n	8001340 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2220      	movs	r2, #32
 800132a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2203      	movs	r2, #3
 8001330:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e015      	b.n	800136c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0301 	and.w	r3, r3, #1
 800134a:	2b00      	cmp	r3, #0
 800134c:	d1e4      	bne.n	8001318 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001352:	223f      	movs	r2, #63	@ 0x3f
 8001354:	409a      	lsls	r2, r3
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2201      	movs	r2, #1
 800135e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2200      	movs	r2, #0
 8001366:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}

08001374 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001382:	b2db      	uxtb	r3, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d004      	beq.n	8001392 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2280      	movs	r2, #128	@ 0x80
 800138c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00c      	b.n	80013ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2205      	movs	r2, #5
 8001396:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0201 	bic.w	r2, r2, #1
 80013a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013c4:	4b8e      	ldr	r3, [pc, #568]	@ (8001600 <HAL_DMA_IRQHandler+0x248>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a8e      	ldr	r2, [pc, #568]	@ (8001604 <HAL_DMA_IRQHandler+0x24c>)
 80013ca:	fba2 2303 	umull	r2, r3, r2, r3
 80013ce:	0a9b      	lsrs	r3, r3, #10
 80013d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e2:	2208      	movs	r2, #8
 80013e4:	409a      	lsls	r2, r3
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d01a      	beq.n	8001424 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f003 0304 	and.w	r3, r3, #4
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0204 	bic.w	r2, r2, #4
 800140a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001410:	2208      	movs	r2, #8
 8001412:	409a      	lsls	r2, r3
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800141c:	f043 0201 	orr.w	r2, r3, #1
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001428:	2201      	movs	r2, #1
 800142a:	409a      	lsls	r2, r3
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	4013      	ands	r3, r2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d012      	beq.n	800145a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800143e:	2b00      	cmp	r3, #0
 8001440:	d00b      	beq.n	800145a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001446:	2201      	movs	r2, #1
 8001448:	409a      	lsls	r2, r3
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001452:	f043 0202 	orr.w	r2, r3, #2
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800145e:	2204      	movs	r2, #4
 8001460:	409a      	lsls	r2, r3
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	4013      	ands	r3, r2
 8001466:	2b00      	cmp	r3, #0
 8001468:	d012      	beq.n	8001490 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d00b      	beq.n	8001490 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800147c:	2204      	movs	r2, #4
 800147e:	409a      	lsls	r2, r3
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001488:	f043 0204 	orr.w	r2, r3, #4
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001494:	2210      	movs	r2, #16
 8001496:	409a      	lsls	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4013      	ands	r3, r2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d043      	beq.n	8001528 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d03c      	beq.n	8001528 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014b2:	2210      	movs	r2, #16
 80014b4:	409a      	lsls	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d018      	beq.n	80014fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d108      	bne.n	80014e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d024      	beq.n	8001528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	4798      	blx	r3
 80014e6:	e01f      	b.n	8001528 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d01b      	beq.n	8001528 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	4798      	blx	r3
 80014f8:	e016      	b.n	8001528 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001504:	2b00      	cmp	r3, #0
 8001506:	d107      	bne.n	8001518 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0208 	bic.w	r2, r2, #8
 8001516:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001524:	6878      	ldr	r0, [r7, #4]
 8001526:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800152c:	2220      	movs	r2, #32
 800152e:	409a      	lsls	r2, r3
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4013      	ands	r3, r2
 8001534:	2b00      	cmp	r3, #0
 8001536:	f000 808f 	beq.w	8001658 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b00      	cmp	r3, #0
 8001546:	f000 8087 	beq.w	8001658 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800154e:	2220      	movs	r2, #32
 8001550:	409a      	lsls	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b05      	cmp	r3, #5
 8001560:	d136      	bne.n	80015d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681a      	ldr	r2, [r3, #0]
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f022 0216 	bic.w	r2, r2, #22
 8001570:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	695a      	ldr	r2, [r3, #20]
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001580:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001586:	2b00      	cmp	r3, #0
 8001588:	d103      	bne.n	8001592 <HAL_DMA_IRQHandler+0x1da>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0208 	bic.w	r2, r2, #8
 80015a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015a6:	223f      	movs	r2, #63	@ 0x3f
 80015a8:	409a      	lsls	r2, r3
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2201      	movs	r2, #1
 80015b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d07e      	beq.n	80016c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4798      	blx	r3
        }
        return;
 80015ce:	e079      	b.n	80016c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d01d      	beq.n	800161a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d10d      	bne.n	8001608 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d031      	beq.n	8001658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	4798      	blx	r3
 80015fc:	e02c      	b.n	8001658 <HAL_DMA_IRQHandler+0x2a0>
 80015fe:	bf00      	nop
 8001600:	20000004 	.word	0x20000004
 8001604:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800160c:	2b00      	cmp	r3, #0
 800160e:	d023      	beq.n	8001658 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	4798      	blx	r3
 8001618:	e01e      	b.n	8001658 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001624:	2b00      	cmp	r3, #0
 8001626:	d10f      	bne.n	8001648 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0210 	bic.w	r2, r2, #16
 8001636:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2200      	movs	r2, #0
 8001644:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800164c:	2b00      	cmp	r3, #0
 800164e:	d003      	beq.n	8001658 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800165c:	2b00      	cmp	r3, #0
 800165e:	d032      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d022      	beq.n	80016b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2205      	movs	r2, #5
 8001670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0201 	bic.w	r2, r2, #1
 8001682:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	3301      	adds	r3, #1
 8001688:	60bb      	str	r3, [r7, #8]
 800168a:	697a      	ldr	r2, [r7, #20]
 800168c:	429a      	cmp	r2, r3
 800168e:	d307      	bcc.n	80016a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	2b00      	cmp	r3, #0
 800169c:	d1f2      	bne.n	8001684 <HAL_DMA_IRQHandler+0x2cc>
 800169e:	e000      	b.n	80016a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	4798      	blx	r3
 80016c2:	e000      	b.n	80016c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80016c4:	bf00      	nop
    }
  }
}
 80016c6:	3718      	adds	r7, #24
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	3b10      	subs	r3, #16
 80016dc:	4a14      	ldr	r2, [pc, #80]	@ (8001730 <DMA_CalcBaseAndBitshift+0x64>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80016e6:	4a13      	ldr	r2, [pc, #76]	@ (8001734 <DMA_CalcBaseAndBitshift+0x68>)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	4413      	add	r3, r2
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	461a      	mov	r2, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2b03      	cmp	r3, #3
 80016f8:	d909      	bls.n	800170e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001702:	f023 0303 	bic.w	r3, r3, #3
 8001706:	1d1a      	adds	r2, r3, #4
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	659a      	str	r2, [r3, #88]	@ 0x58
 800170c:	e007      	b.n	800171e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001716:	f023 0303 	bic.w	r3, r3, #3
 800171a:	687a      	ldr	r2, [r7, #4]
 800171c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001722:	4618      	mov	r0, r3
 8001724:	3714      	adds	r7, #20
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	aaaaaaab 	.word	0xaaaaaaab
 8001734:	08006f14 	.word	0x08006f14

08001738 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001740:	2300      	movs	r3, #0
 8001742:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001748:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d11f      	bne.n	8001792 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b03      	cmp	r3, #3
 8001756:	d856      	bhi.n	8001806 <DMA_CheckFifoParam+0xce>
 8001758:	a201      	add	r2, pc, #4	@ (adr r2, 8001760 <DMA_CheckFifoParam+0x28>)
 800175a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800175e:	bf00      	nop
 8001760:	08001771 	.word	0x08001771
 8001764:	08001783 	.word	0x08001783
 8001768:	08001771 	.word	0x08001771
 800176c:	08001807 	.word	0x08001807
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001774:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d046      	beq.n	800180a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001780:	e043      	b.n	800180a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001786:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800178a:	d140      	bne.n	800180e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001790:	e03d      	b.n	800180e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	699b      	ldr	r3, [r3, #24]
 8001796:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800179a:	d121      	bne.n	80017e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	2b03      	cmp	r3, #3
 80017a0:	d837      	bhi.n	8001812 <DMA_CheckFifoParam+0xda>
 80017a2:	a201      	add	r2, pc, #4	@ (adr r2, 80017a8 <DMA_CheckFifoParam+0x70>)
 80017a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017a8:	080017b9 	.word	0x080017b9
 80017ac:	080017bf 	.word	0x080017bf
 80017b0:	080017b9 	.word	0x080017b9
 80017b4:	080017d1 	.word	0x080017d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	73fb      	strb	r3, [r7, #15]
      break;
 80017bc:	e030      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d025      	beq.n	8001816 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017ce:	e022      	b.n	8001816 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017d8:	d11f      	bne.n	800181a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80017de:	e01c      	b.n	800181a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	2b02      	cmp	r3, #2
 80017e4:	d903      	bls.n	80017ee <DMA_CheckFifoParam+0xb6>
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d003      	beq.n	80017f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80017ec:	e018      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	73fb      	strb	r3, [r7, #15]
      break;
 80017f2:	e015      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00e      	beq.n	800181e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001800:	2301      	movs	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
      break;
 8001804:	e00b      	b.n	800181e <DMA_CheckFifoParam+0xe6>
      break;
 8001806:	bf00      	nop
 8001808:	e00a      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;
 800180a:	bf00      	nop
 800180c:	e008      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;
 800180e:	bf00      	nop
 8001810:	e006      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;
 8001812:	bf00      	nop
 8001814:	e004      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;
 8001816:	bf00      	nop
 8001818:	e002      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;   
 800181a:	bf00      	nop
 800181c:	e000      	b.n	8001820 <DMA_CheckFifoParam+0xe8>
      break;
 800181e:	bf00      	nop
    }
  } 
  
  return status; 
 8001820:	7bfb      	ldrb	r3, [r7, #15]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3714      	adds	r7, #20
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop

08001830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001830:	b480      	push	{r7}
 8001832:	b089      	sub	sp, #36	@ 0x24
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800183a:	2300      	movs	r3, #0
 800183c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800183e:	2300      	movs	r3, #0
 8001840:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	e16b      	b.n	8001b24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800184c:	2201      	movs	r2, #1
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	697a      	ldr	r2, [r7, #20]
 800185c:	4013      	ands	r3, r2
 800185e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001860:	693a      	ldr	r2, [r7, #16]
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	429a      	cmp	r2, r3
 8001866:	f040 815a 	bne.w	8001b1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	f003 0303 	and.w	r3, r3, #3
 8001872:	2b01      	cmp	r3, #1
 8001874:	d005      	beq.n	8001882 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800187e:	2b02      	cmp	r3, #2
 8001880:	d130      	bne.n	80018e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	2203      	movs	r2, #3
 800188e:	fa02 f303 	lsl.w	r3, r2, r3
 8001892:	43db      	mvns	r3, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4013      	ands	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	fa02 f303 	lsl.w	r3, r2, r3
 80018a6:	69ba      	ldr	r2, [r7, #24]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	69ba      	ldr	r2, [r7, #24]
 80018b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018b8:	2201      	movs	r2, #1
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	091b      	lsrs	r3, r3, #4
 80018ce:	f003 0201 	and.w	r2, r3, #1
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0303 	and.w	r3, r3, #3
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	d017      	beq.n	8001920 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	68db      	ldr	r3, [r3, #12]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	69ba      	ldr	r2, [r7, #24]
 8001904:	4013      	ands	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689a      	ldr	r2, [r3, #8]
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d123      	bne.n	8001974 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	08da      	lsrs	r2, r3, #3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3208      	adds	r2, #8
 8001934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001938:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f003 0307 	and.w	r3, r3, #7
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	220f      	movs	r2, #15
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	4013      	ands	r3, r2
 800194e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	691a      	ldr	r2, [r3, #16]
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	f003 0307 	and.w	r3, r3, #7
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	4313      	orrs	r3, r2
 8001964:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	08da      	lsrs	r2, r3, #3
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	3208      	adds	r2, #8
 800196e:	69b9      	ldr	r1, [r7, #24]
 8001970:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	2203      	movs	r2, #3
 8001980:	fa02 f303 	lsl.w	r3, r2, r3
 8001984:	43db      	mvns	r3, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4013      	ands	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f003 0203 	and.w	r2, r3, #3
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	69ba      	ldr	r2, [r7, #24]
 800199e:	4313      	orrs	r3, r2
 80019a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	f000 80b4 	beq.w	8001b1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b60      	ldr	r3, [pc, #384]	@ (8001b3c <HAL_GPIO_Init+0x30c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019be:	4a5f      	ldr	r2, [pc, #380]	@ (8001b3c <HAL_GPIO_Init+0x30c>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80019c6:	4b5d      	ldr	r3, [pc, #372]	@ (8001b3c <HAL_GPIO_Init+0x30c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019d2:	4a5b      	ldr	r2, [pc, #364]	@ (8001b40 <HAL_GPIO_Init+0x310>)
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	089b      	lsrs	r3, r3, #2
 80019d8:	3302      	adds	r3, #2
 80019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f003 0303 	and.w	r3, r3, #3
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	220f      	movs	r2, #15
 80019ea:	fa02 f303 	lsl.w	r3, r2, r3
 80019ee:	43db      	mvns	r3, r3
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	4013      	ands	r3, r2
 80019f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a52      	ldr	r2, [pc, #328]	@ (8001b44 <HAL_GPIO_Init+0x314>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d02b      	beq.n	8001a56 <HAL_GPIO_Init+0x226>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a51      	ldr	r2, [pc, #324]	@ (8001b48 <HAL_GPIO_Init+0x318>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d025      	beq.n	8001a52 <HAL_GPIO_Init+0x222>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a50      	ldr	r2, [pc, #320]	@ (8001b4c <HAL_GPIO_Init+0x31c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d01f      	beq.n	8001a4e <HAL_GPIO_Init+0x21e>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a4f      	ldr	r2, [pc, #316]	@ (8001b50 <HAL_GPIO_Init+0x320>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d019      	beq.n	8001a4a <HAL_GPIO_Init+0x21a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a4e      	ldr	r2, [pc, #312]	@ (8001b54 <HAL_GPIO_Init+0x324>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d013      	beq.n	8001a46 <HAL_GPIO_Init+0x216>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a4d      	ldr	r2, [pc, #308]	@ (8001b58 <HAL_GPIO_Init+0x328>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d00d      	beq.n	8001a42 <HAL_GPIO_Init+0x212>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a4c      	ldr	r2, [pc, #304]	@ (8001b5c <HAL_GPIO_Init+0x32c>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d007      	beq.n	8001a3e <HAL_GPIO_Init+0x20e>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a4b      	ldr	r2, [pc, #300]	@ (8001b60 <HAL_GPIO_Init+0x330>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d101      	bne.n	8001a3a <HAL_GPIO_Init+0x20a>
 8001a36:	2307      	movs	r3, #7
 8001a38:	e00e      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a3a:	2308      	movs	r3, #8
 8001a3c:	e00c      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a3e:	2306      	movs	r3, #6
 8001a40:	e00a      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a42:	2305      	movs	r3, #5
 8001a44:	e008      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a46:	2304      	movs	r3, #4
 8001a48:	e006      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e004      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a4e:	2302      	movs	r3, #2
 8001a50:	e002      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_GPIO_Init+0x228>
 8001a56:	2300      	movs	r3, #0
 8001a58:	69fa      	ldr	r2, [r7, #28]
 8001a5a:	f002 0203 	and.w	r2, r2, #3
 8001a5e:	0092      	lsls	r2, r2, #2
 8001a60:	4093      	lsls	r3, r2
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a68:	4935      	ldr	r1, [pc, #212]	@ (8001b40 <HAL_GPIO_Init+0x310>)
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	089b      	lsrs	r3, r3, #2
 8001a6e:	3302      	adds	r3, #2
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a76:	4b3b      	ldr	r3, [pc, #236]	@ (8001b64 <HAL_GPIO_Init+0x334>)
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	69ba      	ldr	r2, [r7, #24]
 8001a82:	4013      	ands	r3, r2
 8001a84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d003      	beq.n	8001a9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001a92:	69ba      	ldr	r2, [r7, #24]
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a9a:	4a32      	ldr	r2, [pc, #200]	@ (8001b64 <HAL_GPIO_Init+0x334>)
 8001a9c:	69bb      	ldr	r3, [r7, #24]
 8001a9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001aa0:	4b30      	ldr	r3, [pc, #192]	@ (8001b64 <HAL_GPIO_Init+0x334>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	69ba      	ldr	r2, [r7, #24]
 8001aac:	4013      	ands	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d003      	beq.n	8001ac4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001abc:	69ba      	ldr	r2, [r7, #24]
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001ac4:	4a27      	ldr	r2, [pc, #156]	@ (8001b64 <HAL_GPIO_Init+0x334>)
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001aca:	4b26      	ldr	r3, [pc, #152]	@ (8001b64 <HAL_GPIO_Init+0x334>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001aee:	4a1d      	ldr	r2, [pc, #116]	@ (8001b64 <HAL_GPIO_Init+0x334>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <HAL_GPIO_Init+0x334>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b18:	4a12      	ldr	r2, [pc, #72]	@ (8001b64 <HAL_GPIO_Init+0x334>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	3301      	adds	r3, #1
 8001b22:	61fb      	str	r3, [r7, #28]
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	f67f ae90 	bls.w	800184c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b2c:	bf00      	nop
 8001b2e:	bf00      	nop
 8001b30:	3724      	adds	r7, #36	@ 0x24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40013800 	.word	0x40013800
 8001b44:	40020000 	.word	0x40020000
 8001b48:	40020400 	.word	0x40020400
 8001b4c:	40020800 	.word	0x40020800
 8001b50:	40020c00 	.word	0x40020c00
 8001b54:	40021000 	.word	0x40021000
 8001b58:	40021400 	.word	0x40021400
 8001b5c:	40021800 	.word	0x40021800
 8001b60:	40021c00 	.word	0x40021c00
 8001b64:	40013c00 	.word	0x40013c00

08001b68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	460b      	mov	r3, r1
 8001b72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	691a      	ldr	r2, [r3, #16]
 8001b78:	887b      	ldrh	r3, [r7, #2]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b80:	2301      	movs	r3, #1
 8001b82:	73fb      	strb	r3, [r7, #15]
 8001b84:	e001      	b.n	8001b8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b86:	2300      	movs	r3, #0
 8001b88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	460b      	mov	r3, r1
 8001ba2:	807b      	strh	r3, [r7, #2]
 8001ba4:	4613      	mov	r3, r2
 8001ba6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba8:	787b      	ldrb	r3, [r7, #1]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bae:	887a      	ldrh	r2, [r7, #2]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bb4:	e003      	b.n	8001bbe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bb6:	887b      	ldrh	r3, [r7, #2]
 8001bb8:	041a      	lsls	r2, r3, #16
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	619a      	str	r2, [r3, #24]
}
 8001bbe:	bf00      	nop
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e267      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d075      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bea:	4b88      	ldr	r3, [pc, #544]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 030c 	and.w	r3, r3, #12
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d00c      	beq.n	8001c10 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001bf6:	4b85      	ldr	r3, [pc, #532]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d112      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c02:	4b82      	ldr	r3, [pc, #520]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c0e:	d10b      	bne.n	8001c28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	4b7e      	ldr	r3, [pc, #504]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d05b      	beq.n	8001cd4 <HAL_RCC_OscConfig+0x108>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d157      	bne.n	8001cd4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e242      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c30:	d106      	bne.n	8001c40 <HAL_RCC_OscConfig+0x74>
 8001c32:	4b76      	ldr	r3, [pc, #472]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a75      	ldr	r2, [pc, #468]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c3c:	6013      	str	r3, [r2, #0]
 8001c3e:	e01d      	b.n	8001c7c <HAL_RCC_OscConfig+0xb0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x98>
 8001c4a:	4b70      	ldr	r3, [pc, #448]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6f      	ldr	r2, [pc, #444]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b6d      	ldr	r3, [pc, #436]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a6c      	ldr	r2, [pc, #432]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0xb0>
 8001c64:	4b69      	ldr	r3, [pc, #420]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a68      	ldr	r2, [pc, #416]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b66      	ldr	r3, [pc, #408]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a65      	ldr	r2, [pc, #404]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d013      	beq.n	8001cac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c84:	f7ff f916 	bl	8000eb4 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c8a:	e008      	b.n	8001c9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c8c:	f7ff f912 	bl	8000eb4 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b64      	cmp	r3, #100	@ 0x64
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e207      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c9e:	4b5b      	ldr	r3, [pc, #364]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0xc0>
 8001caa:	e014      	b.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff f902 	bl	8000eb4 <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f8fe 	bl	8000eb4 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	@ 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e1f3      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cc6:	4b51      	ldr	r3, [pc, #324]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1f0      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xe8>
 8001cd2:	e000      	b.n	8001cd6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d063      	beq.n	8001daa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001ce2:	4b4a      	ldr	r3, [pc, #296]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f003 030c 	and.w	r3, r3, #12
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cee:	4b47      	ldr	r3, [pc, #284]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cf0:	689b      	ldr	r3, [r3, #8]
 8001cf2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001cf6:	2b08      	cmp	r3, #8
 8001cf8:	d11c      	bne.n	8001d34 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001cfa:	4b44      	ldr	r3, [pc, #272]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d116      	bne.n	8001d34 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d06:	4b41      	ldr	r3, [pc, #260]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f003 0302 	and.w	r3, r3, #2
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d005      	beq.n	8001d1e <HAL_RCC_OscConfig+0x152>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e1c7      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d1e:	4b3b      	ldr	r3, [pc, #236]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	4937      	ldr	r1, [pc, #220]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d32:	e03a      	b.n	8001daa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d020      	beq.n	8001d7e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d3c:	4b34      	ldr	r3, [pc, #208]	@ (8001e10 <HAL_RCC_OscConfig+0x244>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d42:	f7ff f8b7 	bl	8000eb4 <HAL_GetTick>
 8001d46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d4a:	f7ff f8b3 	bl	8000eb4 <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e1a8      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d5c:	4b2b      	ldr	r3, [pc, #172]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0302 	and.w	r3, r3, #2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d0f0      	beq.n	8001d4a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d68:	4b28      	ldr	r3, [pc, #160]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691b      	ldr	r3, [r3, #16]
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	4925      	ldr	r1, [pc, #148]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	600b      	str	r3, [r1, #0]
 8001d7c:	e015      	b.n	8001daa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d7e:	4b24      	ldr	r3, [pc, #144]	@ (8001e10 <HAL_RCC_OscConfig+0x244>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff f896 	bl	8000eb4 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d8c:	f7ff f892 	bl	8000eb4 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e187      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0302 	and.w	r3, r3, #2
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0308 	and.w	r3, r3, #8
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d036      	beq.n	8001e24 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d016      	beq.n	8001dec <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dbe:	4b15      	ldr	r3, [pc, #84]	@ (8001e14 <HAL_RCC_OscConfig+0x248>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dc4:	f7ff f876 	bl	8000eb4 <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dcc:	f7ff f872 	bl	8000eb4 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e167      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001dde:	4b0b      	ldr	r3, [pc, #44]	@ (8001e0c <HAL_RCC_OscConfig+0x240>)
 8001de0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x200>
 8001dea:	e01b      	b.n	8001e24 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001dec:	4b09      	ldr	r3, [pc, #36]	@ (8001e14 <HAL_RCC_OscConfig+0x248>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df2:	f7ff f85f 	bl	8000eb4 <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001df8:	e00e      	b.n	8001e18 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dfa:	f7ff f85b 	bl	8000eb4 <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d907      	bls.n	8001e18 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e150      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	42470000 	.word	0x42470000
 8001e14:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e18:	4b88      	ldr	r3, [pc, #544]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001e1a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1ea      	bne.n	8001dfa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8097 	beq.w	8001f60 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e32:	2300      	movs	r3, #0
 8001e34:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e36:	4b81      	ldr	r3, [pc, #516]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d10f      	bne.n	8001e62 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	60bb      	str	r3, [r7, #8]
 8001e46:	4b7d      	ldr	r3, [pc, #500]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	4a7c      	ldr	r2, [pc, #496]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001e4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e50:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e52:	4b7a      	ldr	r3, [pc, #488]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e5a:	60bb      	str	r3, [r7, #8]
 8001e5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e62:	4b77      	ldr	r3, [pc, #476]	@ (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d118      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e6e:	4b74      	ldr	r3, [pc, #464]	@ (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a73      	ldr	r2, [pc, #460]	@ (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e74:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e78:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f81b 	bl	8000eb4 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e80:	e008      	b.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e82:	f7ff f817 	bl	8000eb4 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	2b02      	cmp	r3, #2
 8001e8e:	d901      	bls.n	8001e94 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001e90:	2303      	movs	r3, #3
 8001e92:	e10c      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e94:	4b6a      	ldr	r3, [pc, #424]	@ (8002040 <HAL_RCC_OscConfig+0x474>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d0f0      	beq.n	8001e82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d106      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x2ea>
 8001ea8:	4b64      	ldr	r3, [pc, #400]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001eaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eac:	4a63      	ldr	r2, [pc, #396]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001eae:	f043 0301 	orr.w	r3, r3, #1
 8001eb2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eb4:	e01c      	b.n	8001ef0 <HAL_RCC_OscConfig+0x324>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b05      	cmp	r3, #5
 8001ebc:	d10c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x30c>
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001ec0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec2:	4a5e      	ldr	r2, [pc, #376]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eca:	4b5c      	ldr	r3, [pc, #368]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ece:	4a5b      	ldr	r2, [pc, #364]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001ed0:	f043 0301 	orr.w	r3, r3, #1
 8001ed4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ed6:	e00b      	b.n	8001ef0 <HAL_RCC_OscConfig+0x324>
 8001ed8:	4b58      	ldr	r3, [pc, #352]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001eda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001edc:	4a57      	ldr	r2, [pc, #348]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001ede:	f023 0301 	bic.w	r3, r3, #1
 8001ee2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee4:	4b55      	ldr	r3, [pc, #340]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001ee6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ee8:	4a54      	ldr	r2, [pc, #336]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001eea:	f023 0304 	bic.w	r3, r3, #4
 8001eee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d015      	beq.n	8001f24 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ef8:	f7fe ffdc 	bl	8000eb4 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001efe:	e00a      	b.n	8001f16 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f00:	f7fe ffd8 	bl	8000eb4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e0cb      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f16:	4b49      	ldr	r3, [pc, #292]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d0ee      	beq.n	8001f00 <HAL_RCC_OscConfig+0x334>
 8001f22:	e014      	b.n	8001f4e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f24:	f7fe ffc6 	bl	8000eb4 <HAL_GetTick>
 8001f28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f2a:	e00a      	b.n	8001f42 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f2c:	f7fe ffc2 	bl	8000eb4 <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e0b5      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f42:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001f44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1ee      	bne.n	8001f2c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f4e:	7dfb      	ldrb	r3, [r7, #23]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d105      	bne.n	8001f60 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f54:	4b39      	ldr	r3, [pc, #228]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f58:	4a38      	ldr	r2, [pc, #224]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001f5a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f5e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	f000 80a1 	beq.w	80020ac <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f6a:	4b34      	ldr	r3, [pc, #208]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 030c 	and.w	r3, r3, #12
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d05c      	beq.n	8002030 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d141      	bne.n	8002002 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f7e:	4b31      	ldr	r3, [pc, #196]	@ (8002044 <HAL_RCC_OscConfig+0x478>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f84:	f7fe ff96 	bl	8000eb4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7fe ff92 	bl	8000eb4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e087      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f9e:	4b27      	ldr	r3, [pc, #156]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	69da      	ldr	r2, [r3, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a1b      	ldr	r3, [r3, #32]
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb8:	019b      	lsls	r3, r3, #6
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fc0:	085b      	lsrs	r3, r3, #1
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	041b      	lsls	r3, r3, #16
 8001fc6:	431a      	orrs	r2, r3
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	491b      	ldr	r1, [pc, #108]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8002044 <HAL_RCC_OscConfig+0x478>)
 8001fd6:	2201      	movs	r2, #1
 8001fd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fda:	f7fe ff6b 	bl	8000eb4 <HAL_GetTick>
 8001fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7fe ff67 	bl	8000eb4 <HAL_GetTick>
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e05c      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ff4:	4b11      	ldr	r3, [pc, #68]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x416>
 8002000:	e054      	b.n	80020ac <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002002:	4b10      	ldr	r3, [pc, #64]	@ (8002044 <HAL_RCC_OscConfig+0x478>)
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002008:	f7fe ff54 	bl	8000eb4 <HAL_GetTick>
 800200c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800200e:	e008      	b.n	8002022 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002010:	f7fe ff50 	bl	8000eb4 <HAL_GetTick>
 8002014:	4602      	mov	r2, r0
 8002016:	693b      	ldr	r3, [r7, #16]
 8002018:	1ad3      	subs	r3, r2, r3
 800201a:	2b02      	cmp	r3, #2
 800201c:	d901      	bls.n	8002022 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e045      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002022:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_RCC_OscConfig+0x470>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d1f0      	bne.n	8002010 <HAL_RCC_OscConfig+0x444>
 800202e:	e03d      	b.n	80020ac <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	699b      	ldr	r3, [r3, #24]
 8002034:	2b01      	cmp	r3, #1
 8002036:	d107      	bne.n	8002048 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e038      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
 800203c:	40023800 	.word	0x40023800
 8002040:	40007000 	.word	0x40007000
 8002044:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002048:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_RCC_OscConfig+0x4ec>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	699b      	ldr	r3, [r3, #24]
 8002052:	2b01      	cmp	r3, #1
 8002054:	d028      	beq.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002060:	429a      	cmp	r2, r3
 8002062:	d121      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800206e:	429a      	cmp	r2, r3
 8002070:	d11a      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002072:	68fa      	ldr	r2, [r7, #12]
 8002074:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002078:	4013      	ands	r3, r2
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800207e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002080:	4293      	cmp	r3, r2
 8002082:	d111      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800208e:	085b      	lsrs	r3, r3, #1
 8002090:	3b01      	subs	r3, #1
 8002092:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002094:	429a      	cmp	r2, r3
 8002096:	d107      	bne.n	80020a8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d001      	beq.n	80020ac <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800

080020bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b084      	sub	sp, #16
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d101      	bne.n	80020d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e0cc      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020d0:	4b68      	ldr	r3, [pc, #416]	@ (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d90c      	bls.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b65      	ldr	r3, [pc, #404]	@ (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e0:	683a      	ldr	r2, [r7, #0]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020e6:	4b63      	ldr	r3, [pc, #396]	@ (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	683a      	ldr	r2, [r7, #0]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d001      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0b8      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d020      	beq.n	8002146 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0304 	and.w	r3, r3, #4
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002110:	4b59      	ldr	r3, [pc, #356]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a58      	ldr	r2, [pc, #352]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800211a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0308 	and.w	r3, r3, #8
 8002124:	2b00      	cmp	r3, #0
 8002126:	d005      	beq.n	8002134 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002128:	4b53      	ldr	r3, [pc, #332]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	4a52      	ldr	r2, [pc, #328]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800212e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002132:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002134:	4b50      	ldr	r3, [pc, #320]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	494d      	ldr	r1, [pc, #308]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002142:	4313      	orrs	r3, r2
 8002144:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d044      	beq.n	80021dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	2b01      	cmp	r3, #1
 8002158:	d107      	bne.n	800216a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800215a:	4b47      	ldr	r3, [pc, #284]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d119      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e07f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d003      	beq.n	800217a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002176:	2b03      	cmp	r3, #3
 8002178:	d107      	bne.n	800218a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800217a:	4b3f      	ldr	r3, [pc, #252]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d109      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e06f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800218a:	4b3b      	ldr	r3, [pc, #236]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e067      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800219a:	4b37      	ldr	r3, [pc, #220]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	f023 0203 	bic.w	r2, r3, #3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	4934      	ldr	r1, [pc, #208]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021ac:	f7fe fe82 	bl	8000eb4 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b2:	e00a      	b.n	80021ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021b4:	f7fe fe7e 	bl	8000eb4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d901      	bls.n	80021ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021c6:	2303      	movs	r3, #3
 80021c8:	e04f      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021ca:	4b2b      	ldr	r3, [pc, #172]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	f003 020c 	and.w	r2, r3, #12
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	429a      	cmp	r2, r3
 80021da:	d1eb      	bne.n	80021b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021dc:	4b25      	ldr	r3, [pc, #148]	@ (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d20c      	bcs.n	8002204 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021ea:	4b22      	ldr	r3, [pc, #136]	@ (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021ec:	683a      	ldr	r2, [r7, #0]
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021f2:	4b20      	ldr	r3, [pc, #128]	@ (8002274 <HAL_RCC_ClockConfig+0x1b8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	683a      	ldr	r2, [r7, #0]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d001      	beq.n	8002204 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e032      	b.n	800226a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0304 	and.w	r3, r3, #4
 800220c:	2b00      	cmp	r3, #0
 800220e:	d008      	beq.n	8002222 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002210:	4b19      	ldr	r3, [pc, #100]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4916      	ldr	r1, [pc, #88]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800221e:	4313      	orrs	r3, r2
 8002220:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0308 	and.w	r3, r3, #8
 800222a:	2b00      	cmp	r3, #0
 800222c:	d009      	beq.n	8002242 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800222e:	4b12      	ldr	r3, [pc, #72]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	490e      	ldr	r1, [pc, #56]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002242:	f000 f821 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002246:	4602      	mov	r2, r0
 8002248:	4b0b      	ldr	r3, [pc, #44]	@ (8002278 <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	091b      	lsrs	r3, r3, #4
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	490a      	ldr	r1, [pc, #40]	@ (800227c <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	5ccb      	ldrb	r3, [r1, r3]
 8002256:	fa22 f303 	lsr.w	r3, r2, r3
 800225a:	4a09      	ldr	r2, [pc, #36]	@ (8002280 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800225e:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <HAL_RCC_ClockConfig+0x1c8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f7fe fde2 	bl	8000e2c <HAL_InitTick>

  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40023c00 	.word	0x40023c00
 8002278:	40023800 	.word	0x40023800
 800227c:	08006efc 	.word	0x08006efc
 8002280:	20000004 	.word	0x20000004
 8002284:	20000008 	.word	0x20000008

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800228c:	b094      	sub	sp, #80	@ 0x50
 800228e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002290:	2300      	movs	r3, #0
 8002292:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002294:	2300      	movs	r3, #0
 8002296:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002298:	2300      	movs	r3, #0
 800229a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800229c:	2300      	movs	r3, #0
 800229e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022a0:	4b79      	ldr	r3, [pc, #484]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 030c 	and.w	r3, r3, #12
 80022a8:	2b08      	cmp	r3, #8
 80022aa:	d00d      	beq.n	80022c8 <HAL_RCC_GetSysClockFreq+0x40>
 80022ac:	2b08      	cmp	r3, #8
 80022ae:	f200 80e1 	bhi.w	8002474 <HAL_RCC_GetSysClockFreq+0x1ec>
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d002      	beq.n	80022bc <HAL_RCC_GetSysClockFreq+0x34>
 80022b6:	2b04      	cmp	r3, #4
 80022b8:	d003      	beq.n	80022c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80022ba:	e0db      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022bc:	4b73      	ldr	r3, [pc, #460]	@ (800248c <HAL_RCC_GetSysClockFreq+0x204>)
 80022be:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022c0:	e0db      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022c2:	4b73      	ldr	r3, [pc, #460]	@ (8002490 <HAL_RCC_GetSysClockFreq+0x208>)
 80022c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022c6:	e0d8      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022d2:	4b6d      	ldr	r3, [pc, #436]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d063      	beq.n	80023a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022de:	4b6a      	ldr	r3, [pc, #424]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	099b      	lsrs	r3, r3, #6
 80022e4:	2200      	movs	r2, #0
 80022e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80022ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80022f2:	2300      	movs	r3, #0
 80022f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80022f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80022fa:	4622      	mov	r2, r4
 80022fc:	462b      	mov	r3, r5
 80022fe:	f04f 0000 	mov.w	r0, #0
 8002302:	f04f 0100 	mov.w	r1, #0
 8002306:	0159      	lsls	r1, r3, #5
 8002308:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800230c:	0150      	lsls	r0, r2, #5
 800230e:	4602      	mov	r2, r0
 8002310:	460b      	mov	r3, r1
 8002312:	4621      	mov	r1, r4
 8002314:	1a51      	subs	r1, r2, r1
 8002316:	6139      	str	r1, [r7, #16]
 8002318:	4629      	mov	r1, r5
 800231a:	eb63 0301 	sbc.w	r3, r3, r1
 800231e:	617b      	str	r3, [r7, #20]
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800232c:	4659      	mov	r1, fp
 800232e:	018b      	lsls	r3, r1, #6
 8002330:	4651      	mov	r1, sl
 8002332:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002336:	4651      	mov	r1, sl
 8002338:	018a      	lsls	r2, r1, #6
 800233a:	4651      	mov	r1, sl
 800233c:	ebb2 0801 	subs.w	r8, r2, r1
 8002340:	4659      	mov	r1, fp
 8002342:	eb63 0901 	sbc.w	r9, r3, r1
 8002346:	f04f 0200 	mov.w	r2, #0
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002352:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002356:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800235a:	4690      	mov	r8, r2
 800235c:	4699      	mov	r9, r3
 800235e:	4623      	mov	r3, r4
 8002360:	eb18 0303 	adds.w	r3, r8, r3
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	462b      	mov	r3, r5
 8002368:	eb49 0303 	adc.w	r3, r9, r3
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800237a:	4629      	mov	r1, r5
 800237c:	024b      	lsls	r3, r1, #9
 800237e:	4621      	mov	r1, r4
 8002380:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002384:	4621      	mov	r1, r4
 8002386:	024a      	lsls	r2, r1, #9
 8002388:	4610      	mov	r0, r2
 800238a:	4619      	mov	r1, r3
 800238c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800238e:	2200      	movs	r2, #0
 8002390:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002392:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002394:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002398:	f7fd ff6a 	bl	8000270 <__aeabi_uldivmod>
 800239c:	4602      	mov	r2, r0
 800239e:	460b      	mov	r3, r1
 80023a0:	4613      	mov	r3, r2
 80023a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023a4:	e058      	b.n	8002458 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a6:	4b38      	ldr	r3, [pc, #224]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	099b      	lsrs	r3, r3, #6
 80023ac:	2200      	movs	r2, #0
 80023ae:	4618      	mov	r0, r3
 80023b0:	4611      	mov	r1, r2
 80023b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023b6:	623b      	str	r3, [r7, #32]
 80023b8:	2300      	movs	r3, #0
 80023ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80023bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023c0:	4642      	mov	r2, r8
 80023c2:	464b      	mov	r3, r9
 80023c4:	f04f 0000 	mov.w	r0, #0
 80023c8:	f04f 0100 	mov.w	r1, #0
 80023cc:	0159      	lsls	r1, r3, #5
 80023ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d2:	0150      	lsls	r0, r2, #5
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4641      	mov	r1, r8
 80023da:	ebb2 0a01 	subs.w	sl, r2, r1
 80023de:	4649      	mov	r1, r9
 80023e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80023e4:	f04f 0200 	mov.w	r2, #0
 80023e8:	f04f 0300 	mov.w	r3, #0
 80023ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80023f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80023f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80023f8:	ebb2 040a 	subs.w	r4, r2, sl
 80023fc:	eb63 050b 	sbc.w	r5, r3, fp
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	f04f 0300 	mov.w	r3, #0
 8002408:	00eb      	lsls	r3, r5, #3
 800240a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800240e:	00e2      	lsls	r2, r4, #3
 8002410:	4614      	mov	r4, r2
 8002412:	461d      	mov	r5, r3
 8002414:	4643      	mov	r3, r8
 8002416:	18e3      	adds	r3, r4, r3
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	464b      	mov	r3, r9
 800241c:	eb45 0303 	adc.w	r3, r5, r3
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	f04f 0200 	mov.w	r2, #0
 8002426:	f04f 0300 	mov.w	r3, #0
 800242a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800242e:	4629      	mov	r1, r5
 8002430:	028b      	lsls	r3, r1, #10
 8002432:	4621      	mov	r1, r4
 8002434:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002438:	4621      	mov	r1, r4
 800243a:	028a      	lsls	r2, r1, #10
 800243c:	4610      	mov	r0, r2
 800243e:	4619      	mov	r1, r3
 8002440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002442:	2200      	movs	r2, #0
 8002444:	61bb      	str	r3, [r7, #24]
 8002446:	61fa      	str	r2, [r7, #28]
 8002448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800244c:	f7fd ff10 	bl	8000270 <__aeabi_uldivmod>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	4613      	mov	r3, r2
 8002456:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002458:	4b0b      	ldr	r3, [pc, #44]	@ (8002488 <HAL_RCC_GetSysClockFreq+0x200>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	0c1b      	lsrs	r3, r3, #16
 800245e:	f003 0303 	and.w	r3, r3, #3
 8002462:	3301      	adds	r3, #1
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002468:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800246a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800246c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002470:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002472:	e002      	b.n	800247a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002474:	4b05      	ldr	r3, [pc, #20]	@ (800248c <HAL_RCC_GetSysClockFreq+0x204>)
 8002476:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002478:	bf00      	nop
    }
  }
  return sysclockfreq;
 800247a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800247c:	4618      	mov	r0, r3
 800247e:	3750      	adds	r7, #80	@ 0x50
 8002480:	46bd      	mov	sp, r7
 8002482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002486:	bf00      	nop
 8002488:	40023800 	.word	0x40023800
 800248c:	00f42400 	.word	0x00f42400
 8002490:	007a1200 	.word	0x007a1200

08002494 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002498:	4b03      	ldr	r3, [pc, #12]	@ (80024a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800249a:	681b      	ldr	r3, [r3, #0]
}
 800249c:	4618      	mov	r0, r3
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	20000004 	.word	0x20000004

080024ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024b0:	f7ff fff0 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024b4:	4602      	mov	r2, r0
 80024b6:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	0a9b      	lsrs	r3, r3, #10
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	4903      	ldr	r1, [pc, #12]	@ (80024d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c2:	5ccb      	ldrb	r3, [r1, r3]
 80024c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40023800 	.word	0x40023800
 80024d0:	08006f0c 	.word	0x08006f0c

080024d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80024d8:	f7ff ffdc 	bl	8002494 <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0b5b      	lsrs	r3, r3, #13
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	@ (80024f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	08006f0c 	.word	0x08006f0c

080024fc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d101      	bne.n	800250e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800250a:	2301      	movs	r3, #1
 800250c:	e022      	b.n	8002554 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002514:	b2db      	uxtb	r3, r3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2200      	movs	r2, #0
 800251e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7fe fa41 	bl	80009a8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2203      	movs	r2, #3
 800252a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f000 f814 	bl	800255c <HAL_SD_InitCard>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e00a      	b.n	8002554 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800255c:	b5b0      	push	{r4, r5, r7, lr}
 800255e:	b08e      	sub	sp, #56	@ 0x38
 8002560:	af04      	add	r7, sp, #16
 8002562:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002564:	2300      	movs	r3, #0
 8002566:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002568:	2300      	movs	r3, #0
 800256a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8002574:	2300      	movs	r3, #0
 8002576:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8002578:	2376      	movs	r3, #118	@ 0x76
 800257a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681d      	ldr	r5, [r3, #0]
 8002580:	466c      	mov	r4, sp
 8002582:	f107 0314 	add.w	r3, r7, #20
 8002586:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800258a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800258e:	f107 0308 	add.w	r3, r7, #8
 8002592:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002594:	4628      	mov	r0, r5
 8002596:	f002 f8c7 	bl	8004728 <SDIO_Init>
 800259a:	4603      	mov	r3, r0
 800259c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80025a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e04f      	b.n	800264c <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80025ac:	4b29      	ldr	r3, [pc, #164]	@ (8002654 <HAL_SD_InitCard+0xf8>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4618      	mov	r0, r3
 80025b8:	f002 f8ff 	bl	80047ba <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80025bc:	4b25      	ldr	r3, [pc, #148]	@ (8002654 <HAL_SD_InitCard+0xf8>)
 80025be:	2201      	movs	r2, #1
 80025c0:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80025c2:	2002      	movs	r0, #2
 80025c4:	f7fe fc82 	bl	8000ecc <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f000 ff13 	bl	80033f4 <SD_PowerON>
 80025ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025d0:	6a3b      	ldr	r3, [r7, #32]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00b      	beq.n	80025ee <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e02e      	b.n	800264c <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fe32 	bl	8003258 <SD_InitCard>
 80025f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00b      	beq.n	8002614 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002608:	6a3b      	ldr	r3, [r7, #32]
 800260a:	431a      	orrs	r2, r3
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e01b      	b.n	800264c <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800261c:	4618      	mov	r0, r3
 800261e:	f002 f95e 	bl	80048de <SDMMC_CmdBlockLength>
 8002622:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00f      	beq.n	800264a <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a0a      	ldr	r2, [pc, #40]	@ (8002658 <HAL_SD_InitCard+0xfc>)
 8002630:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	431a      	orrs	r2, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3728      	adds	r7, #40	@ 0x28
 8002650:	46bd      	mov	sp, r7
 8002652:	bdb0      	pop	{r4, r5, r7, pc}
 8002654:	422580a0 	.word	0x422580a0
 8002658:	004005ff 	.word	0x004005ff

0800265c <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b092      	sub	sp, #72	@ 0x48
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
 8002668:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800266a:	f7fe fc23 	bl	8000eb4 <HAL_GetTick>
 800266e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d107      	bne.n	800268e <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002682:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e1c5      	b.n	8002a1a <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002694:	b2db      	uxtb	r3, r3
 8002696:	2b01      	cmp	r3, #1
 8002698:	f040 81b8 	bne.w	8002a0c <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80026a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	441a      	add	r2, r3
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d907      	bls.n	80026c0 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b4:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e1ac      	b.n	8002a1a <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2203      	movs	r2, #3
 80026c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	2200      	movs	r2, #0
 80026ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d002      	beq.n	80026de <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80026d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80026da:	025b      	lsls	r3, r3, #9
 80026dc:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295
 80026e2:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	025b      	lsls	r3, r3, #9
 80026e8:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80026ea:	2390      	movs	r3, #144	@ 0x90
 80026ec:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80026ee:	2302      	movs	r3, #2
 80026f0:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80026f6:	2301      	movs	r3, #1
 80026f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f107 0214 	add.w	r2, r7, #20
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f002 f8be 	bl	8004886 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d90a      	bls.n	8002726 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2202      	movs	r2, #2
 8002714:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800271c:	4618      	mov	r0, r3
 800271e:	f002 f922 	bl	8004966 <SDMMC_CmdReadMultiBlock>
 8002722:	6478      	str	r0, [r7, #68]	@ 0x44
 8002724:	e009      	b.n	800273a <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2201      	movs	r2, #1
 800272a:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002732:	4618      	mov	r0, r3
 8002734:	f002 f8f5 	bl	8004922 <SDMMC_CmdReadSingleBlock>
 8002738:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800273a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800273c:	2b00      	cmp	r3, #0
 800273e:	d012      	beq.n	8002766 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a7e      	ldr	r2, [pc, #504]	@ (8002940 <HAL_SD_ReadBlocks+0x2e4>)
 8002746:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800274c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800274e:	431a      	orrs	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	2200      	movs	r2, #0
 8002760:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e159      	b.n	8002a1a <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800276a:	e061      	b.n	8002830 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002772:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d03c      	beq.n	80027f4 <HAL_SD_ReadBlocks+0x198>
 800277a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800277c:	2b00      	cmp	r3, #0
 800277e:	d039      	beq.n	80027f4 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002780:	2300      	movs	r3, #0
 8002782:	643b      	str	r3, [r7, #64]	@ 0x40
 8002784:	e033      	b.n	80027ee <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f001 fff7 	bl	800477e <SDIO_ReadFIFO>
 8002790:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002792:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002794:	b2da      	uxtb	r2, r3
 8002796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002798:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800279a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800279c:	3301      	adds	r3, #1
 800279e:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a2:	3b01      	subs	r3, #1
 80027a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80027a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027a8:	0a1b      	lsrs	r3, r3, #8
 80027aa:	b2da      	uxtb	r2, r3
 80027ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ae:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80027b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027b2:	3301      	adds	r3, #1
 80027b4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027b8:	3b01      	subs	r3, #1
 80027ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80027bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027be:	0c1b      	lsrs	r3, r3, #16
 80027c0:	b2da      	uxtb	r2, r3
 80027c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80027c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c8:	3301      	adds	r3, #1
 80027ca:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ce:	3b01      	subs	r3, #1
 80027d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80027d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d4:	0e1b      	lsrs	r3, r3, #24
 80027d6:	b2da      	uxtb	r2, r3
 80027d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027da:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80027dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027de:	3301      	adds	r3, #1
 80027e0:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027e4:	3b01      	subs	r3, #1
 80027e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 80027e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ea:	3301      	adds	r3, #1
 80027ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80027ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f0:	2b07      	cmp	r3, #7
 80027f2:	d9c8      	bls.n	8002786 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80027f4:	f7fe fb5e 	bl	8000eb4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002800:	429a      	cmp	r2, r3
 8002802:	d902      	bls.n	800280a <HAL_SD_ReadBlocks+0x1ae>
 8002804:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002806:	2b00      	cmp	r3, #0
 8002808:	d112      	bne.n	8002830 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a4c      	ldr	r2, [pc, #304]	@ (8002940 <HAL_SD_ReadBlocks+0x2e4>)
 8002810:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002816:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	2200      	movs	r2, #0
 800282a:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e0f4      	b.n	8002a1a <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002836:	f240 332a 	movw	r3, #810	@ 0x32a
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d095      	beq.n	800276c <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002846:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284a:	2b00      	cmp	r3, #0
 800284c:	d022      	beq.n	8002894 <HAL_SD_ReadBlocks+0x238>
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	2b01      	cmp	r3, #1
 8002852:	d91f      	bls.n	8002894 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002858:	2b03      	cmp	r3, #3
 800285a:	d01b      	beq.n	8002894 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f002 f8e7 	bl	8004a34 <SDMMC_CmdStopTransfer>
 8002866:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800286a:	2b00      	cmp	r3, #0
 800286c:	d012      	beq.n	8002894 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a33      	ldr	r2, [pc, #204]	@ (8002940 <HAL_SD_ReadBlocks+0x2e4>)
 8002874:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800287a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800287c:	431a      	orrs	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e0c2      	b.n	8002a1a <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <HAL_SD_ReadBlocks+0x254>
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d012      	beq.n	80028d6 <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a22      	ldr	r2, [pc, #136]	@ (8002940 <HAL_SD_ReadBlocks+0x2e4>)
 80028b6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028bc:	f043 0208 	orr.w	r2, r3, #8
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e0a1      	b.n	8002a1a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d012      	beq.n	800290a <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a15      	ldr	r2, [pc, #84]	@ (8002940 <HAL_SD_ReadBlocks+0x2e4>)
 80028ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f0:	f043 0202 	orr.w	r2, r3, #2
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e087      	b.n	8002a1a <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b00      	cmp	r3, #0
 8002916:	d064      	beq.n	80029e2 <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a08      	ldr	r2, [pc, #32]	@ (8002940 <HAL_SD_ReadBlocks+0x2e4>)
 800291e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002924:	f043 0220 	orr.w	r2, r3, #32
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e06d      	b.n	8002a1a <HAL_SD_ReadBlocks+0x3be>
 800293e:	bf00      	nop
 8002940:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f001 ff18 	bl	800477e <SDIO_ReadFIFO>
 800294e:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002950:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002952:	b2da      	uxtb	r2, r3
 8002954:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002956:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002958:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800295a:	3301      	adds	r3, #1
 800295c:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800295e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002960:	3b01      	subs	r3, #1
 8002962:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002966:	0a1b      	lsrs	r3, r3, #8
 8002968:	b2da      	uxtb	r2, r3
 800296a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800296c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800296e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002970:	3301      	adds	r3, #1
 8002972:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002974:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002976:	3b01      	subs	r3, #1
 8002978:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800297a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297c:	0c1b      	lsrs	r3, r3, #16
 800297e:	b2da      	uxtb	r2, r3
 8002980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002982:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002986:	3301      	adds	r3, #1
 8002988:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800298a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800298c:	3b01      	subs	r3, #1
 800298e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002990:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002992:	0e1b      	lsrs	r3, r3, #24
 8002994:	b2da      	uxtb	r2, r3
 8002996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002998:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800299a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800299c:	3301      	adds	r3, #1
 800299e:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80029a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029a2:	3b01      	subs	r3, #1
 80029a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80029a6:	f7fe fa85 	bl	8000eb4 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d902      	bls.n	80029bc <HAL_SD_ReadBlocks+0x360>
 80029b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d112      	bne.n	80029e2 <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a18      	ldr	r2, [pc, #96]	@ (8002a24 <HAL_SD_ReadBlocks+0x3c8>)
 80029c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e01b      	b.n	8002a1a <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d002      	beq.n	80029f6 <HAL_SD_ReadBlocks+0x39a>
 80029f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d1a6      	bne.n	8002944 <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f240 523a 	movw	r2, #1338	@ 0x53a
 80029fe:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	e006      	b.n	8002a1a <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a10:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
  }
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3748      	adds	r7, #72	@ 0x48
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	004005ff 	.word	0x004005ff

08002a28 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b092      	sub	sp, #72	@ 0x48
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002a36:	f7fe fa3d 	bl	8000eb4 <HAL_GetTick>
 8002a3a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d107      	bne.n	8002a5a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a4e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e16d      	b.n	8002d36 <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	f040 8160 	bne.w	8002d28 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002a6e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	441a      	add	r2, r3
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a78:	429a      	cmp	r2, r3
 8002a7a:	d907      	bls.n	8002a8c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a80:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	e154      	b.n	8002d36 <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d002      	beq.n	8002aaa <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002aa6:	025b      	lsls	r3, r3, #9
 8002aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002aaa:	f04f 33ff 	mov.w	r3, #4294967295
 8002aae:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	025b      	lsls	r3, r3, #9
 8002ab4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ab6:	2390      	movs	r3, #144	@ 0x90
 8002ab8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002aba:	2300      	movs	r3, #0
 8002abc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f107 0218 	add.w	r2, r7, #24
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f001 fed8 	bl	8004886 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d90a      	bls.n	8002af2 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	2220      	movs	r2, #32
 8002ae0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f001 ff80 	bl	80049ee <SDMMC_CmdWriteMultiBlock>
 8002aee:	6478      	str	r0, [r7, #68]	@ 0x44
 8002af0:	e009      	b.n	8002b06 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	2210      	movs	r2, #16
 8002af6:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002afe:	4618      	mov	r0, r3
 8002b00:	f001 ff53 	bl	80049aa <SDMMC_CmdWriteSingleBlock>
 8002b04:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b06:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d012      	beq.n	8002b32 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a8b      	ldr	r2, [pc, #556]	@ (8002d40 <HAL_SD_WriteBlocks+0x318>)
 8002b12:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e101      	b.n	8002d36 <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002b36:	e065      	b.n	8002c04 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d040      	beq.n	8002bc8 <HAL_SD_WriteBlocks+0x1a0>
 8002b46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d03d      	beq.n	8002bc8 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b50:	e037      	b.n	8002bc2 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b60:	3b01      	subs	r3, #1
 8002b62:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	021a      	lsls	r2, r3, #8
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b72:	3301      	adds	r3, #1
 8002b74:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b78:	3b01      	subs	r3, #1
 8002b7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002b7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	041a      	lsls	r2, r3, #16
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8a:	3301      	adds	r3, #1
 8002b8c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b90:	3b01      	subs	r3, #1
 8002b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	061a      	lsls	r2, r3, #24
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002ba0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002ba6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ba8:	3b01      	subs	r3, #1
 8002baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f107 0214 	add.w	r2, r7, #20
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 fdee 	bl	8004798 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002bbc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bc4:	2b07      	cmp	r3, #7
 8002bc6:	d9c4      	bls.n	8002b52 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002bc8:	f7fe f974 	bl	8000eb4 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d902      	bls.n	8002bde <HAL_SD_WriteBlocks+0x1b6>
 8002bd8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d112      	bne.n	8002c04 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a57      	ldr	r2, [pc, #348]	@ (8002d40 <HAL_SD_WriteBlocks+0x318>)
 8002be4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002bea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bec:	431a      	orrs	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e098      	b.n	8002d36 <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c0a:	f240 331a 	movw	r3, #794	@ 0x31a
 8002c0e:	4013      	ands	r3, r2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d091      	beq.n	8002b38 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d022      	beq.n	8002c68 <HAL_SD_WriteBlocks+0x240>
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d91f      	bls.n	8002c68 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	d01b      	beq.n	8002c68 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f001 fefd 	bl	8004a34 <SDMMC_CmdStopTransfer>
 8002c3a:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002c3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d012      	beq.n	8002c68 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a3e      	ldr	r2, [pc, #248]	@ (8002d40 <HAL_SD_WriteBlocks+0x318>)
 8002c48:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c50:	431a      	orrs	r2, r3
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2201      	movs	r2, #1
 8002c5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	2200      	movs	r2, #0
 8002c62:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e066      	b.n	8002d36 <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c6e:	f003 0308 	and.w	r3, r3, #8
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d106      	bne.n	8002c84 <HAL_SD_WriteBlocks+0x25c>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d012      	beq.n	8002caa <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a2d      	ldr	r2, [pc, #180]	@ (8002d40 <HAL_SD_WriteBlocks+0x318>)
 8002c8a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c90:	f043 0208 	orr.w	r2, r3, #8
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e045      	b.n	8002d36 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d012      	beq.n	8002cde <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a20      	ldr	r2, [pc, #128]	@ (8002d40 <HAL_SD_WriteBlocks+0x318>)
 8002cbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cc4:	f043 0202 	orr.w	r2, r3, #2
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e02b      	b.n	8002d36 <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ce4:	f003 0310 	and.w	r3, r3, #16
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d012      	beq.n	8002d12 <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a13      	ldr	r2, [pc, #76]	@ (8002d40 <HAL_SD_WriteBlocks+0x318>)
 8002cf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf8:	f043 0210 	orr.w	r2, r3, #16
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e011      	b.n	8002d36 <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002d1a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e006      	b.n	8002d36 <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d2c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
  }
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3748      	adds	r7, #72	@ 0x48
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	004005ff 	.word	0x004005ff

08002d44 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
 8002d4c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d52:	0f9b      	lsrs	r3, r3, #30
 8002d54:	b2da      	uxtb	r2, r3
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d5e:	0e9b      	lsrs	r3, r3, #26
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	f003 030f 	and.w	r3, r3, #15
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d70:	0e1b      	lsrs	r3, r3, #24
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d82:	0c1b      	lsrs	r3, r3, #16
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d8e:	0a1b      	lsrs	r3, r3, #8
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d9a:	b2da      	uxtb	r2, r3
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002da4:	0d1b      	lsrs	r3, r3, #20
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	f003 030f 	and.w	r3, r3, #15
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dc2:	0bdb      	lsrs	r3, r3, #15
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	b2da      	uxtb	r2, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dd4:	0b9b      	lsrs	r3, r3, #14
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	f003 0301 	and.w	r3, r3, #1
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002de6:	0b5b      	lsrs	r3, r3, #13
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	b2da      	uxtb	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002df8:	0b1b      	lsrs	r3, r3, #12
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d163      	bne.n	8002edc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e18:	009a      	lsls	r2, r3, #2
 8002e1a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e1e:	4013      	ands	r3, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002e24:	0f92      	lsrs	r2, r2, #30
 8002e26:	431a      	orrs	r2, r3
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e30:	0edb      	lsrs	r3, r3, #27
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	b2da      	uxtb	r2, r3
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e42:	0e1b      	lsrs	r3, r3, #24
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	f003 0307 	and.w	r3, r3, #7
 8002e4a:	b2da      	uxtb	r2, r3
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e54:	0d5b      	lsrs	r3, r3, #21
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	f003 0307 	and.w	r3, r3, #7
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e66:	0c9b      	lsrs	r3, r3, #18
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	f003 0307 	and.w	r3, r3, #7
 8002e6e:	b2da      	uxtb	r2, r3
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e78:	0bdb      	lsrs	r3, r3, #15
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	b2da      	uxtb	r2, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	1c5a      	adds	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	7e1b      	ldrb	r3, [r3, #24]
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	3302      	adds	r3, #2
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002ea6:	fb03 f202 	mul.w	r2, r3, r2
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	7a1b      	ldrb	r3, [r3, #8]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	f003 030f 	and.w	r3, r3, #15
 8002eb8:	2201      	movs	r2, #1
 8002eba:	409a      	lsls	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec4:	687a      	ldr	r2, [r7, #4]
 8002ec6:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ec8:	0a52      	lsrs	r2, r2, #9
 8002eca:	fb03 f202 	mul.w	r2, r3, r2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ed8:	661a      	str	r2, [r3, #96]	@ 0x60
 8002eda:	e031      	b.n	8002f40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d11d      	bne.n	8002f20 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002ee8:	041b      	lsls	r3, r3, #16
 8002eea:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ef2:	0c1b      	lsrs	r3, r3, #16
 8002ef4:	431a      	orrs	r2, r3
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	691b      	ldr	r3, [r3, #16]
 8002efe:	3301      	adds	r3, #1
 8002f00:	029a      	lsls	r2, r3, #10
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f14:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f1e:	e00f      	b.n	8002f40 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a58      	ldr	r2, [pc, #352]	@ (8003088 <HAL_SD_GetCardCSD+0x344>)
 8002f26:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f2c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e09d      	b.n	800307c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f44:	0b9b      	lsrs	r3, r3, #14
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	f003 0301 	and.w	r3, r3, #1
 8002f4c:	b2da      	uxtb	r2, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f56:	09db      	lsrs	r3, r3, #7
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f6e:	b2da      	uxtb	r2, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f78:	0fdb      	lsrs	r3, r3, #31
 8002f7a:	b2da      	uxtb	r2, r3
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f84:	0f5b      	lsrs	r3, r3, #29
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f96:	0e9b      	lsrs	r3, r3, #26
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	f003 0307 	and.w	r3, r3, #7
 8002f9e:	b2da      	uxtb	r2, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa8:	0d9b      	lsrs	r3, r3, #22
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	f003 030f 	and.w	r3, r3, #15
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fba:	0d5b      	lsrs	r3, r3, #21
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd6:	0c1b      	lsrs	r3, r3, #16
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fea:	0bdb      	lsrs	r3, r3, #15
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	0b9b      	lsrs	r3, r3, #14
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	b2da      	uxtb	r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003012:	0b5b      	lsrs	r3, r3, #13
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	b2da      	uxtb	r2, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	0b1b      	lsrs	r3, r3, #12
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	0a9b      	lsrs	r3, r3, #10
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	b2da      	uxtb	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	0a1b      	lsrs	r3, r3, #8
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 0303 	and.w	r3, r3, #3
 8003056:	b2da      	uxtb	r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800306a:	b2da      	uxtb	r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	2201      	movs	r2, #1
 8003076:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 800307a:	2300      	movs	r3, #0
}
 800307c:	4618      	mov	r0, r3
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	004005ff 	.word	0x004005ff

0800308c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
 8003094:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	370c      	adds	r7, #12
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr

080030e4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80030e4:	b5b0      	push	{r4, r5, r7, lr}
 80030e6:	b08e      	sub	sp, #56	@ 0x38
 80030e8:	af04      	add	r7, sp, #16
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2203      	movs	r2, #3
 80030f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003100:	2b03      	cmp	r3, #3
 8003102:	d02e      	beq.n	8003162 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800310a:	d106      	bne.n	800311a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003110:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	639a      	str	r2, [r3, #56]	@ 0x38
 8003118:	e029      	b.n	800316e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003120:	d10a      	bne.n	8003138 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 fa1c 	bl	8003560 <SD_WideBus_Enable>
 8003128:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	431a      	orrs	r2, r3
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	639a      	str	r2, [r3, #56]	@ 0x38
 8003136:	e01a      	b.n	800316e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d10a      	bne.n	8003154 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fa59 	bl	80035f6 <SD_WideBus_Disable>
 8003144:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	431a      	orrs	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	639a      	str	r2, [r3, #56]	@ 0x38
 8003152:	e00c      	b.n	800316e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003158:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003160:	e005      	b.n	800316e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003166:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00b      	beq.n	800318e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a26      	ldr	r2, [pc, #152]	@ (8003214 <HAL_SD_ConfigWideBusOperation+0x130>)
 800317c:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800318c:	e01f      	b.n	80031ce <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	699b      	ldr	r3, [r3, #24]
 80031ae:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681d      	ldr	r5, [r3, #0]
 80031b4:	466c      	mov	r4, sp
 80031b6:	f107 0314 	add.w	r3, r7, #20
 80031ba:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031c2:	f107 0308 	add.w	r3, r7, #8
 80031c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031c8:	4628      	mov	r0, r5
 80031ca:	f001 faad 	bl	8004728 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031d6:	4618      	mov	r0, r3
 80031d8:	f001 fb81 	bl	80048de <SDMMC_CmdBlockLength>
 80031dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80031de:	6a3b      	ldr	r3, [r7, #32]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00c      	beq.n	80031fe <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a0a      	ldr	r2, [pc, #40]	@ (8003214 <HAL_SD_ConfigWideBusOperation+0x130>)
 80031ea:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80031f0:	6a3b      	ldr	r3, [r7, #32]
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 8003206:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800320a:	4618      	mov	r0, r3
 800320c:	3728      	adds	r7, #40	@ 0x28
 800320e:	46bd      	mov	sp, r7
 8003210:	bdb0      	pop	{r4, r5, r7, pc}
 8003212:	bf00      	nop
 8003214:	004005ff 	.word	0x004005ff

08003218 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003220:	2300      	movs	r3, #0
 8003222:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8003224:	f107 030c 	add.w	r3, r7, #12
 8003228:	4619      	mov	r1, r3
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f000 f970 	bl	8003510 <SD_SendStatus>
 8003230:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	431a      	orrs	r2, r3
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	0a5b      	lsrs	r3, r3, #9
 8003248:	f003 030f 	and.w	r3, r3, #15
 800324c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800324e:	693b      	ldr	r3, [r7, #16]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003258:	b5b0      	push	{r4, r5, r7, lr}
 800325a:	b094      	sub	sp, #80	@ 0x50
 800325c:	af04      	add	r7, sp, #16
 800325e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003260:	2301      	movs	r3, #1
 8003262:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4618      	mov	r0, r3
 800326a:	f001 fab4 	bl	80047d6 <SDIO_GetPowerState>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d102      	bne.n	800327a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003274:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8003278:	e0b8      	b.n	80033ec <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800327e:	2b03      	cmp	r3, #3
 8003280:	d02f      	beq.n	80032e2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f001 fcde 	bl	8004c48 <SDMMC_CmdSendCID>
 800328c:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800328e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003290:	2b00      	cmp	r3, #0
 8003292:	d001      	beq.n	8003298 <SD_InitCard+0x40>
    {
      return errorstate;
 8003294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003296:	e0a9      	b.n	80033ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2100      	movs	r1, #0
 800329e:	4618      	mov	r0, r3
 80032a0:	f001 fade 	bl	8004860 <SDIO_GetResponse>
 80032a4:	4602      	mov	r2, r0
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2104      	movs	r1, #4
 80032b0:	4618      	mov	r0, r3
 80032b2:	f001 fad5 	bl	8004860 <SDIO_GetResponse>
 80032b6:	4602      	mov	r2, r0
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2108      	movs	r1, #8
 80032c2:	4618      	mov	r0, r3
 80032c4:	f001 facc 	bl	8004860 <SDIO_GetResponse>
 80032c8:	4602      	mov	r2, r0
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	210c      	movs	r1, #12
 80032d4:	4618      	mov	r0, r3
 80032d6:	f001 fac3 	bl	8004860 <SDIO_GetResponse>
 80032da:	4602      	mov	r2, r0
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d00d      	beq.n	8003306 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f107 020e 	add.w	r2, r7, #14
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 fce4 	bl	8004cc2 <SDMMC_CmdSetRelAdd>
 80032fa:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80032fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <SD_InitCard+0xae>
    {
      return errorstate;
 8003302:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003304:	e072      	b.n	80033ec <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330a:	2b03      	cmp	r3, #3
 800330c:	d036      	beq.n	800337c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800330e:	89fb      	ldrh	r3, [r7, #14]
 8003310:	461a      	mov	r2, r3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681a      	ldr	r2, [r3, #0]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f001 fcae 	bl	8004c84 <SDMMC_CmdSendCSD>
 8003328:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800332a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d001      	beq.n	8003334 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003332:	e05b      	b.n	80033ec <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	2100      	movs	r1, #0
 800333a:	4618      	mov	r0, r3
 800333c:	f001 fa90 	bl	8004860 <SDIO_GetResponse>
 8003340:	4602      	mov	r2, r0
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2104      	movs	r1, #4
 800334c:	4618      	mov	r0, r3
 800334e:	f001 fa87 	bl	8004860 <SDIO_GetResponse>
 8003352:	4602      	mov	r2, r0
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2108      	movs	r1, #8
 800335e:	4618      	mov	r0, r3
 8003360:	f001 fa7e 	bl	8004860 <SDIO_GetResponse>
 8003364:	4602      	mov	r2, r0
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	210c      	movs	r1, #12
 8003370:	4618      	mov	r0, r3
 8003372:	f001 fa75 	bl	8004860 <SDIO_GetResponse>
 8003376:	4602      	mov	r2, r0
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2104      	movs	r1, #4
 8003382:	4618      	mov	r0, r3
 8003384:	f001 fa6c 	bl	8004860 <SDIO_GetResponse>
 8003388:	4603      	mov	r3, r0
 800338a:	0d1a      	lsrs	r2, r3, #20
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003390:	f107 0310 	add.w	r3, r7, #16
 8003394:	4619      	mov	r1, r3
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7ff fcd4 	bl	8002d44 <HAL_SD_GetCardCSD>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033a2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80033a6:	e021      	b.n	80033ec <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6819      	ldr	r1, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033b0:	041b      	lsls	r3, r3, #16
 80033b2:	2200      	movs	r2, #0
 80033b4:	461c      	mov	r4, r3
 80033b6:	4615      	mov	r5, r2
 80033b8:	4622      	mov	r2, r4
 80033ba:	462b      	mov	r3, r5
 80033bc:	4608      	mov	r0, r1
 80033be:	f001 fb5b 	bl	8004a78 <SDMMC_CmdSelDesel>
 80033c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80033c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <SD_InitCard+0x176>
  {
    return errorstate;
 80033ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033cc:	e00e      	b.n	80033ec <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681d      	ldr	r5, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	466c      	mov	r4, sp
 80033d6:	f103 0210 	add.w	r2, r3, #16
 80033da:	ca07      	ldmia	r2, {r0, r1, r2}
 80033dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80033e0:	3304      	adds	r3, #4
 80033e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033e4:	4628      	mov	r0, r5
 80033e6:	f001 f99f 	bl	8004728 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3740      	adds	r7, #64	@ 0x40
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bdb0      	pop	{r4, r5, r7, pc}

080033f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b086      	sub	sp, #24
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80033fc:	2300      	movs	r3, #0
 80033fe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003400:	2300      	movs	r3, #0
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	2300      	movs	r3, #0
 8003406:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fb56 	bl	8004abe <SDMMC_CmdGoIdleState>
 8003412:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <SD_PowerON+0x2a>
  {
    return errorstate;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	e072      	b.n	8003504 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4618      	mov	r0, r3
 8003424:	f001 fb69 	bl	8004afa <SDMMC_CmdOperCond>
 8003428:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d00d      	beq.n	800344c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f001 fb3f 	bl	8004abe <SDMMC_CmdGoIdleState>
 8003440:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d004      	beq.n	8003452 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	e05b      	b.n	8003504 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003456:	2b01      	cmp	r3, #1
 8003458:	d137      	bne.n	80034ca <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2100      	movs	r1, #0
 8003460:	4618      	mov	r0, r3
 8003462:	f001 fb69 	bl	8004b38 <SDMMC_CmdAppCommand>
 8003466:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02d      	beq.n	80034ca <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800346e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8003472:	e047      	b.n	8003504 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f001 fb5c 	bl	8004b38 <SDMMC_CmdAppCommand>
 8003480:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d001      	beq.n	800348c <SD_PowerON+0x98>
    {
      return errorstate;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	e03b      	b.n	8003504 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	491e      	ldr	r1, [pc, #120]	@ (800350c <SD_PowerON+0x118>)
 8003492:	4618      	mov	r0, r3
 8003494:	f001 fb72 	bl	8004b7c <SDMMC_CmdAppOperCommand>
 8003498:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d002      	beq.n	80034a6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80034a0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80034a4:	e02e      	b.n	8003504 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2100      	movs	r1, #0
 80034ac:	4618      	mov	r0, r3
 80034ae:	f001 f9d7 	bl	8004860 <SDIO_GetResponse>
 80034b2:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	0fdb      	lsrs	r3, r3, #31
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d101      	bne.n	80034c0 <SD_PowerON+0xcc>
 80034bc:	2301      	movs	r3, #1
 80034be:	e000      	b.n	80034c2 <SD_PowerON+0xce>
 80034c0:	2300      	movs	r3, #0
 80034c2:	613b      	str	r3, [r7, #16]

    count++;
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	3301      	adds	r3, #1
 80034c8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d802      	bhi.n	80034da <SD_PowerON+0xe6>
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0cc      	beq.n	8003474 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d902      	bls.n	80034ea <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80034e4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034e8:	e00c      	b.n	8003504 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d003      	beq.n	80034fc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	645a      	str	r2, [r3, #68]	@ 0x44
 80034fa:	e002      	b.n	8003502 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2200      	movs	r2, #0
 8003500:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003502:	2300      	movs	r3, #0
}
 8003504:	4618      	mov	r0, r3
 8003506:	3718      	adds	r7, #24
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	c1100000 	.word	0xc1100000

08003510 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
 8003518:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d102      	bne.n	8003526 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003520:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003524:	e018      	b.n	8003558 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800352e:	041b      	lsls	r3, r3, #16
 8003530:	4619      	mov	r1, r3
 8003532:	4610      	mov	r0, r2
 8003534:	f001 fbe6 	bl	8004d04 <SDMMC_CmdSendStatus>
 8003538:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d001      	beq.n	8003544 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	e009      	b.n	8003558 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2100      	movs	r1, #0
 800354a:	4618      	mov	r0, r3
 800354c:	f001 f988 	bl	8004860 <SDIO_GetResponse>
 8003550:	4602      	mov	r2, r0
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3710      	adds	r7, #16
 800355c:	46bd      	mov	sp, r7
 800355e:	bd80      	pop	{r7, pc}

08003560 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b086      	sub	sp, #24
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003568:	2300      	movs	r3, #0
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	2300      	movs	r3, #0
 800356e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2100      	movs	r1, #0
 8003576:	4618      	mov	r0, r3
 8003578:	f001 f972 	bl	8004860 <SDIO_GetResponse>
 800357c:	4603      	mov	r3, r0
 800357e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003582:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003586:	d102      	bne.n	800358e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003588:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800358c:	e02f      	b.n	80035ee <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800358e:	f107 030c 	add.w	r3, r7, #12
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f000 f879 	bl	800368c <SD_FindSCR>
 800359a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d001      	beq.n	80035a6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	e023      	b.n	80035ee <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d01c      	beq.n	80035ea <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035b8:	041b      	lsls	r3, r3, #16
 80035ba:	4619      	mov	r1, r3
 80035bc:	4610      	mov	r0, r2
 80035be:	f001 fabb 	bl	8004b38 <SDMMC_CmdAppCommand>
 80035c2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	e00f      	b.n	80035ee <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2102      	movs	r1, #2
 80035d4:	4618      	mov	r0, r3
 80035d6:	f001 faf4 	bl	8004bc2 <SDMMC_CmdBusWidth>
 80035da:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d001      	beq.n	80035e6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	e003      	b.n	80035ee <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80035e6:	2300      	movs	r3, #0
 80035e8:	e001      	b.n	80035ee <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80035ea:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b086      	sub	sp, #24
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	2300      	movs	r3, #0
 8003604:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	2100      	movs	r1, #0
 800360c:	4618      	mov	r0, r3
 800360e:	f001 f927 	bl	8004860 <SDIO_GetResponse>
 8003612:	4603      	mov	r3, r0
 8003614:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003618:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800361c:	d102      	bne.n	8003624 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800361e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8003622:	e02f      	b.n	8003684 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003624:	f107 030c 	add.w	r3, r7, #12
 8003628:	4619      	mov	r1, r3
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 f82e 	bl	800368c <SD_FindSCR>
 8003630:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	e023      	b.n	8003684 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d01c      	beq.n	8003680 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800364e:	041b      	lsls	r3, r3, #16
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f001 fa70 	bl	8004b38 <SDMMC_CmdAppCommand>
 8003658:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	e00f      	b.n	8003684 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2100      	movs	r1, #0
 800366a:	4618      	mov	r0, r3
 800366c:	f001 faa9 	bl	8004bc2 <SDMMC_CmdBusWidth>
 8003670:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003672:	697b      	ldr	r3, [r7, #20]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	e003      	b.n	8003684 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800367c:	2300      	movs	r3, #0
 800367e:	e001      	b.n	8003684 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003680:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003684:	4618      	mov	r0, r3
 8003686:	3718      	adds	r7, #24
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800368c:	b590      	push	{r4, r7, lr}
 800368e:	b08f      	sub	sp, #60	@ 0x3c
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003696:	f7fd fc0d 	bl	8000eb4 <HAL_GetTick>
 800369a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 800369c:	2300      	movs	r3, #0
 800369e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80036a0:	2300      	movs	r3, #0
 80036a2:	60bb      	str	r3, [r7, #8]
 80036a4:	2300      	movs	r3, #0
 80036a6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2108      	movs	r1, #8
 80036b2:	4618      	mov	r0, r3
 80036b4:	f001 f913 	bl	80048de <SDMMC_CmdBlockLength>
 80036b8:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80036ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80036c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036c2:	e0b9      	b.n	8003838 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036cc:	041b      	lsls	r3, r3, #16
 80036ce:	4619      	mov	r1, r3
 80036d0:	4610      	mov	r0, r2
 80036d2:	f001 fa31 	bl	8004b38 <SDMMC_CmdAppCommand>
 80036d6:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80036d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <SD_FindSCR+0x56>
  {
    return errorstate;
 80036de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e0:	e0aa      	b.n	8003838 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295
 80036e6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80036e8:	2308      	movs	r3, #8
 80036ea:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80036ec:	2330      	movs	r3, #48	@ 0x30
 80036ee:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80036f0:	2302      	movs	r3, #2
 80036f2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80036f8:	2301      	movs	r3, #1
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f107 0210 	add.w	r2, r7, #16
 8003704:	4611      	mov	r1, r2
 8003706:	4618      	mov	r0, r3
 8003708:	f001 f8bd 	bl	8004886 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f001 fa78 	bl	8004c06 <SDMMC_CmdSendSCR>
 8003716:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371a:	2b00      	cmp	r3, #0
 800371c:	d02a      	beq.n	8003774 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800371e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003720:	e08a      	b.n	8003838 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00f      	beq.n	8003750 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6819      	ldr	r1, [r3, #0]
 8003734:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	f107 0208 	add.w	r2, r7, #8
 800373c:	18d4      	adds	r4, r2, r3
 800373e:	4608      	mov	r0, r1
 8003740:	f001 f81d 	bl	800477e <SDIO_ReadFIFO>
 8003744:	4603      	mov	r3, r0
 8003746:	6023      	str	r3, [r4, #0]
      index++;
 8003748:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800374a:	3301      	adds	r3, #1
 800374c:	637b      	str	r3, [r7, #52]	@ 0x34
 800374e:	e006      	b.n	800375e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003756:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d012      	beq.n	8003784 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 800375e:	f7fd fba9 	bl	8000eb4 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376c:	d102      	bne.n	8003774 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800376e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003772:	e061      	b.n	8003838 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377a:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0cf      	beq.n	8003722 <SD_FindSCR+0x96>
 8003782:	e000      	b.n	8003786 <SD_FindSCR+0xfa>
      break;
 8003784:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d106      	bne.n	80037a2 <SD_FindSCR+0x116>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800379a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d005      	beq.n	80037ae <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2208      	movs	r2, #8
 80037a8:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80037aa:	2308      	movs	r3, #8
 80037ac:	e044      	b.n	8003838 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b4:	f003 0302 	and.w	r3, r3, #2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d005      	beq.n	80037c8 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2202      	movs	r2, #2
 80037c2:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80037c4:	2302      	movs	r3, #2
 80037c6:	e037      	b.n	8003838 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037ce:	f003 0320 	and.w	r3, r3, #32
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2220      	movs	r2, #32
 80037dc:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80037de:	2320      	movs	r3, #32
 80037e0:	e02a      	b.n	8003838 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f240 523a 	movw	r2, #1338	@ 0x53a
 80037ea:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	061a      	lsls	r2, r3, #24
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	021b      	lsls	r3, r3, #8
 80037f4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80037f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	0a1b      	lsrs	r3, r3, #8
 80037fe:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003802:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	0e1b      	lsrs	r3, r3, #24
 8003808:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800380a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800380c:	601a      	str	r2, [r3, #0]
    scr++;
 800380e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003810:	3304      	adds	r3, #4
 8003812:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	061a      	lsls	r2, r3, #24
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003820:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800382a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	0e1b      	lsrs	r3, r3, #24
 8003830:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003834:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	373c      	adds	r7, #60	@ 0x3c
 800383c:	46bd      	mov	sp, r7
 800383e:	bd90      	pop	{r4, r7, pc}

08003840 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d101      	bne.n	8003852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	e042      	b.n	80038d8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003858:	b2db      	uxtb	r3, r3
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f7fd f918 	bl	8000a9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2224      	movs	r2, #36	@ 0x24
 8003870:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68da      	ldr	r2, [r3, #12]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003882:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fcdb 	bl	8004240 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003898:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	695a      	ldr	r2, [r3, #20]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68da      	ldr	r2, [r3, #12]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2220      	movs	r2, #32
 80038c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2220      	movs	r2, #32
 80038cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b084      	sub	sp, #16
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	4613      	mov	r3, r2
 80038ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b20      	cmp	r3, #32
 80038f8:	d112      	bne.n	8003920 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <HAL_UART_Receive_IT+0x26>
 8003900:	88fb      	ldrh	r3, [r7, #6]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e00b      	b.n	8003922 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003910:	88fb      	ldrh	r3, [r7, #6]
 8003912:	461a      	mov	r2, r3
 8003914:	68b9      	ldr	r1, [r7, #8]
 8003916:	68f8      	ldr	r0, [r7, #12]
 8003918:	f000 faba 	bl	8003e90 <UART_Start_Receive_IT>
 800391c:	4603      	mov	r3, r0
 800391e:	e000      	b.n	8003922 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003920:	2302      	movs	r3, #2
  }
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b0ba      	sub	sp, #232	@ 0xe8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003952:	2300      	movs	r3, #0
 8003954:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003958:	2300      	movs	r3, #0
 800395a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800395e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003962:	f003 030f 	and.w	r3, r3, #15
 8003966:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800396a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10f      	bne.n	8003992 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_UART_IRQHandler+0x66>
 800397e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003982:	f003 0320 	and.w	r3, r3, #32
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 fb99 	bl	80040c2 <UART_Receive_IT>
      return;
 8003990:	e25b      	b.n	8003e4a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003996:	2b00      	cmp	r3, #0
 8003998:	f000 80de 	beq.w	8003b58 <HAL_UART_IRQHandler+0x22c>
 800399c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d106      	bne.n	80039b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ac:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	f000 80d1 	beq.w	8003b58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00b      	beq.n	80039da <HAL_UART_IRQHandler+0xae>
 80039c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d005      	beq.n	80039da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039de:	f003 0304 	and.w	r3, r3, #4
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d00b      	beq.n	80039fe <HAL_UART_IRQHandler+0xd2>
 80039e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d005      	beq.n	80039fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039f6:	f043 0202 	orr.w	r2, r3, #2
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80039fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00b      	beq.n	8003a22 <HAL_UART_IRQHandler+0xf6>
 8003a0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d005      	beq.n	8003a22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1a:	f043 0204 	orr.w	r2, r3, #4
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a26:	f003 0308 	and.w	r3, r3, #8
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d011      	beq.n	8003a52 <HAL_UART_IRQHandler+0x126>
 8003a2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d105      	bne.n	8003a46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d005      	beq.n	8003a52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a4a:	f043 0208 	orr.w	r2, r3, #8
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 81f2 	beq.w	8003e40 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a60:	f003 0320 	and.w	r3, r3, #32
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_UART_IRQHandler+0x14e>
 8003a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a6c:	f003 0320 	and.w	r3, r3, #32
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d002      	beq.n	8003a7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fb24 	bl	80040c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	695b      	ldr	r3, [r3, #20]
 8003a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a84:	2b40      	cmp	r3, #64	@ 0x40
 8003a86:	bf0c      	ite	eq
 8003a88:	2301      	moveq	r3, #1
 8003a8a:	2300      	movne	r3, #0
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a96:	f003 0308 	and.w	r3, r3, #8
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d103      	bne.n	8003aa6 <HAL_UART_IRQHandler+0x17a>
 8003a9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d04f      	beq.n	8003b46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f000 fa2c 	bl	8003f04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ab6:	2b40      	cmp	r3, #64	@ 0x40
 8003ab8:	d141      	bne.n	8003b3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	3314      	adds	r3, #20
 8003ac0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ac8:	e853 3f00 	ldrex	r3, [r3]
 8003acc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003ad0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003ad4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ad8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	3314      	adds	r3, #20
 8003ae2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003ae6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003aea:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003af2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003af6:	e841 2300 	strex	r3, r2, [r1]
 8003afa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003afe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1d9      	bne.n	8003aba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d013      	beq.n	8003b36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b12:	4a7e      	ldr	r2, [pc, #504]	@ (8003d0c <HAL_UART_IRQHandler+0x3e0>)
 8003b14:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7fd fc2a 	bl	8001374 <HAL_DMA_Abort_IT>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d016      	beq.n	8003b54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b2a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b30:	4610      	mov	r0, r2
 8003b32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b34:	e00e      	b.n	8003b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f994 	bl	8003e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b3c:	e00a      	b.n	8003b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 f990 	bl	8003e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b44:	e006      	b.n	8003b54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f000 f98c 	bl	8003e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b52:	e175      	b.n	8003e40 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b54:	bf00      	nop
    return;
 8003b56:	e173      	b.n	8003e40 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	f040 814f 	bne.w	8003e00 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b66:	f003 0310 	and.w	r3, r3, #16
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 8148 	beq.w	8003e00 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b74:	f003 0310 	and.w	r3, r3, #16
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f000 8141 	beq.w	8003e00 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003b7e:	2300      	movs	r3, #0
 8003b80:	60bb      	str	r3, [r7, #8]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	60bb      	str	r3, [r7, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b9e:	2b40      	cmp	r3, #64	@ 0x40
 8003ba0:	f040 80b6 	bne.w	8003d10 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f000 8145 	beq.w	8003e44 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	f080 813e 	bcs.w	8003e44 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bce:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003bda:	f000 8088 	beq.w	8003cee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	330c      	adds	r3, #12
 8003be4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003bec:	e853 3f00 	ldrex	r3, [r3]
 8003bf0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003bf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003bf8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	330c      	adds	r3, #12
 8003c06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c0a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c0e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c12:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c16:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c1a:	e841 2300 	strex	r3, r2, [r1]
 8003c1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1d9      	bne.n	8003bde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3314      	adds	r3, #20
 8003c30:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c3a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c3c:	f023 0301 	bic.w	r3, r3, #1
 8003c40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	3314      	adds	r3, #20
 8003c4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c4e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c52:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c54:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c56:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e1      	bne.n	8003c2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	3314      	adds	r3, #20
 8003c6c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c70:	e853 3f00 	ldrex	r3, [r3]
 8003c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003c78:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	3314      	adds	r3, #20
 8003c86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003c8a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003c8c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003c90:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003c92:	e841 2300 	strex	r3, r2, [r1]
 8003c96:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003c98:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d1e3      	bne.n	8003c66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	330c      	adds	r3, #12
 8003cb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cb6:	e853 3f00 	ldrex	r3, [r3]
 8003cba:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003cbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003cbe:	f023 0310 	bic.w	r3, r3, #16
 8003cc2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003cd0:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cd2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cd4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cd6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cd8:	e841 2300 	strex	r3, r2, [r1]
 8003cdc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003cde:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d1e3      	bne.n	8003cac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f7fd fad3 	bl	8001294 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	4619      	mov	r1, r3
 8003d04:	6878      	ldr	r0, [r7, #4]
 8003d06:	f000 f8b7 	bl	8003e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d0a:	e09b      	b.n	8003e44 <HAL_UART_IRQHandler+0x518>
 8003d0c:	08003fcb 	.word	0x08003fcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d18:	b29b      	uxth	r3, r3
 8003d1a:	1ad3      	subs	r3, r2, r3
 8003d1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	f000 808e 	beq.w	8003e48 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8089 	beq.w	8003e48 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	330c      	adds	r3, #12
 8003d56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d62:	e841 2300 	strex	r3, r2, [r1]
 8003d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1e3      	bne.n	8003d36 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3314      	adds	r3, #20
 8003d74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d78:	e853 3f00 	ldrex	r3, [r3]
 8003d7c:	623b      	str	r3, [r7, #32]
   return(result);
 8003d7e:	6a3b      	ldr	r3, [r7, #32]
 8003d80:	f023 0301 	bic.w	r3, r3, #1
 8003d84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3314      	adds	r3, #20
 8003d8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003d92:	633a      	str	r2, [r7, #48]	@ 0x30
 8003d94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d9a:	e841 2300 	strex	r3, r2, [r1]
 8003d9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003da0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1e3      	bne.n	8003d6e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2220      	movs	r2, #32
 8003daa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	330c      	adds	r3, #12
 8003dba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	e853 3f00 	ldrex	r3, [r3]
 8003dc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	f023 0310 	bic.w	r3, r3, #16
 8003dca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	330c      	adds	r3, #12
 8003dd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003dd8:	61fa      	str	r2, [r7, #28]
 8003dda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ddc:	69b9      	ldr	r1, [r7, #24]
 8003dde:	69fa      	ldr	r2, [r7, #28]
 8003de0:	e841 2300 	strex	r3, r2, [r1]
 8003de4:	617b      	str	r3, [r7, #20]
   return(result);
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1e3      	bne.n	8003db4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003df2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003df6:	4619      	mov	r1, r3
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f83d 	bl	8003e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003dfe:	e023      	b.n	8003e48 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d009      	beq.n	8003e20 <HAL_UART_IRQHandler+0x4f4>
 8003e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e10:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f8ea 	bl	8003ff2 <UART_Transmit_IT>
    return;
 8003e1e:	e014      	b.n	8003e4a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00e      	beq.n	8003e4a <HAL_UART_IRQHandler+0x51e>
 8003e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d008      	beq.n	8003e4a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f000 f92a 	bl	8004092 <UART_EndTransmit_IT>
    return;
 8003e3e:	e004      	b.n	8003e4a <HAL_UART_IRQHandler+0x51e>
    return;
 8003e40:	bf00      	nop
 8003e42:	e002      	b.n	8003e4a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e44:	bf00      	nop
 8003e46:	e000      	b.n	8003e4a <HAL_UART_IRQHandler+0x51e>
      return;
 8003e48:	bf00      	nop
  }
}
 8003e4a:	37e8      	adds	r7, #232	@ 0xe8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	460b      	mov	r3, r1
 8003e82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b085      	sub	sp, #20
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	88fa      	ldrh	r2, [r7, #6]
 8003ea8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	88fa      	ldrh	r2, [r7, #6]
 8003eae:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2222      	movs	r2, #34	@ 0x22
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	691b      	ldr	r3, [r3, #16]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d007      	beq.n	8003ed6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68da      	ldr	r2, [r3, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ed4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	695a      	ldr	r2, [r3, #20]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0201 	orr.w	r2, r2, #1
 8003ee4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68da      	ldr	r2, [r3, #12]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f042 0220 	orr.w	r2, r2, #32
 8003ef4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003ef6:	2300      	movs	r3, #0
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b095      	sub	sp, #84	@ 0x54
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	330c      	adds	r3, #12
 8003f12:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	330c      	adds	r3, #12
 8003f2a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f2c:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f32:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	3314      	adds	r3, #20
 8003f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f48:	6a3b      	ldr	r3, [r7, #32]
 8003f4a:	e853 3f00 	ldrex	r3, [r3]
 8003f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f023 0301 	bic.w	r3, r3, #1
 8003f56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3314      	adds	r3, #20
 8003f5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f60:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f68:	e841 2300 	strex	r3, r2, [r1]
 8003f6c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1e5      	bne.n	8003f40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d119      	bne.n	8003fb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	330c      	adds	r3, #12
 8003f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	e853 3f00 	ldrex	r3, [r3]
 8003f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f023 0310 	bic.w	r3, r3, #16
 8003f92:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f9c:	61ba      	str	r2, [r7, #24]
 8003f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa0:	6979      	ldr	r1, [r7, #20]
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	e841 2300 	strex	r3, r2, [r1]
 8003fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d1e5      	bne.n	8003f7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2220      	movs	r2, #32
 8003fb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fbe:	bf00      	nop
 8003fc0:	3754      	adds	r7, #84	@ 0x54
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b084      	sub	sp, #16
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f7ff ff3d 	bl	8003e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fea:	bf00      	nop
 8003fec:	3710      	adds	r7, #16
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}

08003ff2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b085      	sub	sp, #20
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b21      	cmp	r3, #33	@ 0x21
 8004004:	d13e      	bne.n	8004084 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800400e:	d114      	bne.n	800403a <UART_Transmit_IT+0x48>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d110      	bne.n	800403a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	881b      	ldrh	r3, [r3, #0]
 8004022:	461a      	mov	r2, r3
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800402c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
 8004032:	1c9a      	adds	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	621a      	str	r2, [r3, #32]
 8004038:	e008      	b.n	800404c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	1c59      	adds	r1, r3, #1
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	6211      	str	r1, [r2, #32]
 8004044:	781a      	ldrb	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004050:	b29b      	uxth	r3, r3
 8004052:	3b01      	subs	r3, #1
 8004054:	b29b      	uxth	r3, r3
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	4619      	mov	r1, r3
 800405a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800405c:	2b00      	cmp	r3, #0
 800405e:	d10f      	bne.n	8004080 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800406e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800407e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004080:	2300      	movs	r3, #0
 8004082:	e000      	b.n	8004086 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004084:	2302      	movs	r3, #2
  }
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr

08004092 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004092:	b580      	push	{r7, lr}
 8004094:	b082      	sub	sp, #8
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	2220      	movs	r2, #32
 80040ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f7fc fbd4 	bl	8000860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3708      	adds	r7, #8
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b08c      	sub	sp, #48	@ 0x30
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040d0:	b2db      	uxtb	r3, r3
 80040d2:	2b22      	cmp	r3, #34	@ 0x22
 80040d4:	f040 80ae 	bne.w	8004234 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e0:	d117      	bne.n	8004112 <UART_Receive_IT+0x50>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d113      	bne.n	8004112 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004100:	b29a      	uxth	r2, r3
 8004102:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004104:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800410a:	1c9a      	adds	r2, r3, #2
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004110:	e026      	b.n	8004160 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004116:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004118:	2300      	movs	r3, #0
 800411a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004124:	d007      	beq.n	8004136 <UART_Receive_IT+0x74>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d10a      	bne.n	8004144 <UART_Receive_IT+0x82>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d106      	bne.n	8004144 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	b2da      	uxtb	r2, r3
 800413e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004140:	701a      	strb	r2, [r3, #0]
 8004142:	e008      	b.n	8004156 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	b2db      	uxtb	r3, r3
 800414c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004150:	b2da      	uxtb	r2, r3
 8004152:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004154:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415a:	1c5a      	adds	r2, r3, #1
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004164:	b29b      	uxth	r3, r3
 8004166:	3b01      	subs	r3, #1
 8004168:	b29b      	uxth	r3, r3
 800416a:	687a      	ldr	r2, [r7, #4]
 800416c:	4619      	mov	r1, r3
 800416e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004170:	2b00      	cmp	r3, #0
 8004172:	d15d      	bne.n	8004230 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	68da      	ldr	r2, [r3, #12]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0220 	bic.w	r2, r2, #32
 8004182:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68da      	ldr	r2, [r3, #12]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0201 	bic.w	r2, r2, #1
 80041a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d135      	bne.n	8004226 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	330c      	adds	r3, #12
 80041c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	e853 3f00 	ldrex	r3, [r3]
 80041ce:	613b      	str	r3, [r7, #16]
   return(result);
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f023 0310 	bic.w	r3, r3, #16
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041e0:	623a      	str	r2, [r7, #32]
 80041e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e4:	69f9      	ldr	r1, [r7, #28]
 80041e6:	6a3a      	ldr	r2, [r7, #32]
 80041e8:	e841 2300 	strex	r3, r2, [r1]
 80041ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1e5      	bne.n	80041c0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0310 	and.w	r3, r3, #16
 80041fe:	2b10      	cmp	r3, #16
 8004200:	d10a      	bne.n	8004218 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004202:	2300      	movs	r3, #0
 8004204:	60fb      	str	r3, [r7, #12]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	685b      	ldr	r3, [r3, #4]
 8004214:	60fb      	str	r3, [r7, #12]
 8004216:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800421c:	4619      	mov	r1, r3
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fe2a 	bl	8003e78 <HAL_UARTEx_RxEventCallback>
 8004224:	e002      	b.n	800422c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f7ff fe12 	bl	8003e50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800422c:	2300      	movs	r3, #0
 800422e:	e002      	b.n	8004236 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3730      	adds	r7, #48	@ 0x30
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}
	...

08004240 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004244:	b0c0      	sub	sp, #256	@ 0x100
 8004246:	af00      	add	r7, sp, #0
 8004248:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800424c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	691b      	ldr	r3, [r3, #16]
 8004254:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800425c:	68d9      	ldr	r1, [r3, #12]
 800425e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	ea40 0301 	orr.w	r3, r0, r1
 8004268:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800426a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	431a      	orrs	r2, r3
 8004278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800427c:	695b      	ldr	r3, [r3, #20]
 800427e:	431a      	orrs	r2, r3
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004284:	69db      	ldr	r3, [r3, #28]
 8004286:	4313      	orrs	r3, r2
 8004288:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004298:	f021 010c 	bic.w	r1, r1, #12
 800429c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042a6:	430b      	orrs	r3, r1
 80042a8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ba:	6999      	ldr	r1, [r3, #24]
 80042bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	ea40 0301 	orr.w	r3, r0, r1
 80042c6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	4b8f      	ldr	r3, [pc, #572]	@ (800450c <UART_SetConfig+0x2cc>)
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d005      	beq.n	80042e0 <UART_SetConfig+0xa0>
 80042d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4b8d      	ldr	r3, [pc, #564]	@ (8004510 <UART_SetConfig+0x2d0>)
 80042dc:	429a      	cmp	r2, r3
 80042de:	d104      	bne.n	80042ea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042e0:	f7fe f8f8 	bl	80024d4 <HAL_RCC_GetPCLK2Freq>
 80042e4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042e8:	e003      	b.n	80042f2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042ea:	f7fe f8df 	bl	80024ac <HAL_RCC_GetPCLK1Freq>
 80042ee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f6:	69db      	ldr	r3, [r3, #28]
 80042f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042fc:	f040 810c 	bne.w	8004518 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004304:	2200      	movs	r2, #0
 8004306:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800430a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800430e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004312:	4622      	mov	r2, r4
 8004314:	462b      	mov	r3, r5
 8004316:	1891      	adds	r1, r2, r2
 8004318:	65b9      	str	r1, [r7, #88]	@ 0x58
 800431a:	415b      	adcs	r3, r3
 800431c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800431e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004322:	4621      	mov	r1, r4
 8004324:	eb12 0801 	adds.w	r8, r2, r1
 8004328:	4629      	mov	r1, r5
 800432a:	eb43 0901 	adc.w	r9, r3, r1
 800432e:	f04f 0200 	mov.w	r2, #0
 8004332:	f04f 0300 	mov.w	r3, #0
 8004336:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800433a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800433e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004342:	4690      	mov	r8, r2
 8004344:	4699      	mov	r9, r3
 8004346:	4623      	mov	r3, r4
 8004348:	eb18 0303 	adds.w	r3, r8, r3
 800434c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004350:	462b      	mov	r3, r5
 8004352:	eb49 0303 	adc.w	r3, r9, r3
 8004356:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800435a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	2200      	movs	r2, #0
 8004362:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004366:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800436a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800436e:	460b      	mov	r3, r1
 8004370:	18db      	adds	r3, r3, r3
 8004372:	653b      	str	r3, [r7, #80]	@ 0x50
 8004374:	4613      	mov	r3, r2
 8004376:	eb42 0303 	adc.w	r3, r2, r3
 800437a:	657b      	str	r3, [r7, #84]	@ 0x54
 800437c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004380:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004384:	f7fb ff74 	bl	8000270 <__aeabi_uldivmod>
 8004388:	4602      	mov	r2, r0
 800438a:	460b      	mov	r3, r1
 800438c:	4b61      	ldr	r3, [pc, #388]	@ (8004514 <UART_SetConfig+0x2d4>)
 800438e:	fba3 2302 	umull	r2, r3, r3, r2
 8004392:	095b      	lsrs	r3, r3, #5
 8004394:	011c      	lsls	r4, r3, #4
 8004396:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800439a:	2200      	movs	r2, #0
 800439c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043a0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043a4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043a8:	4642      	mov	r2, r8
 80043aa:	464b      	mov	r3, r9
 80043ac:	1891      	adds	r1, r2, r2
 80043ae:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043b0:	415b      	adcs	r3, r3
 80043b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043b4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043b8:	4641      	mov	r1, r8
 80043ba:	eb12 0a01 	adds.w	sl, r2, r1
 80043be:	4649      	mov	r1, r9
 80043c0:	eb43 0b01 	adc.w	fp, r3, r1
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043d0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043d4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043d8:	4692      	mov	sl, r2
 80043da:	469b      	mov	fp, r3
 80043dc:	4643      	mov	r3, r8
 80043de:	eb1a 0303 	adds.w	r3, sl, r3
 80043e2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043e6:	464b      	mov	r3, r9
 80043e8:	eb4b 0303 	adc.w	r3, fp, r3
 80043ec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80043f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043fc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004400:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004404:	460b      	mov	r3, r1
 8004406:	18db      	adds	r3, r3, r3
 8004408:	643b      	str	r3, [r7, #64]	@ 0x40
 800440a:	4613      	mov	r3, r2
 800440c:	eb42 0303 	adc.w	r3, r2, r3
 8004410:	647b      	str	r3, [r7, #68]	@ 0x44
 8004412:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004416:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800441a:	f7fb ff29 	bl	8000270 <__aeabi_uldivmod>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4611      	mov	r1, r2
 8004424:	4b3b      	ldr	r3, [pc, #236]	@ (8004514 <UART_SetConfig+0x2d4>)
 8004426:	fba3 2301 	umull	r2, r3, r3, r1
 800442a:	095b      	lsrs	r3, r3, #5
 800442c:	2264      	movs	r2, #100	@ 0x64
 800442e:	fb02 f303 	mul.w	r3, r2, r3
 8004432:	1acb      	subs	r3, r1, r3
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800443a:	4b36      	ldr	r3, [pc, #216]	@ (8004514 <UART_SetConfig+0x2d4>)
 800443c:	fba3 2302 	umull	r2, r3, r3, r2
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004448:	441c      	add	r4, r3
 800444a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800444e:	2200      	movs	r2, #0
 8004450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004454:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004458:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800445c:	4642      	mov	r2, r8
 800445e:	464b      	mov	r3, r9
 8004460:	1891      	adds	r1, r2, r2
 8004462:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004464:	415b      	adcs	r3, r3
 8004466:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004468:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800446c:	4641      	mov	r1, r8
 800446e:	1851      	adds	r1, r2, r1
 8004470:	6339      	str	r1, [r7, #48]	@ 0x30
 8004472:	4649      	mov	r1, r9
 8004474:	414b      	adcs	r3, r1
 8004476:	637b      	str	r3, [r7, #52]	@ 0x34
 8004478:	f04f 0200 	mov.w	r2, #0
 800447c:	f04f 0300 	mov.w	r3, #0
 8004480:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004484:	4659      	mov	r1, fp
 8004486:	00cb      	lsls	r3, r1, #3
 8004488:	4651      	mov	r1, sl
 800448a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800448e:	4651      	mov	r1, sl
 8004490:	00ca      	lsls	r2, r1, #3
 8004492:	4610      	mov	r0, r2
 8004494:	4619      	mov	r1, r3
 8004496:	4603      	mov	r3, r0
 8004498:	4642      	mov	r2, r8
 800449a:	189b      	adds	r3, r3, r2
 800449c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044a0:	464b      	mov	r3, r9
 80044a2:	460a      	mov	r2, r1
 80044a4:	eb42 0303 	adc.w	r3, r2, r3
 80044a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044b8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044c0:	460b      	mov	r3, r1
 80044c2:	18db      	adds	r3, r3, r3
 80044c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044c6:	4613      	mov	r3, r2
 80044c8:	eb42 0303 	adc.w	r3, r2, r3
 80044cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044ce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044d2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044d6:	f7fb fecb 	bl	8000270 <__aeabi_uldivmod>
 80044da:	4602      	mov	r2, r0
 80044dc:	460b      	mov	r3, r1
 80044de:	4b0d      	ldr	r3, [pc, #52]	@ (8004514 <UART_SetConfig+0x2d4>)
 80044e0:	fba3 1302 	umull	r1, r3, r3, r2
 80044e4:	095b      	lsrs	r3, r3, #5
 80044e6:	2164      	movs	r1, #100	@ 0x64
 80044e8:	fb01 f303 	mul.w	r3, r1, r3
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	3332      	adds	r3, #50	@ 0x32
 80044f2:	4a08      	ldr	r2, [pc, #32]	@ (8004514 <UART_SetConfig+0x2d4>)
 80044f4:	fba2 2303 	umull	r2, r3, r2, r3
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	f003 0207 	and.w	r2, r3, #7
 80044fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4422      	add	r2, r4
 8004506:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004508:	e106      	b.n	8004718 <UART_SetConfig+0x4d8>
 800450a:	bf00      	nop
 800450c:	40011000 	.word	0x40011000
 8004510:	40011400 	.word	0x40011400
 8004514:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800451c:	2200      	movs	r2, #0
 800451e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004522:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004526:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800452a:	4642      	mov	r2, r8
 800452c:	464b      	mov	r3, r9
 800452e:	1891      	adds	r1, r2, r2
 8004530:	6239      	str	r1, [r7, #32]
 8004532:	415b      	adcs	r3, r3
 8004534:	627b      	str	r3, [r7, #36]	@ 0x24
 8004536:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800453a:	4641      	mov	r1, r8
 800453c:	1854      	adds	r4, r2, r1
 800453e:	4649      	mov	r1, r9
 8004540:	eb43 0501 	adc.w	r5, r3, r1
 8004544:	f04f 0200 	mov.w	r2, #0
 8004548:	f04f 0300 	mov.w	r3, #0
 800454c:	00eb      	lsls	r3, r5, #3
 800454e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004552:	00e2      	lsls	r2, r4, #3
 8004554:	4614      	mov	r4, r2
 8004556:	461d      	mov	r5, r3
 8004558:	4643      	mov	r3, r8
 800455a:	18e3      	adds	r3, r4, r3
 800455c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004560:	464b      	mov	r3, r9
 8004562:	eb45 0303 	adc.w	r3, r5, r3
 8004566:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800456a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004576:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004586:	4629      	mov	r1, r5
 8004588:	008b      	lsls	r3, r1, #2
 800458a:	4621      	mov	r1, r4
 800458c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004590:	4621      	mov	r1, r4
 8004592:	008a      	lsls	r2, r1, #2
 8004594:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004598:	f7fb fe6a 	bl	8000270 <__aeabi_uldivmod>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	4b60      	ldr	r3, [pc, #384]	@ (8004724 <UART_SetConfig+0x4e4>)
 80045a2:	fba3 2302 	umull	r2, r3, r3, r2
 80045a6:	095b      	lsrs	r3, r3, #5
 80045a8:	011c      	lsls	r4, r3, #4
 80045aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045ae:	2200      	movs	r2, #0
 80045b0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045b4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045b8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045bc:	4642      	mov	r2, r8
 80045be:	464b      	mov	r3, r9
 80045c0:	1891      	adds	r1, r2, r2
 80045c2:	61b9      	str	r1, [r7, #24]
 80045c4:	415b      	adcs	r3, r3
 80045c6:	61fb      	str	r3, [r7, #28]
 80045c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045cc:	4641      	mov	r1, r8
 80045ce:	1851      	adds	r1, r2, r1
 80045d0:	6139      	str	r1, [r7, #16]
 80045d2:	4649      	mov	r1, r9
 80045d4:	414b      	adcs	r3, r1
 80045d6:	617b      	str	r3, [r7, #20]
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045e4:	4659      	mov	r1, fp
 80045e6:	00cb      	lsls	r3, r1, #3
 80045e8:	4651      	mov	r1, sl
 80045ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ee:	4651      	mov	r1, sl
 80045f0:	00ca      	lsls	r2, r1, #3
 80045f2:	4610      	mov	r0, r2
 80045f4:	4619      	mov	r1, r3
 80045f6:	4603      	mov	r3, r0
 80045f8:	4642      	mov	r2, r8
 80045fa:	189b      	adds	r3, r3, r2
 80045fc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004600:	464b      	mov	r3, r9
 8004602:	460a      	mov	r2, r1
 8004604:	eb42 0303 	adc.w	r3, r2, r3
 8004608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800460c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004616:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004624:	4649      	mov	r1, r9
 8004626:	008b      	lsls	r3, r1, #2
 8004628:	4641      	mov	r1, r8
 800462a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800462e:	4641      	mov	r1, r8
 8004630:	008a      	lsls	r2, r1, #2
 8004632:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004636:	f7fb fe1b 	bl	8000270 <__aeabi_uldivmod>
 800463a:	4602      	mov	r2, r0
 800463c:	460b      	mov	r3, r1
 800463e:	4611      	mov	r1, r2
 8004640:	4b38      	ldr	r3, [pc, #224]	@ (8004724 <UART_SetConfig+0x4e4>)
 8004642:	fba3 2301 	umull	r2, r3, r3, r1
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	2264      	movs	r2, #100	@ 0x64
 800464a:	fb02 f303 	mul.w	r3, r2, r3
 800464e:	1acb      	subs	r3, r1, r3
 8004650:	011b      	lsls	r3, r3, #4
 8004652:	3332      	adds	r3, #50	@ 0x32
 8004654:	4a33      	ldr	r2, [pc, #204]	@ (8004724 <UART_SetConfig+0x4e4>)
 8004656:	fba2 2303 	umull	r2, r3, r2, r3
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004660:	441c      	add	r4, r3
 8004662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004666:	2200      	movs	r2, #0
 8004668:	673b      	str	r3, [r7, #112]	@ 0x70
 800466a:	677a      	str	r2, [r7, #116]	@ 0x74
 800466c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004670:	4642      	mov	r2, r8
 8004672:	464b      	mov	r3, r9
 8004674:	1891      	adds	r1, r2, r2
 8004676:	60b9      	str	r1, [r7, #8]
 8004678:	415b      	adcs	r3, r3
 800467a:	60fb      	str	r3, [r7, #12]
 800467c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004680:	4641      	mov	r1, r8
 8004682:	1851      	adds	r1, r2, r1
 8004684:	6039      	str	r1, [r7, #0]
 8004686:	4649      	mov	r1, r9
 8004688:	414b      	adcs	r3, r1
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	f04f 0200 	mov.w	r2, #0
 8004690:	f04f 0300 	mov.w	r3, #0
 8004694:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004698:	4659      	mov	r1, fp
 800469a:	00cb      	lsls	r3, r1, #3
 800469c:	4651      	mov	r1, sl
 800469e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046a2:	4651      	mov	r1, sl
 80046a4:	00ca      	lsls	r2, r1, #3
 80046a6:	4610      	mov	r0, r2
 80046a8:	4619      	mov	r1, r3
 80046aa:	4603      	mov	r3, r0
 80046ac:	4642      	mov	r2, r8
 80046ae:	189b      	adds	r3, r3, r2
 80046b0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046b2:	464b      	mov	r3, r9
 80046b4:	460a      	mov	r2, r1
 80046b6:	eb42 0303 	adc.w	r3, r2, r3
 80046ba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	2200      	movs	r2, #0
 80046c4:	663b      	str	r3, [r7, #96]	@ 0x60
 80046c6:	667a      	str	r2, [r7, #100]	@ 0x64
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046d4:	4649      	mov	r1, r9
 80046d6:	008b      	lsls	r3, r1, #2
 80046d8:	4641      	mov	r1, r8
 80046da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046de:	4641      	mov	r1, r8
 80046e0:	008a      	lsls	r2, r1, #2
 80046e2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046e6:	f7fb fdc3 	bl	8000270 <__aeabi_uldivmod>
 80046ea:	4602      	mov	r2, r0
 80046ec:	460b      	mov	r3, r1
 80046ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004724 <UART_SetConfig+0x4e4>)
 80046f0:	fba3 1302 	umull	r1, r3, r3, r2
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	2164      	movs	r1, #100	@ 0x64
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	011b      	lsls	r3, r3, #4
 8004700:	3332      	adds	r3, #50	@ 0x32
 8004702:	4a08      	ldr	r2, [pc, #32]	@ (8004724 <UART_SetConfig+0x4e4>)
 8004704:	fba2 2303 	umull	r2, r3, r2, r3
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	f003 020f 	and.w	r2, r3, #15
 800470e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4422      	add	r2, r4
 8004716:	609a      	str	r2, [r3, #8]
}
 8004718:	bf00      	nop
 800471a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800471e:	46bd      	mov	sp, r7
 8004720:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004724:	51eb851f 	.word	0x51eb851f

08004728 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004728:	b084      	sub	sp, #16
 800472a:	b480      	push	{r7}
 800472c:	b085      	sub	sp, #20
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
 8004732:	f107 001c 	add.w	r0, r7, #28
 8004736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800473e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004740:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004742:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 8004746:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004748:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 800474a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800474c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 800474e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 8004752:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	4313      	orrs	r3, r2
 8004758:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 8004762:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8004766:	68fa      	ldr	r2, [r7, #12]
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800476e:	2300      	movs	r3, #0
}
 8004770:	4618      	mov	r0, r3
 8004772:	3714      	adds	r7, #20
 8004774:	46bd      	mov	sp, r7
 8004776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477a:	b004      	add	sp, #16
 800477c:	4770      	bx	lr

0800477e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800477e:	b480      	push	{r7}
 8004780:	b083      	sub	sp, #12
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 800478c:	4618      	mov	r0, r3
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	681a      	ldr	r2, [r3, #0]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80047ac:	2300      	movs	r3, #0
}
 80047ae:	4618      	mov	r0, r3
 80047b0:	370c      	adds	r7, #12
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr

080047ba <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80047ba:	b480      	push	{r7}
 80047bc:	b083      	sub	sp, #12
 80047be:	af00      	add	r7, sp, #0
 80047c0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2203      	movs	r2, #3
 80047c6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047c8:	2300      	movs	r3, #0
}
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80047d6:	b480      	push	{r7}
 80047d8:	b083      	sub	sp, #12
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0303 	and.w	r3, r3, #3
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b085      	sub	sp, #20
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
 80047fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004810:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8004816:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800481c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800482c:	f023 030f 	bic.w	r3, r3, #15
 8004830:	68fa      	ldr	r2, [r7, #12]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3714      	adds	r7, #20
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	b2db      	uxtb	r3, r3
}
 8004854:	4618      	mov	r0, r3
 8004856:	370c      	adds	r7, #12
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3314      	adds	r3, #20
 800486e:	461a      	mov	r2, r3
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	4413      	add	r3, r2
 8004874:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
}  
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr

08004886 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8004886:	b480      	push	{r7}
 8004888:	b085      	sub	sp, #20
 800488a:	af00      	add	r7, sp, #0
 800488c:	6078      	str	r0, [r7, #4]
 800488e:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685a      	ldr	r2, [r3, #4]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048ac:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80048b2:	431a      	orrs	r2, r3
                       Data->DPSM);
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80048b8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048ba:	68fa      	ldr	r2, [r7, #12]
 80048bc:	4313      	orrs	r3, r2
 80048be:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c4:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80048d0:	2300      	movs	r3, #0

}
 80048d2:	4618      	mov	r0, r3
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b088      	sub	sp, #32
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80048ec:	2310      	movs	r3, #16
 80048ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80048f0:	2340      	movs	r3, #64	@ 0x40
 80048f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80048f4:	2300      	movs	r3, #0
 80048f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80048f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80048fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80048fe:	f107 0308 	add.w	r3, r7, #8
 8004902:	4619      	mov	r1, r3
 8004904:	6878      	ldr	r0, [r7, #4]
 8004906:	f7ff ff74 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800490a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800490e:	2110      	movs	r1, #16
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fa19 	bl	8004d48 <SDMMC_GetCmdResp1>
 8004916:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004918:	69fb      	ldr	r3, [r7, #28]
}
 800491a:	4618      	mov	r0, r3
 800491c:	3720      	adds	r7, #32
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b088      	sub	sp, #32
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004930:	2311      	movs	r3, #17
 8004932:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004934:	2340      	movs	r3, #64	@ 0x40
 8004936:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004938:	2300      	movs	r3, #0
 800493a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800493c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004940:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004942:	f107 0308 	add.w	r3, r7, #8
 8004946:	4619      	mov	r1, r3
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f7ff ff52 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800494e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004952:	2111      	movs	r1, #17
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f9f7 	bl	8004d48 <SDMMC_GetCmdResp1>
 800495a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800495c:	69fb      	ldr	r3, [r7, #28]
}
 800495e:	4618      	mov	r0, r3
 8004960:	3720      	adds	r7, #32
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}

08004966 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8004966:	b580      	push	{r7, lr}
 8004968:	b088      	sub	sp, #32
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004974:	2312      	movs	r3, #18
 8004976:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004978:	2340      	movs	r3, #64	@ 0x40
 800497a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004980:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004984:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004986:	f107 0308 	add.w	r3, r7, #8
 800498a:	4619      	mov	r1, r3
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	f7ff ff30 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004996:	2112      	movs	r1, #18
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f9d5 	bl	8004d48 <SDMMC_GetCmdResp1>
 800499e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049a0:	69fb      	ldr	r3, [r7, #28]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3720      	adds	r7, #32
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b088      	sub	sp, #32
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80049b8:	2318      	movs	r3, #24
 80049ba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049bc:	2340      	movs	r3, #64	@ 0x40
 80049be:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049c0:	2300      	movs	r3, #0
 80049c2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049c8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049ca:	f107 0308 	add.w	r3, r7, #8
 80049ce:	4619      	mov	r1, r3
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f7ff ff0e 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80049d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049da:	2118      	movs	r1, #24
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f9b3 	bl	8004d48 <SDMMC_GetCmdResp1>
 80049e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049e4:	69fb      	ldr	r3, [r7, #28]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3720      	adds	r7, #32
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80049ee:	b580      	push	{r7, lr}
 80049f0:	b088      	sub	sp, #32
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
 80049f6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80049fc:	2319      	movs	r3, #25
 80049fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a00:	2340      	movs	r3, #64	@ 0x40
 8004a02:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a04:	2300      	movs	r3, #0
 8004a06:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a08:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a0c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a0e:	f107 0308 	add.w	r3, r7, #8
 8004a12:	4619      	mov	r1, r3
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f7ff feec 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004a1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a1e:	2119      	movs	r1, #25
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f991 	bl	8004d48 <SDMMC_GetCmdResp1>
 8004a26:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a28:	69fb      	ldr	r3, [r7, #28]
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3720      	adds	r7, #32
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
	...

08004a34 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b088      	sub	sp, #32
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004a40:	230c      	movs	r3, #12
 8004a42:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a44:	2340      	movs	r3, #64	@ 0x40
 8004a46:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a50:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a52:	f107 0308 	add.w	r3, r7, #8
 8004a56:	4619      	mov	r1, r3
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7ff feca 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004a5e:	4a05      	ldr	r2, [pc, #20]	@ (8004a74 <SDMMC_CmdStopTransfer+0x40>)
 8004a60:	210c      	movs	r1, #12
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f970 	bl	8004d48 <SDMMC_GetCmdResp1>
 8004a68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a6a:	69fb      	ldr	r3, [r7, #28]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	05f5e100 	.word	0x05f5e100

08004a78 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004a78:	b580      	push	{r7, lr}
 8004a7a:	b08a      	sub	sp, #40	@ 0x28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	60f8      	str	r0, [r7, #12]
 8004a80:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004a88:	2307      	movs	r3, #7
 8004a8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a8c:	2340      	movs	r3, #64	@ 0x40
 8004a8e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a90:	2300      	movs	r3, #0
 8004a92:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a94:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a98:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a9a:	f107 0310 	add.w	r3, r7, #16
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	68f8      	ldr	r0, [r7, #12]
 8004aa2:	f7ff fea6 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aaa:	2107      	movs	r1, #7
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f94b 	bl	8004d48 <SDMMC_GetCmdResp1>
 8004ab2:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3728      	adds	r7, #40	@ 0x28
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}

08004abe <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004abe:	b580      	push	{r7, lr}
 8004ac0:	b088      	sub	sp, #32
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004aca:	2300      	movs	r3, #0
 8004acc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004ad6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ada:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004adc:	f107 0308 	add.w	r3, r7, #8
 8004ae0:	4619      	mov	r1, r3
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f7ff fe85 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fb65 	bl	80051b8 <SDMMC_GetCmdError>
 8004aee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004af0:	69fb      	ldr	r3, [r7, #28]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3720      	adds	r7, #32
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}

08004afa <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004afa:	b580      	push	{r7, lr}
 8004afc:	b088      	sub	sp, #32
 8004afe:	af00      	add	r7, sp, #0
 8004b00:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004b02:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004b06:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004b08:	2308      	movs	r3, #8
 8004b0a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b0c:	2340      	movs	r3, #64	@ 0x40
 8004b0e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b10:	2300      	movs	r3, #0
 8004b12:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b18:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b1a:	f107 0308 	add.w	r3, r7, #8
 8004b1e:	4619      	mov	r1, r3
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff fe66 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 faf8 	bl	800511c <SDMMC_GetCmdResp7>
 8004b2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b2e:	69fb      	ldr	r3, [r7, #28]
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3720      	adds	r7, #32
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b088      	sub	sp, #32
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004b46:	2337      	movs	r3, #55	@ 0x37
 8004b48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b4a:	2340      	movs	r3, #64	@ 0x40
 8004b4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b58:	f107 0308 	add.w	r3, r7, #8
 8004b5c:	4619      	mov	r1, r3
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f7ff fe47 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004b64:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b68:	2137      	movs	r1, #55	@ 0x37
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f8ec 	bl	8004d48 <SDMMC_GetCmdResp1>
 8004b70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b72:	69fb      	ldr	r3, [r7, #28]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3720      	adds	r7, #32
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b088      	sub	sp, #32
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004b92:	2329      	movs	r3, #41	@ 0x29
 8004b94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b96:	2340      	movs	r3, #64	@ 0x40
 8004b98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ba2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ba4:	f107 0308 	add.w	r3, r7, #8
 8004ba8:	4619      	mov	r1, r3
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f7ff fe21 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004bb0:	6878      	ldr	r0, [r7, #4]
 8004bb2:	f000 f9ff 	bl	8004fb4 <SDMMC_GetCmdResp3>
 8004bb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bb8:	69fb      	ldr	r3, [r7, #28]
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3720      	adds	r7, #32
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	bd80      	pop	{r7, pc}

08004bc2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004bc2:	b580      	push	{r7, lr}
 8004bc4:	b088      	sub	sp, #32
 8004bc6:	af00      	add	r7, sp, #0
 8004bc8:	6078      	str	r0, [r7, #4]
 8004bca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004bd0:	2306      	movs	r3, #6
 8004bd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bd4:	2340      	movs	r3, #64	@ 0x40
 8004bd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004be0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004be2:	f107 0308 	add.w	r3, r7, #8
 8004be6:	4619      	mov	r1, r3
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f7ff fe02 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bf2:	2106      	movs	r1, #6
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f8a7 	bl	8004d48 <SDMMC_GetCmdResp1>
 8004bfa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b088      	sub	sp, #32
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004c0e:	2300      	movs	r3, #0
 8004c10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004c12:	2333      	movs	r3, #51	@ 0x33
 8004c14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c16:	2340      	movs	r3, #64	@ 0x40
 8004c18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c24:	f107 0308 	add.w	r3, r7, #8
 8004c28:	4619      	mov	r1, r3
 8004c2a:	6878      	ldr	r0, [r7, #4]
 8004c2c:	f7ff fde1 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c34:	2133      	movs	r1, #51	@ 0x33
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f886 	bl	8004d48 <SDMMC_GetCmdResp1>
 8004c3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c3e:	69fb      	ldr	r3, [r7, #28]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3720      	adds	r7, #32
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004c50:	2300      	movs	r3, #0
 8004c52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004c54:	2302      	movs	r3, #2
 8004c56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c58:	23c0      	movs	r3, #192	@ 0xc0
 8004c5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c60:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c66:	f107 0308 	add.w	r3, r7, #8
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f7ff fdc0 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f956 	bl	8004f24 <SDMMC_GetCmdResp2>
 8004c78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c7a:	69fb      	ldr	r3, [r7, #28]
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3720      	adds	r7, #32
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
 8004c8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004c92:	2309      	movs	r3, #9
 8004c94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c96:	23c0      	movs	r3, #192	@ 0xc0
 8004c98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ca2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ca4:	f107 0308 	add.w	r3, r7, #8
 8004ca8:	4619      	mov	r1, r3
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7ff fda1 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004cb0:	6878      	ldr	r0, [r7, #4]
 8004cb2:	f000 f937 	bl	8004f24 <SDMMC_GetCmdResp2>
 8004cb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cb8:	69fb      	ldr	r3, [r7, #28]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3720      	adds	r7, #32
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b088      	sub	sp, #32
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cd4:	2340      	movs	r3, #64	@ 0x40
 8004cd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cdc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ce0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ce2:	f107 0308 	add.w	r3, r7, #8
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	6878      	ldr	r0, [r7, #4]
 8004cea:	f7ff fd82 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004cee:	683a      	ldr	r2, [r7, #0]
 8004cf0:	2103      	movs	r1, #3
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f99c 	bl	8005030 <SDMMC_GetCmdResp6>
 8004cf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cfa:	69fb      	ldr	r3, [r7, #28]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004d12:	230d      	movs	r3, #13
 8004d14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d16:	2340      	movs	r3, #64	@ 0x40
 8004d18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d24:	f107 0308 	add.w	r3, r7, #8
 8004d28:	4619      	mov	r1, r3
 8004d2a:	6878      	ldr	r0, [r7, #4]
 8004d2c:	f7ff fd61 	bl	80047f2 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004d30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d34:	210d      	movs	r1, #13
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f000 f806 	bl	8004d48 <SDMMC_GetCmdResp1>
 8004d3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d3e:	69fb      	ldr	r3, [r7, #28]
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3720      	adds	r7, #32
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b088      	sub	sp, #32
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	460b      	mov	r3, r1
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004d56:	4b70      	ldr	r3, [pc, #448]	@ (8004f18 <SDMMC_GetCmdResp1+0x1d0>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a70      	ldr	r2, [pc, #448]	@ (8004f1c <SDMMC_GetCmdResp1+0x1d4>)
 8004d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004d60:	0a5a      	lsrs	r2, r3, #9
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	fb02 f303 	mul.w	r3, r2, r3
 8004d68:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	1e5a      	subs	r2, r3, #1
 8004d6e:	61fa      	str	r2, [r7, #28]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d102      	bne.n	8004d7a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004d78:	e0c9      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d7e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ef      	beq.n	8004d6a <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d1ea      	bne.n	8004d6a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d98:	f003 0304 	and.w	r3, r3, #4
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d004      	beq.n	8004daa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2204      	movs	r2, #4
 8004da4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004da6:	2304      	movs	r3, #4
 8004da8:	e0b1      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d004      	beq.n	8004dc0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0a6      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	22c5      	movs	r2, #197	@ 0xc5
 8004dc4:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004dc6:	68f8      	ldr	r0, [r7, #12]
 8004dc8:	f7ff fd3d 	bl	8004846 <SDIO_GetCommandResponse>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	461a      	mov	r2, r3
 8004dd0:	7afb      	ldrb	r3, [r7, #11]
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d001      	beq.n	8004dda <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e099      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004dda:	2100      	movs	r1, #0
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f7ff fd3f 	bl	8004860 <SDIO_GetResponse>
 8004de2:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	4b4e      	ldr	r3, [pc, #312]	@ (8004f20 <SDMMC_GetCmdResp1+0x1d8>)
 8004de8:	4013      	ands	r3, r2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d101      	bne.n	8004df2 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004dee:	2300      	movs	r3, #0
 8004df0:	e08d      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	da02      	bge.n	8004dfe <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004df8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004dfc:	e087      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004e08:	2340      	movs	r3, #64	@ 0x40
 8004e0a:	e080      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d001      	beq.n	8004e1a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004e16:	2380      	movs	r3, #128	@ 0x80
 8004e18:	e079      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004e24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e28:	e071      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004e34:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e38:	e069      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d002      	beq.n	8004e4a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004e44:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e48:	e061      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004e54:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e58:	e059      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d002      	beq.n	8004e6a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e68:	e051      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d002      	beq.n	8004e7a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e78:	e049      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004e84:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004e88:	e041      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d002      	beq.n	8004e9a <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004e94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004e98:	e039      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d002      	beq.n	8004eaa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004ea4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ea8:	e031      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d002      	beq.n	8004eba <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004eb4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004eb8:	e029      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004ec4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004ec8:	e021      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004ed4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004ed8:	e019      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d002      	beq.n	8004eea <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004ee4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004ee8:	e011      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d002      	beq.n	8004efa <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004ef4:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004ef8:	e009      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f003 0308 	and.w	r3, r3, #8
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d002      	beq.n	8004f0a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004f04:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004f08:	e001      	b.n	8004f0e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004f0a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	bf00      	nop
 8004f18:	20000004 	.word	0x20000004
 8004f1c:	10624dd3 	.word	0x10624dd3
 8004f20:	fdffe008 	.word	0xfdffe008

08004f24 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8004fac <SDMMC_GetCmdResp2+0x88>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb0 <SDMMC_GetCmdResp2+0x8c>)
 8004f32:	fba2 2303 	umull	r2, r3, r2, r3
 8004f36:	0a5b      	lsrs	r3, r3, #9
 8004f38:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f3c:	fb02 f303 	mul.w	r3, r2, r3
 8004f40:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	1e5a      	subs	r2, r3, #1
 8004f46:	60fa      	str	r2, [r7, #12]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d102      	bne.n	8004f52 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f4c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004f50:	e026      	b.n	8004fa0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f56:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d0ef      	beq.n	8004f42 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1ea      	bne.n	8004f42 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d004      	beq.n	8004f82 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2204      	movs	r2, #4
 8004f7c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004f7e:	2304      	movs	r3, #4
 8004f80:	e00e      	b.n	8004fa0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004f94:	2301      	movs	r3, #1
 8004f96:	e003      	b.n	8004fa0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	22c5      	movs	r2, #197	@ 0xc5
 8004f9c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3714      	adds	r7, #20
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004faa:	4770      	bx	lr
 8004fac:	20000004 	.word	0x20000004
 8004fb0:	10624dd3 	.word	0x10624dd3

08004fb4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004fbc:	4b1a      	ldr	r3, [pc, #104]	@ (8005028 <SDMMC_GetCmdResp3+0x74>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a1a      	ldr	r2, [pc, #104]	@ (800502c <SDMMC_GetCmdResp3+0x78>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	0a5b      	lsrs	r3, r3, #9
 8004fc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fcc:	fb02 f303 	mul.w	r3, r2, r3
 8004fd0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1e5a      	subs	r2, r3, #1
 8004fd6:	60fa      	str	r2, [r7, #12]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d102      	bne.n	8004fe2 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004fdc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004fe0:	e01b      	b.n	800501a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fe6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d0ef      	beq.n	8004fd2 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1ea      	bne.n	8004fd2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	d004      	beq.n	8005012 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2204      	movs	r2, #4
 800500c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800500e:	2304      	movs	r3, #4
 8005010:	e003      	b.n	800501a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	22c5      	movs	r2, #197	@ 0xc5
 8005016:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005018:	2300      	movs	r3, #0
}
 800501a:	4618      	mov	r0, r3
 800501c:	3714      	adds	r7, #20
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	20000004 	.word	0x20000004
 800502c:	10624dd3 	.word	0x10624dd3

08005030 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b088      	sub	sp, #32
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	460b      	mov	r3, r1
 800503a:	607a      	str	r2, [r7, #4]
 800503c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800503e:	4b35      	ldr	r3, [pc, #212]	@ (8005114 <SDMMC_GetCmdResp6+0xe4>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a35      	ldr	r2, [pc, #212]	@ (8005118 <SDMMC_GetCmdResp6+0xe8>)
 8005044:	fba2 2303 	umull	r2, r3, r2, r3
 8005048:	0a5b      	lsrs	r3, r3, #9
 800504a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800504e:	fb02 f303 	mul.w	r3, r2, r3
 8005052:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	1e5a      	subs	r2, r3, #1
 8005058:	61fa      	str	r2, [r7, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d102      	bne.n	8005064 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800505e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005062:	e052      	b.n	800510a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005068:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0ef      	beq.n	8005054 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1ea      	bne.n	8005054 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d004      	beq.n	8005094 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2204      	movs	r2, #4
 800508e:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005090:	2304      	movs	r3, #4
 8005092:	e03a      	b.n	800510a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d004      	beq.n	80050aa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2201      	movs	r2, #1
 80050a4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e02f      	b.n	800510a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80050aa:	68f8      	ldr	r0, [r7, #12]
 80050ac:	f7ff fbcb 	bl	8004846 <SDIO_GetCommandResponse>
 80050b0:	4603      	mov	r3, r0
 80050b2:	461a      	mov	r2, r3
 80050b4:	7afb      	ldrb	r3, [r7, #11]
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d001      	beq.n	80050be <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050ba:	2301      	movs	r3, #1
 80050bc:	e025      	b.n	800510a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	22c5      	movs	r2, #197	@ 0xc5
 80050c2:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80050c4:	2100      	movs	r1, #0
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff fbca 	bl	8004860 <SDIO_GetResponse>
 80050cc:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d106      	bne.n	80050e6 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80050d8:	697b      	ldr	r3, [r7, #20]
 80050da:	0c1b      	lsrs	r3, r3, #16
 80050dc:	b29a      	uxth	r2, r3
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80050e2:	2300      	movs	r3, #0
 80050e4:	e011      	b.n	800510a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d002      	beq.n	80050f6 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80050f0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80050f4:	e009      	b.n	800510a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d002      	beq.n	8005106 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005100:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005104:	e001      	b.n	800510a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005106:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 800510a:	4618      	mov	r0, r3
 800510c:	3720      	adds	r7, #32
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
 8005112:	bf00      	nop
 8005114:	20000004 	.word	0x20000004
 8005118:	10624dd3 	.word	0x10624dd3

0800511c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800511c:	b480      	push	{r7}
 800511e:	b085      	sub	sp, #20
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005124:	4b22      	ldr	r3, [pc, #136]	@ (80051b0 <SDMMC_GetCmdResp7+0x94>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a22      	ldr	r2, [pc, #136]	@ (80051b4 <SDMMC_GetCmdResp7+0x98>)
 800512a:	fba2 2303 	umull	r2, r3, r2, r3
 800512e:	0a5b      	lsrs	r3, r3, #9
 8005130:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005134:	fb02 f303 	mul.w	r3, r2, r3
 8005138:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	1e5a      	subs	r2, r3, #1
 800513e:	60fa      	str	r2, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d102      	bne.n	800514a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005144:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005148:	e02c      	b.n	80051a4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0ef      	beq.n	800513a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1ea      	bne.n	800513a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005168:	f003 0304 	and.w	r3, r3, #4
 800516c:	2b00      	cmp	r3, #0
 800516e:	d004      	beq.n	800517a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2204      	movs	r2, #4
 8005174:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005176:	2304      	movs	r3, #4
 8005178:	e014      	b.n	80051a4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d004      	beq.n	8005190 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2201      	movs	r2, #1
 800518a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800518c:	2301      	movs	r3, #1
 800518e:	e009      	b.n	80051a4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2240      	movs	r2, #64	@ 0x40
 80051a0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80051a2:	2300      	movs	r3, #0
  
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3714      	adds	r7, #20
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr
 80051b0:	20000004 	.word	0x20000004
 80051b4:	10624dd3 	.word	0x10624dd3

080051b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b085      	sub	sp, #20
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051c0:	4b11      	ldr	r3, [pc, #68]	@ (8005208 <SDMMC_GetCmdError+0x50>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a11      	ldr	r2, [pc, #68]	@ (800520c <SDMMC_GetCmdError+0x54>)
 80051c6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ca:	0a5b      	lsrs	r3, r3, #9
 80051cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051d0:	fb02 f303 	mul.w	r3, r2, r3
 80051d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	1e5a      	subs	r2, r3, #1
 80051da:	60fa      	str	r2, [r7, #12]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80051e0:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80051e4:	e009      	b.n	80051fa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d0f1      	beq.n	80051d6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	22c5      	movs	r2, #197	@ 0xc5
 80051f6:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3714      	adds	r7, #20
 80051fe:	46bd      	mov	sp, r7
 8005200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005204:	4770      	bx	lr
 8005206:	bf00      	nop
 8005208:	20000004 	.word	0x20000004
 800520c:	10624dd3 	.word	0x10624dd3

08005210 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005214:	4904      	ldr	r1, [pc, #16]	@ (8005228 <MX_FATFS_Init+0x18>)
 8005216:	4805      	ldr	r0, [pc, #20]	@ (800522c <MX_FATFS_Init+0x1c>)
 8005218:	f000 fe64 	bl	8005ee4 <FATFS_LinkDriver>
 800521c:	4603      	mov	r3, r0
 800521e:	461a      	mov	r2, r3
 8005220:	4b03      	ldr	r3, [pc, #12]	@ (8005230 <MX_FATFS_Init+0x20>)
 8005222:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005224:	bf00      	nop
 8005226:	bd80      	pop	{r7, pc}
 8005228:	200003f4 	.word	0x200003f4
 800522c:	08006f1c 	.word	0x08006f1c
 8005230:	200003f0 	.word	0x200003f0

08005234 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b082      	sub	sp, #8
 8005238:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800523a:	2300      	movs	r3, #0
 800523c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800523e:	f000 f879 	bl	8005334 <BSP_SD_IsDetected>
 8005242:	4603      	mov	r3, r0
 8005244:	2b01      	cmp	r3, #1
 8005246:	d001      	beq.n	800524c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005248:	2301      	movs	r3, #1
 800524a:	e012      	b.n	8005272 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800524c:	480b      	ldr	r0, [pc, #44]	@ (800527c <BSP_SD_Init+0x48>)
 800524e:	f7fd f955 	bl	80024fc <HAL_SD_Init>
 8005252:	4603      	mov	r3, r0
 8005254:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d109      	bne.n	8005270 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800525c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005260:	4806      	ldr	r0, [pc, #24]	@ (800527c <BSP_SD_Init+0x48>)
 8005262:	f7fd ff3f 	bl	80030e4 <HAL_SD_ConfigWideBusOperation>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d001      	beq.n	8005270 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005270:	79fb      	ldrb	r3, [r7, #7]
}
 8005272:	4618      	mov	r0, r3
 8005274:	3708      	adds	r7, #8
 8005276:	46bd      	mov	sp, r7
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	20000088 	.word	0x20000088

08005280 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b088      	sub	sp, #32
 8005284:	af02      	add	r7, sp, #8
 8005286:	60f8      	str	r0, [r7, #12]
 8005288:	60b9      	str	r1, [r7, #8]
 800528a:	607a      	str	r2, [r7, #4]
 800528c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800528e:	2300      	movs	r3, #0
 8005290:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	68f9      	ldr	r1, [r7, #12]
 800529c:	4806      	ldr	r0, [pc, #24]	@ (80052b8 <BSP_SD_ReadBlocks+0x38>)
 800529e:	f7fd f9dd 	bl	800265c <HAL_SD_ReadBlocks>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80052ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000088 	.word	0x20000088

080052bc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af02      	add	r7, sp, #8
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
 80052c8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80052ca:	2300      	movs	r3, #0
 80052cc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68ba      	ldr	r2, [r7, #8]
 80052d6:	68f9      	ldr	r1, [r7, #12]
 80052d8:	4806      	ldr	r0, [pc, #24]	@ (80052f4 <BSP_SD_WriteBlocks+0x38>)
 80052da:	f7fd fba5 	bl	8002a28 <HAL_SD_WriteBlocks>
 80052de:	4603      	mov	r3, r0
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d001      	beq.n	80052e8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80052e4:	2301      	movs	r3, #1
 80052e6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80052e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3718      	adds	r7, #24
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	20000088 	.word	0x20000088

080052f8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80052fc:	4805      	ldr	r0, [pc, #20]	@ (8005314 <BSP_SD_GetCardState+0x1c>)
 80052fe:	f7fd ff8b 	bl	8003218 <HAL_SD_GetCardState>
 8005302:	4603      	mov	r3, r0
 8005304:	2b04      	cmp	r3, #4
 8005306:	bf14      	ite	ne
 8005308:	2301      	movne	r3, #1
 800530a:	2300      	moveq	r3, #0
 800530c:	b2db      	uxtb	r3, r3
}
 800530e:	4618      	mov	r0, r3
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000088 	.word	0x20000088

08005318 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b082      	sub	sp, #8
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005320:	6879      	ldr	r1, [r7, #4]
 8005322:	4803      	ldr	r0, [pc, #12]	@ (8005330 <BSP_SD_GetCardInfo+0x18>)
 8005324:	f7fd feb2 	bl	800308c <HAL_SD_GetCardInfo>
}
 8005328:	bf00      	nop
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	20000088 	.word	0x20000088

08005334 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800533a:	2301      	movs	r3, #1
 800533c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800533e:	f000 f80b 	bl	8005358 <BSP_PlatformIsDetected>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005348:	2300      	movs	r3, #0
 800534a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800534c:	79fb      	ldrb	r3, [r7, #7]
 800534e:	b2db      	uxtb	r3, r3
}
 8005350:	4618      	mov	r0, r3
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b082      	sub	sp, #8
 800535c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800535e:	2301      	movs	r3, #1
 8005360:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005362:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005366:	4806      	ldr	r0, [pc, #24]	@ (8005380 <BSP_PlatformIsDetected+0x28>)
 8005368:	f7fc fbfe 	bl	8001b68 <HAL_GPIO_ReadPin>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005372:	2300      	movs	r3, #0
 8005374:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005376:	79fb      	ldrb	r3, [r7, #7]
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40020000 	.word	0x40020000

08005384 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800538e:	4b0b      	ldr	r3, [pc, #44]	@ (80053bc <SD_CheckStatus+0x38>)
 8005390:	2201      	movs	r2, #1
 8005392:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005394:	f7ff ffb0 	bl	80052f8 <BSP_SD_GetCardState>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d107      	bne.n	80053ae <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800539e:	4b07      	ldr	r3, [pc, #28]	@ (80053bc <SD_CheckStatus+0x38>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	b2db      	uxtb	r3, r3
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	b2da      	uxtb	r2, r3
 80053aa:	4b04      	ldr	r3, [pc, #16]	@ (80053bc <SD_CheckStatus+0x38>)
 80053ac:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80053ae:	4b03      	ldr	r3, [pc, #12]	@ (80053bc <SD_CheckStatus+0x38>)
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	b2db      	uxtb	r3, r3
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3708      	adds	r7, #8
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	2000000d 	.word	0x2000000d

080053c0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	4603      	mov	r3, r0
 80053c8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80053ca:	4b0b      	ldr	r3, [pc, #44]	@ (80053f8 <SD_initialize+0x38>)
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80053d0:	f7ff ff30 	bl	8005234 <BSP_SD_Init>
 80053d4:	4603      	mov	r3, r0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d107      	bne.n	80053ea <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	4618      	mov	r0, r3
 80053de:	f7ff ffd1 	bl	8005384 <SD_CheckStatus>
 80053e2:	4603      	mov	r3, r0
 80053e4:	461a      	mov	r2, r3
 80053e6:	4b04      	ldr	r3, [pc, #16]	@ (80053f8 <SD_initialize+0x38>)
 80053e8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80053ea:	4b03      	ldr	r3, [pc, #12]	@ (80053f8 <SD_initialize+0x38>)
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	b2db      	uxtb	r3, r3
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	2000000d 	.word	0x2000000d

080053fc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b082      	sub	sp, #8
 8005400:	af00      	add	r7, sp, #0
 8005402:	4603      	mov	r3, r0
 8005404:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005406:	79fb      	ldrb	r3, [r7, #7]
 8005408:	4618      	mov	r0, r3
 800540a:	f7ff ffbb 	bl	8005384 <SD_CheckStatus>
 800540e:	4603      	mov	r3, r0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	60b9      	str	r1, [r7, #8]
 8005420:	607a      	str	r2, [r7, #4]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4603      	mov	r3, r0
 8005426:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005428:	2301      	movs	r3, #1
 800542a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800542c:	f04f 33ff 	mov.w	r3, #4294967295
 8005430:	683a      	ldr	r2, [r7, #0]
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	68b8      	ldr	r0, [r7, #8]
 8005436:	f7ff ff23 	bl	8005280 <BSP_SD_ReadBlocks>
 800543a:	4603      	mov	r3, r0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d107      	bne.n	8005450 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005440:	bf00      	nop
 8005442:	f7ff ff59 	bl	80052f8 <BSP_SD_GetCardState>
 8005446:	4603      	mov	r3, r0
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1fa      	bne.n	8005442 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800544c:	2300      	movs	r3, #0
 800544e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005450:	7dfb      	ldrb	r3, [r7, #23]
}
 8005452:	4618      	mov	r0, r3
 8005454:	3718      	adds	r7, #24
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b086      	sub	sp, #24
 800545e:	af00      	add	r7, sp, #0
 8005460:	60b9      	str	r1, [r7, #8]
 8005462:	607a      	str	r2, [r7, #4]
 8005464:	603b      	str	r3, [r7, #0]
 8005466:	4603      	mov	r3, r0
 8005468:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800546a:	2301      	movs	r3, #1
 800546c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800546e:	f04f 33ff 	mov.w	r3, #4294967295
 8005472:	683a      	ldr	r2, [r7, #0]
 8005474:	6879      	ldr	r1, [r7, #4]
 8005476:	68b8      	ldr	r0, [r7, #8]
 8005478:	f7ff ff20 	bl	80052bc <BSP_SD_WriteBlocks>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d107      	bne.n	8005492 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005482:	bf00      	nop
 8005484:	f7ff ff38 	bl	80052f8 <BSP_SD_GetCardState>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1fa      	bne.n	8005484 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800548e:	2300      	movs	r3, #0
 8005490:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005492:	7dfb      	ldrb	r3, [r7, #23]
}
 8005494:	4618      	mov	r0, r3
 8005496:	3718      	adds	r7, #24
 8005498:	46bd      	mov	sp, r7
 800549a:	bd80      	pop	{r7, pc}

0800549c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b08c      	sub	sp, #48	@ 0x30
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	4603      	mov	r3, r0
 80054a4:	603a      	str	r2, [r7, #0]
 80054a6:	71fb      	strb	r3, [r7, #7]
 80054a8:	460b      	mov	r3, r1
 80054aa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80054ac:	2301      	movs	r3, #1
 80054ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80054b2:	4b25      	ldr	r3, [pc, #148]	@ (8005548 <SD_ioctl+0xac>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	f003 0301 	and.w	r3, r3, #1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d001      	beq.n	80054c4 <SD_ioctl+0x28>
 80054c0:	2303      	movs	r3, #3
 80054c2:	e03c      	b.n	800553e <SD_ioctl+0xa2>

  switch (cmd)
 80054c4:	79bb      	ldrb	r3, [r7, #6]
 80054c6:	2b03      	cmp	r3, #3
 80054c8:	d834      	bhi.n	8005534 <SD_ioctl+0x98>
 80054ca:	a201      	add	r2, pc, #4	@ (adr r2, 80054d0 <SD_ioctl+0x34>)
 80054cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054d0:	080054e1 	.word	0x080054e1
 80054d4:	080054e9 	.word	0x080054e9
 80054d8:	08005501 	.word	0x08005501
 80054dc:	0800551b 	.word	0x0800551b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80054e6:	e028      	b.n	800553a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80054e8:	f107 030c 	add.w	r3, r7, #12
 80054ec:	4618      	mov	r0, r3
 80054ee:	f7ff ff13 	bl	8005318 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80054f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80054f8:	2300      	movs	r3, #0
 80054fa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 80054fe:	e01c      	b.n	800553a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005500:	f107 030c 	add.w	r3, r7, #12
 8005504:	4618      	mov	r0, r3
 8005506:	f7ff ff07 	bl	8005318 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800550a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800550c:	b29a      	uxth	r2, r3
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005512:	2300      	movs	r3, #0
 8005514:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005518:	e00f      	b.n	800553a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800551a:	f107 030c 	add.w	r3, r7, #12
 800551e:	4618      	mov	r0, r3
 8005520:	f7ff fefa 	bl	8005318 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005526:	0a5a      	lsrs	r2, r3, #9
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800552c:	2300      	movs	r3, #0
 800552e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005532:	e002      	b.n	800553a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005534:	2304      	movs	r3, #4
 8005536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 800553a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800553e:	4618      	mov	r0, r3
 8005540:	3730      	adds	r7, #48	@ 0x30
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	2000000d 	.word	0x2000000d

0800554c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b084      	sub	sp, #16
 8005550:	af00      	add	r7, sp, #0
 8005552:	4603      	mov	r3, r0
 8005554:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005556:	79fb      	ldrb	r3, [r7, #7]
 8005558:	4a08      	ldr	r2, [pc, #32]	@ (800557c <disk_status+0x30>)
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	79fa      	ldrb	r2, [r7, #7]
 8005564:	4905      	ldr	r1, [pc, #20]	@ (800557c <disk_status+0x30>)
 8005566:	440a      	add	r2, r1
 8005568:	7a12      	ldrb	r2, [r2, #8]
 800556a:	4610      	mov	r0, r2
 800556c:	4798      	blx	r3
 800556e:	4603      	mov	r3, r0
 8005570:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005572:	7bfb      	ldrb	r3, [r7, #15]
}
 8005574:	4618      	mov	r0, r3
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	20000420 	.word	0x20000420

08005580 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	4603      	mov	r3, r0
 8005588:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	4a0e      	ldr	r2, [pc, #56]	@ (80055cc <disk_initialize+0x4c>)
 8005592:	5cd3      	ldrb	r3, [r2, r3]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d114      	bne.n	80055c2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	4a0c      	ldr	r2, [pc, #48]	@ (80055cc <disk_initialize+0x4c>)
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	685b      	ldr	r3, [r3, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	79fa      	ldrb	r2, [r7, #7]
 80055a6:	4909      	ldr	r1, [pc, #36]	@ (80055cc <disk_initialize+0x4c>)
 80055a8:	440a      	add	r2, r1
 80055aa:	7a12      	ldrb	r2, [r2, #8]
 80055ac:	4610      	mov	r0, r2
 80055ae:	4798      	blx	r3
 80055b0:	4603      	mov	r3, r0
 80055b2:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d103      	bne.n	80055c2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80055ba:	79fb      	ldrb	r3, [r7, #7]
 80055bc:	4a03      	ldr	r2, [pc, #12]	@ (80055cc <disk_initialize+0x4c>)
 80055be:	2101      	movs	r1, #1
 80055c0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3710      	adds	r7, #16
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}
 80055cc:	20000420 	.word	0x20000420

080055d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80055d0:	b590      	push	{r4, r7, lr}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60b9      	str	r1, [r7, #8]
 80055d8:	607a      	str	r2, [r7, #4]
 80055da:	603b      	str	r3, [r7, #0]
 80055dc:	4603      	mov	r3, r0
 80055de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80055e0:	7bfb      	ldrb	r3, [r7, #15]
 80055e2:	4a0a      	ldr	r2, [pc, #40]	@ (800560c <disk_read+0x3c>)
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	689c      	ldr	r4, [r3, #8]
 80055ec:	7bfb      	ldrb	r3, [r7, #15]
 80055ee:	4a07      	ldr	r2, [pc, #28]	@ (800560c <disk_read+0x3c>)
 80055f0:	4413      	add	r3, r2
 80055f2:	7a18      	ldrb	r0, [r3, #8]
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	68b9      	ldr	r1, [r7, #8]
 80055fa:	47a0      	blx	r4
 80055fc:	4603      	mov	r3, r0
 80055fe:	75fb      	strb	r3, [r7, #23]
  return res;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
}
 8005602:	4618      	mov	r0, r3
 8005604:	371c      	adds	r7, #28
 8005606:	46bd      	mov	sp, r7
 8005608:	bd90      	pop	{r4, r7, pc}
 800560a:	bf00      	nop
 800560c:	20000420 	.word	0x20000420

08005610 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005610:	b590      	push	{r4, r7, lr}
 8005612:	b087      	sub	sp, #28
 8005614:	af00      	add	r7, sp, #0
 8005616:	60b9      	str	r1, [r7, #8]
 8005618:	607a      	str	r2, [r7, #4]
 800561a:	603b      	str	r3, [r7, #0]
 800561c:	4603      	mov	r3, r0
 800561e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005620:	7bfb      	ldrb	r3, [r7, #15]
 8005622:	4a0a      	ldr	r2, [pc, #40]	@ (800564c <disk_write+0x3c>)
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	4413      	add	r3, r2
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	68dc      	ldr	r4, [r3, #12]
 800562c:	7bfb      	ldrb	r3, [r7, #15]
 800562e:	4a07      	ldr	r2, [pc, #28]	@ (800564c <disk_write+0x3c>)
 8005630:	4413      	add	r3, r2
 8005632:	7a18      	ldrb	r0, [r3, #8]
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	68b9      	ldr	r1, [r7, #8]
 800563a:	47a0      	blx	r4
 800563c:	4603      	mov	r3, r0
 800563e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005640:	7dfb      	ldrb	r3, [r7, #23]
}
 8005642:	4618      	mov	r0, r3
 8005644:	371c      	adds	r7, #28
 8005646:	46bd      	mov	sp, r7
 8005648:	bd90      	pop	{r4, r7, pc}
 800564a:	bf00      	nop
 800564c:	20000420 	.word	0x20000420

08005650 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	3301      	adds	r3, #1
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005660:	89fb      	ldrh	r3, [r7, #14]
 8005662:	021b      	lsls	r3, r3, #8
 8005664:	b21a      	sxth	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	b21b      	sxth	r3, r3
 800566c:	4313      	orrs	r3, r2
 800566e:	b21b      	sxth	r3, r3
 8005670:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005672:	89fb      	ldrh	r3, [r7, #14]
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567e:	4770      	bx	lr

08005680 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005680:	b480      	push	{r7}
 8005682:	b085      	sub	sp, #20
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	3303      	adds	r3, #3
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	021b      	lsls	r3, r3, #8
 8005694:	687a      	ldr	r2, [r7, #4]
 8005696:	3202      	adds	r2, #2
 8005698:	7812      	ldrb	r2, [r2, #0]
 800569a:	4313      	orrs	r3, r2
 800569c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	021b      	lsls	r3, r3, #8
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	3201      	adds	r2, #1
 80056a6:	7812      	ldrb	r2, [r2, #0]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	021b      	lsls	r3, r3, #8
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	7812      	ldrb	r2, [r2, #0]
 80056b4:	4313      	orrs	r3, r2
 80056b6:	60fb      	str	r3, [r7, #12]
	return rv;
 80056b8:	68fb      	ldr	r3, [r7, #12]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3714      	adds	r7, #20
 80056be:	46bd      	mov	sp, r7
 80056c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c4:	4770      	bx	lr
	...

080056c8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80056d0:	2300      	movs	r3, #0
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	e010      	b.n	80056f8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80056d6:	4a0d      	ldr	r2, [pc, #52]	@ (800570c <clear_lock+0x44>)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	4413      	add	r3, r2
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d105      	bne.n	80056f2 <clear_lock+0x2a>
 80056e6:	4a09      	ldr	r2, [pc, #36]	@ (800570c <clear_lock+0x44>)
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4413      	add	r3, r2
 80056ee:	2200      	movs	r2, #0
 80056f0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	3301      	adds	r3, #1
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d9eb      	bls.n	80056d6 <clear_lock+0xe>
	}
}
 80056fe:	bf00      	nop
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr
 800570c:	20000400 	.word	0x20000400

08005710 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005718:	2300      	movs	r3, #0
 800571a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	78db      	ldrb	r3, [r3, #3]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d034      	beq.n	800578e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005728:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	7858      	ldrb	r0, [r3, #1]
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005734:	2301      	movs	r3, #1
 8005736:	697a      	ldr	r2, [r7, #20]
 8005738:	f7ff ff6a 	bl	8005610 <disk_write>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d002      	beq.n	8005748 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005742:	2301      	movs	r3, #1
 8005744:	73fb      	strb	r3, [r7, #15]
 8005746:	e022      	b.n	800578e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	1ad2      	subs	r2, r2, r3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	429a      	cmp	r2, r3
 800575c:	d217      	bcs.n	800578e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	789b      	ldrb	r3, [r3, #2]
 8005762:	613b      	str	r3, [r7, #16]
 8005764:	e010      	b.n	8005788 <sync_window+0x78>
					wsect += fs->fsize;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	699b      	ldr	r3, [r3, #24]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	4413      	add	r3, r2
 800576e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	7858      	ldrb	r0, [r3, #1]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800577a:	2301      	movs	r3, #1
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	f7ff ff47 	bl	8005610 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	3b01      	subs	r3, #1
 8005786:	613b      	str	r3, [r7, #16]
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d8eb      	bhi.n	8005766 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800578e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005790:	4618      	mov	r0, r3
 8005792:	3718      	adds	r7, #24
 8005794:	46bd      	mov	sp, r7
 8005796:	bd80      	pop	{r7, pc}

08005798 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80057a2:	2300      	movs	r3, #0
 80057a4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057aa:	683a      	ldr	r2, [r7, #0]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d01b      	beq.n	80057e8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7ff ffad 	bl	8005710 <sync_window>
 80057b6:	4603      	mov	r3, r0
 80057b8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80057ba:	7bfb      	ldrb	r3, [r7, #15]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d113      	bne.n	80057e8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	7858      	ldrb	r0, [r3, #1]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80057ca:	2301      	movs	r3, #1
 80057cc:	683a      	ldr	r2, [r7, #0]
 80057ce:	f7ff feff 	bl	80055d0 <disk_read>
 80057d2:	4603      	mov	r3, r0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d004      	beq.n	80057e2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80057d8:	f04f 33ff 	mov.w	r3, #4294967295
 80057dc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80057de:	2301      	movs	r3, #1
 80057e0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	683a      	ldr	r2, [r7, #0]
 80057e6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 80057e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80057f2:	b480      	push	{r7}
 80057f4:	b087      	sub	sp, #28
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80057fa:	f04f 33ff 	mov.w	r3, #4294967295
 80057fe:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d031      	beq.n	800586c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	617b      	str	r3, [r7, #20]
 800580e:	e002      	b.n	8005816 <get_ldnumber+0x24>
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	3301      	adds	r3, #1
 8005814:	617b      	str	r3, [r7, #20]
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b20      	cmp	r3, #32
 800581c:	d903      	bls.n	8005826 <get_ldnumber+0x34>
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b3a      	cmp	r3, #58	@ 0x3a
 8005824:	d1f4      	bne.n	8005810 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	781b      	ldrb	r3, [r3, #0]
 800582a:	2b3a      	cmp	r3, #58	@ 0x3a
 800582c:	d11c      	bne.n	8005868 <get_ldnumber+0x76>
			tp = *path;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	1c5a      	adds	r2, r3, #1
 8005838:	60fa      	str	r2, [r7, #12]
 800583a:	781b      	ldrb	r3, [r3, #0]
 800583c:	3b30      	subs	r3, #48	@ 0x30
 800583e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	2b09      	cmp	r3, #9
 8005844:	d80e      	bhi.n	8005864 <get_ldnumber+0x72>
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	697b      	ldr	r3, [r7, #20]
 800584a:	429a      	cmp	r2, r3
 800584c:	d10a      	bne.n	8005864 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d107      	bne.n	8005864 <get_ldnumber+0x72>
					vol = (int)i;
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005858:	697b      	ldr	r3, [r7, #20]
 800585a:	3301      	adds	r3, #1
 800585c:	617b      	str	r3, [r7, #20]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	697a      	ldr	r2, [r7, #20]
 8005862:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	e002      	b.n	800586e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005868:	2300      	movs	r3, #0
 800586a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800586c:	693b      	ldr	r3, [r7, #16]
}
 800586e:	4618      	mov	r0, r3
 8005870:	371c      	adds	r7, #28
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	70da      	strb	r2, [r3, #3]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f04f 32ff 	mov.w	r2, #4294967295
 8005892:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005894:	6839      	ldr	r1, [r7, #0]
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff ff7e 	bl	8005798 <move_window>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d001      	beq.n	80058a6 <check_fs+0x2a>
 80058a2:	2304      	movs	r3, #4
 80058a4:	e038      	b.n	8005918 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	3330      	adds	r3, #48	@ 0x30
 80058aa:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7ff fece 	bl	8005650 <ld_word>
 80058b4:	4603      	mov	r3, r0
 80058b6:	461a      	mov	r2, r3
 80058b8:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80058bc:	429a      	cmp	r2, r3
 80058be:	d001      	beq.n	80058c4 <check_fs+0x48>
 80058c0:	2303      	movs	r3, #3
 80058c2:	e029      	b.n	8005918 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80058ca:	2be9      	cmp	r3, #233	@ 0xe9
 80058cc:	d009      	beq.n	80058e2 <check_fs+0x66>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80058d4:	2beb      	cmp	r3, #235	@ 0xeb
 80058d6:	d11e      	bne.n	8005916 <check_fs+0x9a>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80058de:	2b90      	cmp	r3, #144	@ 0x90
 80058e0:	d119      	bne.n	8005916 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	3330      	adds	r3, #48	@ 0x30
 80058e6:	3336      	adds	r3, #54	@ 0x36
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7ff fec9 	bl	8005680 <ld_dword>
 80058ee:	4603      	mov	r3, r0
 80058f0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80058f4:	4a0a      	ldr	r2, [pc, #40]	@ (8005920 <check_fs+0xa4>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d101      	bne.n	80058fe <check_fs+0x82>
 80058fa:	2300      	movs	r3, #0
 80058fc:	e00c      	b.n	8005918 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3330      	adds	r3, #48	@ 0x30
 8005902:	3352      	adds	r3, #82	@ 0x52
 8005904:	4618      	mov	r0, r3
 8005906:	f7ff febb 	bl	8005680 <ld_dword>
 800590a:	4603      	mov	r3, r0
 800590c:	4a05      	ldr	r2, [pc, #20]	@ (8005924 <check_fs+0xa8>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d101      	bne.n	8005916 <check_fs+0x9a>
 8005912:	2300      	movs	r3, #0
 8005914:	e000      	b.n	8005918 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005916:	2302      	movs	r3, #2
}
 8005918:	4618      	mov	r0, r3
 800591a:	3708      	adds	r7, #8
 800591c:	46bd      	mov	sp, r7
 800591e:	bd80      	pop	{r7, pc}
 8005920:	00544146 	.word	0x00544146
 8005924:	33544146 	.word	0x33544146

08005928 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b096      	sub	sp, #88	@ 0x58
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	4613      	mov	r3, r2
 8005934:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	2200      	movs	r2, #0
 800593a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	f7ff ff58 	bl	80057f2 <get_ldnumber>
 8005942:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005944:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005946:	2b00      	cmp	r3, #0
 8005948:	da01      	bge.n	800594e <find_volume+0x26>
 800594a:	230b      	movs	r3, #11
 800594c:	e22d      	b.n	8005daa <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800594e:	4aa1      	ldr	r2, [pc, #644]	@ (8005bd4 <find_volume+0x2ac>)
 8005950:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005956:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595a:	2b00      	cmp	r3, #0
 800595c:	d101      	bne.n	8005962 <find_volume+0x3a>
 800595e:	230c      	movs	r3, #12
 8005960:	e223      	b.n	8005daa <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005966:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005968:	79fb      	ldrb	r3, [r7, #7]
 800596a:	f023 0301 	bic.w	r3, r3, #1
 800596e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005972:	781b      	ldrb	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d01a      	beq.n	80059ae <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005978:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	4618      	mov	r0, r3
 800597e:	f7ff fde5 	bl	800554c <disk_status>
 8005982:	4603      	mov	r3, r0
 8005984:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005988:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10c      	bne.n	80059ae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005994:	79fb      	ldrb	r3, [r7, #7]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d007      	beq.n	80059aa <find_volume+0x82>
 800599a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d001      	beq.n	80059aa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80059a6:	230a      	movs	r3, #10
 80059a8:	e1ff      	b.n	8005daa <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80059aa:	2300      	movs	r3, #0
 80059ac:	e1fd      	b.n	8005daa <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80059ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80059b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059b6:	b2da      	uxtb	r2, r3
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80059bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059be:	785b      	ldrb	r3, [r3, #1]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7ff fddd 	bl	8005580 <disk_initialize>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80059cc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059d0:	f003 0301 	and.w	r3, r3, #1
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d001      	beq.n	80059dc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80059d8:	2303      	movs	r3, #3
 80059da:	e1e6      	b.n	8005daa <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80059dc:	79fb      	ldrb	r3, [r7, #7]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d007      	beq.n	80059f2 <find_volume+0xca>
 80059e2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059e6:	f003 0304 	and.w	r3, r3, #4
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80059ee:	230a      	movs	r3, #10
 80059f0:	e1db      	b.n	8005daa <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80059f2:	2300      	movs	r3, #0
 80059f4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80059f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80059f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059fa:	f7ff ff3f 	bl	800587c <check_fs>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a04:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d149      	bne.n	8005aa0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a10:	e01e      	b.n	8005a50 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005a12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a14:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a1a:	011b      	lsls	r3, r3, #4
 8005a1c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005a20:	4413      	add	r3, r2
 8005a22:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	3304      	adds	r3, #4
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d006      	beq.n	8005a3c <find_volume+0x114>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	3308      	adds	r3, #8
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7ff fe24 	bl	8005680 <ld_dword>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	e000      	b.n	8005a3e <find_volume+0x116>
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	3358      	adds	r3, #88	@ 0x58
 8005a44:	443b      	add	r3, r7
 8005a46:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a4a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d9dd      	bls.n	8005a12 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005a56:	2300      	movs	r3, #0
 8005a58:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005a5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d002      	beq.n	8005a66 <find_volume+0x13e>
 8005a60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a62:	3b01      	subs	r3, #1
 8005a64:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	3358      	adds	r3, #88	@ 0x58
 8005a6c:	443b      	add	r3, r7
 8005a6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005a72:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d005      	beq.n	8005a86 <find_volume+0x15e>
 8005a7a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a7c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a7e:	f7ff fefd 	bl	800587c <check_fs>
 8005a82:	4603      	mov	r3, r0
 8005a84:	e000      	b.n	8005a88 <find_volume+0x160>
 8005a86:	2303      	movs	r3, #3
 8005a88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d905      	bls.n	8005aa0 <find_volume+0x178>
 8005a94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a96:	3301      	adds	r3, #1
 8005a98:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a9c:	2b03      	cmp	r3, #3
 8005a9e:	d9e2      	bls.n	8005a66 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005aa4:	2b04      	cmp	r3, #4
 8005aa6:	d101      	bne.n	8005aac <find_volume+0x184>
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e17e      	b.n	8005daa <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005aac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d901      	bls.n	8005ab8 <find_volume+0x190>
 8005ab4:	230d      	movs	r3, #13
 8005ab6:	e178      	b.n	8005daa <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aba:	3330      	adds	r3, #48	@ 0x30
 8005abc:	330b      	adds	r3, #11
 8005abe:	4618      	mov	r0, r3
 8005ac0:	f7ff fdc6 	bl	8005650 <ld_word>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aca:	d001      	beq.n	8005ad0 <find_volume+0x1a8>
 8005acc:	230d      	movs	r3, #13
 8005ace:	e16c      	b.n	8005daa <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005ad0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ad2:	3330      	adds	r3, #48	@ 0x30
 8005ad4:	3316      	adds	r3, #22
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7ff fdba 	bl	8005650 <ld_word>
 8005adc:	4603      	mov	r3, r0
 8005ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d106      	bne.n	8005af4 <find_volume+0x1cc>
 8005ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae8:	3330      	adds	r3, #48	@ 0x30
 8005aea:	3324      	adds	r3, #36	@ 0x24
 8005aec:	4618      	mov	r0, r3
 8005aee:	f7ff fdc7 	bl	8005680 <ld_dword>
 8005af2:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005af8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afc:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8005b00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b02:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b06:	789b      	ldrb	r3, [r3, #2]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d005      	beq.n	8005b18 <find_volume+0x1f0>
 8005b0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0e:	789b      	ldrb	r3, [r3, #2]
 8005b10:	2b02      	cmp	r3, #2
 8005b12:	d001      	beq.n	8005b18 <find_volume+0x1f0>
 8005b14:	230d      	movs	r3, #13
 8005b16:	e148      	b.n	8005daa <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1a:	789b      	ldrb	r3, [r3, #2]
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b20:	fb02 f303 	mul.w	r3, r2, r3
 8005b24:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b30:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005b32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b34:	895b      	ldrh	r3, [r3, #10]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d008      	beq.n	8005b4c <find_volume+0x224>
 8005b3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b3c:	895b      	ldrh	r3, [r3, #10]
 8005b3e:	461a      	mov	r2, r3
 8005b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b42:	895b      	ldrh	r3, [r3, #10]
 8005b44:	3b01      	subs	r3, #1
 8005b46:	4013      	ands	r3, r2
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <find_volume+0x228>
 8005b4c:	230d      	movs	r3, #13
 8005b4e:	e12c      	b.n	8005daa <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005b50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b52:	3330      	adds	r3, #48	@ 0x30
 8005b54:	3311      	adds	r3, #17
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7ff fd7a 	bl	8005650 <ld_word>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	461a      	mov	r2, r3
 8005b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b62:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005b64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b66:	891b      	ldrh	r3, [r3, #8]
 8005b68:	f003 030f 	and.w	r3, r3, #15
 8005b6c:	b29b      	uxth	r3, r3
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <find_volume+0x24e>
 8005b72:	230d      	movs	r3, #13
 8005b74:	e119      	b.n	8005daa <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005b76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b78:	3330      	adds	r3, #48	@ 0x30
 8005b7a:	3313      	adds	r3, #19
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff fd67 	bl	8005650 <ld_word>
 8005b82:	4603      	mov	r3, r0
 8005b84:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005b86:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d106      	bne.n	8005b9a <find_volume+0x272>
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8e:	3330      	adds	r3, #48	@ 0x30
 8005b90:	3320      	adds	r3, #32
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7ff fd74 	bl	8005680 <ld_dword>
 8005b98:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005b9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b9c:	3330      	adds	r3, #48	@ 0x30
 8005b9e:	330e      	adds	r3, #14
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	f7ff fd55 	bl	8005650 <ld_word>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005baa:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d101      	bne.n	8005bb4 <find_volume+0x28c>
 8005bb0:	230d      	movs	r3, #13
 8005bb2:	e0fa      	b.n	8005daa <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005bb4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005bb6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bb8:	4413      	add	r3, r2
 8005bba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005bbc:	8912      	ldrh	r2, [r2, #8]
 8005bbe:	0912      	lsrs	r2, r2, #4
 8005bc0:	b292      	uxth	r2, r2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005bc6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d204      	bcs.n	8005bd8 <find_volume+0x2b0>
 8005bce:	230d      	movs	r3, #13
 8005bd0:	e0eb      	b.n	8005daa <find_volume+0x482>
 8005bd2:	bf00      	nop
 8005bd4:	200003f8 	.word	0x200003f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005bd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005be0:	8952      	ldrh	r2, [r2, #10]
 8005be2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005be6:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <find_volume+0x2ca>
 8005bee:	230d      	movs	r3, #13
 8005bf0:	e0db      	b.n	8005daa <find_volume+0x482>
		fmt = FS_FAT32;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d802      	bhi.n	8005c08 <find_volume+0x2e0>
 8005c02:	2302      	movs	r3, #2
 8005c04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d802      	bhi.n	8005c18 <find_volume+0x2f0>
 8005c12:	2301      	movs	r3, #1
 8005c14:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005c18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1a:	1c9a      	adds	r2, r3, #2
 8005c1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1e:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005c20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c24:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005c26:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005c28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c2a:	441a      	add	r2, r3
 8005c2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2e:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005c30:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c34:	441a      	add	r2, r3
 8005c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c38:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8005c3a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c3e:	2b03      	cmp	r3, #3
 8005c40:	d11e      	bne.n	8005c80 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c44:	3330      	adds	r3, #48	@ 0x30
 8005c46:	332a      	adds	r3, #42	@ 0x2a
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f7ff fd01 	bl	8005650 <ld_word>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <find_volume+0x330>
 8005c54:	230d      	movs	r3, #13
 8005c56:	e0a8      	b.n	8005daa <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005c58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5a:	891b      	ldrh	r3, [r3, #8]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d001      	beq.n	8005c64 <find_volume+0x33c>
 8005c60:	230d      	movs	r3, #13
 8005c62:	e0a2      	b.n	8005daa <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005c64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c66:	3330      	adds	r3, #48	@ 0x30
 8005c68:	332c      	adds	r3, #44	@ 0x2c
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f7ff fd08 	bl	8005680 <ld_dword>
 8005c70:	4602      	mov	r2, r0
 8005c72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c74:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c7e:	e01f      	b.n	8005cc0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c82:	891b      	ldrh	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <find_volume+0x364>
 8005c88:	230d      	movs	r3, #13
 8005c8a:	e08e      	b.n	8005daa <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8e:	6a1a      	ldr	r2, [r3, #32]
 8005c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c92:	441a      	add	r2, r3
 8005c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c96:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005c98:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c9c:	2b02      	cmp	r3, #2
 8005c9e:	d103      	bne.n	8005ca8 <find_volume+0x380>
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca2:	695b      	ldr	r3, [r3, #20]
 8005ca4:	005b      	lsls	r3, r3, #1
 8005ca6:	e00a      	b.n	8005cbe <find_volume+0x396>
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	4613      	mov	r3, r2
 8005cae:	005b      	lsls	r3, r3, #1
 8005cb0:	4413      	add	r3, r2
 8005cb2:	085a      	lsrs	r2, r3, #1
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	f003 0301 	and.w	r3, r3, #1
 8005cbc:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005cbe:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc2:	699a      	ldr	r2, [r3, #24]
 8005cc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cc6:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005cca:	0a5b      	lsrs	r3, r3, #9
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d201      	bcs.n	8005cd4 <find_volume+0x3ac>
 8005cd0:	230d      	movs	r3, #13
 8005cd2:	e06a      	b.n	8005daa <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8005cda:	611a      	str	r2, [r3, #16]
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cde:	691a      	ldr	r2, [r3, #16]
 8005ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce6:	2280      	movs	r2, #128	@ 0x80
 8005ce8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005cea:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cee:	2b03      	cmp	r3, #3
 8005cf0:	d149      	bne.n	8005d86 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005cf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf4:	3330      	adds	r3, #48	@ 0x30
 8005cf6:	3330      	adds	r3, #48	@ 0x30
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f7ff fca9 	bl	8005650 <ld_word>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d140      	bne.n	8005d86 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005d04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d06:	3301      	adds	r3, #1
 8005d08:	4619      	mov	r1, r3
 8005d0a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d0c:	f7ff fd44 	bl	8005798 <move_window>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d137      	bne.n	8005d86 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005d16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d18:	2200      	movs	r2, #0
 8005d1a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1e:	3330      	adds	r3, #48	@ 0x30
 8005d20:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff fc93 	bl	8005650 <ld_word>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	461a      	mov	r2, r3
 8005d2e:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005d32:	429a      	cmp	r2, r3
 8005d34:	d127      	bne.n	8005d86 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d38:	3330      	adds	r3, #48	@ 0x30
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7ff fca0 	bl	8005680 <ld_dword>
 8005d40:	4603      	mov	r3, r0
 8005d42:	4a1c      	ldr	r2, [pc, #112]	@ (8005db4 <find_volume+0x48c>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d11e      	bne.n	8005d86 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4a:	3330      	adds	r3, #48	@ 0x30
 8005d4c:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005d50:	4618      	mov	r0, r3
 8005d52:	f7ff fc95 	bl	8005680 <ld_dword>
 8005d56:	4603      	mov	r3, r0
 8005d58:	4a17      	ldr	r2, [pc, #92]	@ (8005db8 <find_volume+0x490>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d113      	bne.n	8005d86 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d60:	3330      	adds	r3, #48	@ 0x30
 8005d62:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005d66:	4618      	mov	r0, r3
 8005d68:	f7ff fc8a 	bl	8005680 <ld_dword>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d70:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d74:	3330      	adds	r3, #48	@ 0x30
 8005d76:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f7ff fc80 	bl	8005680 <ld_dword>
 8005d80:	4602      	mov	r2, r0
 8005d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d84:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d88:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005d8c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005d8e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dbc <find_volume+0x494>)
 8005d90:	881b      	ldrh	r3, [r3, #0]
 8005d92:	3301      	adds	r3, #1
 8005d94:	b29a      	uxth	r2, r3
 8005d96:	4b09      	ldr	r3, [pc, #36]	@ (8005dbc <find_volume+0x494>)
 8005d98:	801a      	strh	r2, [r3, #0]
 8005d9a:	4b08      	ldr	r3, [pc, #32]	@ (8005dbc <find_volume+0x494>)
 8005d9c:	881a      	ldrh	r2, [r3, #0]
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da0:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005da2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005da4:	f7ff fc90 	bl	80056c8 <clear_lock>
#endif
	return FR_OK;
 8005da8:	2300      	movs	r3, #0
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3758      	adds	r7, #88	@ 0x58
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop
 8005db4:	41615252 	.word	0x41615252
 8005db8:	61417272 	.word	0x61417272
 8005dbc:	200003fc 	.word	0x200003fc

08005dc0 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b088      	sub	sp, #32
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	60f8      	str	r0, [r7, #12]
 8005dc8:	60b9      	str	r1, [r7, #8]
 8005dca:	4613      	mov	r3, r2
 8005dcc:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005dd2:	f107 0310 	add.w	r3, r7, #16
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff fd0b 	bl	80057f2 <get_ldnumber>
 8005ddc:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005dde:	69fb      	ldr	r3, [r7, #28]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	da01      	bge.n	8005de8 <f_mount+0x28>
 8005de4:	230b      	movs	r3, #11
 8005de6:	e02b      	b.n	8005e40 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005de8:	4a17      	ldr	r2, [pc, #92]	@ (8005e48 <f_mount+0x88>)
 8005dea:	69fb      	ldr	r3, [r7, #28]
 8005dec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df0:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005df2:	69bb      	ldr	r3, [r7, #24]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d005      	beq.n	8005e04 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005df8:	69b8      	ldr	r0, [r7, #24]
 8005dfa:	f7ff fc65 	bl	80056c8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	490d      	ldr	r1, [pc, #52]	@ (8005e48 <f_mount+0x88>)
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <f_mount+0x66>
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d001      	beq.n	8005e2a <f_mount+0x6a>
 8005e26:	2300      	movs	r3, #0
 8005e28:	e00a      	b.n	8005e40 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005e2a:	f107 010c 	add.w	r1, r7, #12
 8005e2e:	f107 0308 	add.w	r3, r7, #8
 8005e32:	2200      	movs	r2, #0
 8005e34:	4618      	mov	r0, r3
 8005e36:	f7ff fd77 	bl	8005928 <find_volume>
 8005e3a:	4603      	mov	r3, r0
 8005e3c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3720      	adds	r7, #32
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	200003f8 	.word	0x200003f8

08005e4c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	4613      	mov	r3, r2
 8005e58:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005e62:	4b1f      	ldr	r3, [pc, #124]	@ (8005ee0 <FATFS_LinkDriverEx+0x94>)
 8005e64:	7a5b      	ldrb	r3, [r3, #9]
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d131      	bne.n	8005ed0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005e6c:	4b1c      	ldr	r3, [pc, #112]	@ (8005ee0 <FATFS_LinkDriverEx+0x94>)
 8005e6e:	7a5b      	ldrb	r3, [r3, #9]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	461a      	mov	r2, r3
 8005e74:	4b1a      	ldr	r3, [pc, #104]	@ (8005ee0 <FATFS_LinkDriverEx+0x94>)
 8005e76:	2100      	movs	r1, #0
 8005e78:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005e7a:	4b19      	ldr	r3, [pc, #100]	@ (8005ee0 <FATFS_LinkDriverEx+0x94>)
 8005e7c:	7a5b      	ldrb	r3, [r3, #9]
 8005e7e:	b2db      	uxtb	r3, r3
 8005e80:	4a17      	ldr	r2, [pc, #92]	@ (8005ee0 <FATFS_LinkDriverEx+0x94>)
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	68fa      	ldr	r2, [r7, #12]
 8005e88:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005e8a:	4b15      	ldr	r3, [pc, #84]	@ (8005ee0 <FATFS_LinkDriverEx+0x94>)
 8005e8c:	7a5b      	ldrb	r3, [r3, #9]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	461a      	mov	r2, r3
 8005e92:	4b13      	ldr	r3, [pc, #76]	@ (8005ee0 <FATFS_LinkDriverEx+0x94>)
 8005e94:	4413      	add	r3, r2
 8005e96:	79fa      	ldrb	r2, [r7, #7]
 8005e98:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005e9a:	4b11      	ldr	r3, [pc, #68]	@ (8005ee0 <FATFS_LinkDriverEx+0x94>)
 8005e9c:	7a5b      	ldrb	r3, [r3, #9]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	1c5a      	adds	r2, r3, #1
 8005ea2:	b2d1      	uxtb	r1, r2
 8005ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8005ee0 <FATFS_LinkDriverEx+0x94>)
 8005ea6:	7251      	strb	r1, [r2, #9]
 8005ea8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005eaa:	7dbb      	ldrb	r3, [r7, #22]
 8005eac:	3330      	adds	r3, #48	@ 0x30
 8005eae:	b2da      	uxtb	r2, r3
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	3301      	adds	r3, #1
 8005eb8:	223a      	movs	r2, #58	@ 0x3a
 8005eba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	3302      	adds	r3, #2
 8005ec0:	222f      	movs	r2, #47	@ 0x2f
 8005ec2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	3303      	adds	r3, #3
 8005ec8:	2200      	movs	r2, #0
 8005eca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005ed0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
 8005ede:	bf00      	nop
 8005ee0:	20000420 	.word	0x20000420

08005ee4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005eee:	2200      	movs	r2, #0
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f7ff ffaa 	bl	8005e4c <FATFS_LinkDriverEx>
 8005ef8:	4603      	mov	r3, r0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	3708      	adds	r7, #8
 8005efe:	46bd      	mov	sp, r7
 8005f00:	bd80      	pop	{r7, pc}
	...

08005f04 <std>:
 8005f04:	2300      	movs	r3, #0
 8005f06:	b510      	push	{r4, lr}
 8005f08:	4604      	mov	r4, r0
 8005f0a:	e9c0 3300 	strd	r3, r3, [r0]
 8005f0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f12:	6083      	str	r3, [r0, #8]
 8005f14:	8181      	strh	r1, [r0, #12]
 8005f16:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f18:	81c2      	strh	r2, [r0, #14]
 8005f1a:	6183      	str	r3, [r0, #24]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	2208      	movs	r2, #8
 8005f20:	305c      	adds	r0, #92	@ 0x5c
 8005f22:	f000 f9f9 	bl	8006318 <memset>
 8005f26:	4b0d      	ldr	r3, [pc, #52]	@ (8005f5c <std+0x58>)
 8005f28:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f60 <std+0x5c>)
 8005f2c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f2e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f64 <std+0x60>)
 8005f30:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f32:	4b0d      	ldr	r3, [pc, #52]	@ (8005f68 <std+0x64>)
 8005f34:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f36:	4b0d      	ldr	r3, [pc, #52]	@ (8005f6c <std+0x68>)
 8005f38:	6224      	str	r4, [r4, #32]
 8005f3a:	429c      	cmp	r4, r3
 8005f3c:	d006      	beq.n	8005f4c <std+0x48>
 8005f3e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f42:	4294      	cmp	r4, r2
 8005f44:	d002      	beq.n	8005f4c <std+0x48>
 8005f46:	33d0      	adds	r3, #208	@ 0xd0
 8005f48:	429c      	cmp	r4, r3
 8005f4a:	d105      	bne.n	8005f58 <std+0x54>
 8005f4c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f54:	f000 ba58 	b.w	8006408 <__retarget_lock_init_recursive>
 8005f58:	bd10      	pop	{r4, pc}
 8005f5a:	bf00      	nop
 8005f5c:	08006169 	.word	0x08006169
 8005f60:	0800618b 	.word	0x0800618b
 8005f64:	080061c3 	.word	0x080061c3
 8005f68:	080061e7 	.word	0x080061e7
 8005f6c:	2000042c 	.word	0x2000042c

08005f70 <stdio_exit_handler>:
 8005f70:	4a02      	ldr	r2, [pc, #8]	@ (8005f7c <stdio_exit_handler+0xc>)
 8005f72:	4903      	ldr	r1, [pc, #12]	@ (8005f80 <stdio_exit_handler+0x10>)
 8005f74:	4803      	ldr	r0, [pc, #12]	@ (8005f84 <stdio_exit_handler+0x14>)
 8005f76:	f000 b869 	b.w	800604c <_fwalk_sglue>
 8005f7a:	bf00      	nop
 8005f7c:	20000010 	.word	0x20000010
 8005f80:	08006ca9 	.word	0x08006ca9
 8005f84:	20000020 	.word	0x20000020

08005f88 <cleanup_stdio>:
 8005f88:	6841      	ldr	r1, [r0, #4]
 8005f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8005fbc <cleanup_stdio+0x34>)
 8005f8c:	4299      	cmp	r1, r3
 8005f8e:	b510      	push	{r4, lr}
 8005f90:	4604      	mov	r4, r0
 8005f92:	d001      	beq.n	8005f98 <cleanup_stdio+0x10>
 8005f94:	f000 fe88 	bl	8006ca8 <_fflush_r>
 8005f98:	68a1      	ldr	r1, [r4, #8]
 8005f9a:	4b09      	ldr	r3, [pc, #36]	@ (8005fc0 <cleanup_stdio+0x38>)
 8005f9c:	4299      	cmp	r1, r3
 8005f9e:	d002      	beq.n	8005fa6 <cleanup_stdio+0x1e>
 8005fa0:	4620      	mov	r0, r4
 8005fa2:	f000 fe81 	bl	8006ca8 <_fflush_r>
 8005fa6:	68e1      	ldr	r1, [r4, #12]
 8005fa8:	4b06      	ldr	r3, [pc, #24]	@ (8005fc4 <cleanup_stdio+0x3c>)
 8005faa:	4299      	cmp	r1, r3
 8005fac:	d004      	beq.n	8005fb8 <cleanup_stdio+0x30>
 8005fae:	4620      	mov	r0, r4
 8005fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb4:	f000 be78 	b.w	8006ca8 <_fflush_r>
 8005fb8:	bd10      	pop	{r4, pc}
 8005fba:	bf00      	nop
 8005fbc:	2000042c 	.word	0x2000042c
 8005fc0:	20000494 	.word	0x20000494
 8005fc4:	200004fc 	.word	0x200004fc

08005fc8 <global_stdio_init.part.0>:
 8005fc8:	b510      	push	{r4, lr}
 8005fca:	4b0b      	ldr	r3, [pc, #44]	@ (8005ff8 <global_stdio_init.part.0+0x30>)
 8005fcc:	4c0b      	ldr	r4, [pc, #44]	@ (8005ffc <global_stdio_init.part.0+0x34>)
 8005fce:	4a0c      	ldr	r2, [pc, #48]	@ (8006000 <global_stdio_init.part.0+0x38>)
 8005fd0:	601a      	str	r2, [r3, #0]
 8005fd2:	4620      	mov	r0, r4
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	2104      	movs	r1, #4
 8005fd8:	f7ff ff94 	bl	8005f04 <std>
 8005fdc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	2109      	movs	r1, #9
 8005fe4:	f7ff ff8e 	bl	8005f04 <std>
 8005fe8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fec:	2202      	movs	r2, #2
 8005fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ff2:	2112      	movs	r1, #18
 8005ff4:	f7ff bf86 	b.w	8005f04 <std>
 8005ff8:	20000564 	.word	0x20000564
 8005ffc:	2000042c 	.word	0x2000042c
 8006000:	08005f71 	.word	0x08005f71

08006004 <__sfp_lock_acquire>:
 8006004:	4801      	ldr	r0, [pc, #4]	@ (800600c <__sfp_lock_acquire+0x8>)
 8006006:	f000 ba00 	b.w	800640a <__retarget_lock_acquire_recursive>
 800600a:	bf00      	nop
 800600c:	2000056d 	.word	0x2000056d

08006010 <__sfp_lock_release>:
 8006010:	4801      	ldr	r0, [pc, #4]	@ (8006018 <__sfp_lock_release+0x8>)
 8006012:	f000 b9fb 	b.w	800640c <__retarget_lock_release_recursive>
 8006016:	bf00      	nop
 8006018:	2000056d 	.word	0x2000056d

0800601c <__sinit>:
 800601c:	b510      	push	{r4, lr}
 800601e:	4604      	mov	r4, r0
 8006020:	f7ff fff0 	bl	8006004 <__sfp_lock_acquire>
 8006024:	6a23      	ldr	r3, [r4, #32]
 8006026:	b11b      	cbz	r3, 8006030 <__sinit+0x14>
 8006028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800602c:	f7ff bff0 	b.w	8006010 <__sfp_lock_release>
 8006030:	4b04      	ldr	r3, [pc, #16]	@ (8006044 <__sinit+0x28>)
 8006032:	6223      	str	r3, [r4, #32]
 8006034:	4b04      	ldr	r3, [pc, #16]	@ (8006048 <__sinit+0x2c>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d1f5      	bne.n	8006028 <__sinit+0xc>
 800603c:	f7ff ffc4 	bl	8005fc8 <global_stdio_init.part.0>
 8006040:	e7f2      	b.n	8006028 <__sinit+0xc>
 8006042:	bf00      	nop
 8006044:	08005f89 	.word	0x08005f89
 8006048:	20000564 	.word	0x20000564

0800604c <_fwalk_sglue>:
 800604c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006050:	4607      	mov	r7, r0
 8006052:	4688      	mov	r8, r1
 8006054:	4614      	mov	r4, r2
 8006056:	2600      	movs	r6, #0
 8006058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800605c:	f1b9 0901 	subs.w	r9, r9, #1
 8006060:	d505      	bpl.n	800606e <_fwalk_sglue+0x22>
 8006062:	6824      	ldr	r4, [r4, #0]
 8006064:	2c00      	cmp	r4, #0
 8006066:	d1f7      	bne.n	8006058 <_fwalk_sglue+0xc>
 8006068:	4630      	mov	r0, r6
 800606a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800606e:	89ab      	ldrh	r3, [r5, #12]
 8006070:	2b01      	cmp	r3, #1
 8006072:	d907      	bls.n	8006084 <_fwalk_sglue+0x38>
 8006074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006078:	3301      	adds	r3, #1
 800607a:	d003      	beq.n	8006084 <_fwalk_sglue+0x38>
 800607c:	4629      	mov	r1, r5
 800607e:	4638      	mov	r0, r7
 8006080:	47c0      	blx	r8
 8006082:	4306      	orrs	r6, r0
 8006084:	3568      	adds	r5, #104	@ 0x68
 8006086:	e7e9      	b.n	800605c <_fwalk_sglue+0x10>

08006088 <iprintf>:
 8006088:	b40f      	push	{r0, r1, r2, r3}
 800608a:	b507      	push	{r0, r1, r2, lr}
 800608c:	4906      	ldr	r1, [pc, #24]	@ (80060a8 <iprintf+0x20>)
 800608e:	ab04      	add	r3, sp, #16
 8006090:	6808      	ldr	r0, [r1, #0]
 8006092:	f853 2b04 	ldr.w	r2, [r3], #4
 8006096:	6881      	ldr	r1, [r0, #8]
 8006098:	9301      	str	r3, [sp, #4]
 800609a:	f000 fadb 	bl	8006654 <_vfiprintf_r>
 800609e:	b003      	add	sp, #12
 80060a0:	f85d eb04 	ldr.w	lr, [sp], #4
 80060a4:	b004      	add	sp, #16
 80060a6:	4770      	bx	lr
 80060a8:	2000001c 	.word	0x2000001c

080060ac <_puts_r>:
 80060ac:	6a03      	ldr	r3, [r0, #32]
 80060ae:	b570      	push	{r4, r5, r6, lr}
 80060b0:	6884      	ldr	r4, [r0, #8]
 80060b2:	4605      	mov	r5, r0
 80060b4:	460e      	mov	r6, r1
 80060b6:	b90b      	cbnz	r3, 80060bc <_puts_r+0x10>
 80060b8:	f7ff ffb0 	bl	800601c <__sinit>
 80060bc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060be:	07db      	lsls	r3, r3, #31
 80060c0:	d405      	bmi.n	80060ce <_puts_r+0x22>
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	0598      	lsls	r0, r3, #22
 80060c6:	d402      	bmi.n	80060ce <_puts_r+0x22>
 80060c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060ca:	f000 f99e 	bl	800640a <__retarget_lock_acquire_recursive>
 80060ce:	89a3      	ldrh	r3, [r4, #12]
 80060d0:	0719      	lsls	r1, r3, #28
 80060d2:	d502      	bpl.n	80060da <_puts_r+0x2e>
 80060d4:	6923      	ldr	r3, [r4, #16]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d135      	bne.n	8006146 <_puts_r+0x9a>
 80060da:	4621      	mov	r1, r4
 80060dc:	4628      	mov	r0, r5
 80060de:	f000 f8c5 	bl	800626c <__swsetup_r>
 80060e2:	b380      	cbz	r0, 8006146 <_puts_r+0x9a>
 80060e4:	f04f 35ff 	mov.w	r5, #4294967295
 80060e8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060ea:	07da      	lsls	r2, r3, #31
 80060ec:	d405      	bmi.n	80060fa <_puts_r+0x4e>
 80060ee:	89a3      	ldrh	r3, [r4, #12]
 80060f0:	059b      	lsls	r3, r3, #22
 80060f2:	d402      	bmi.n	80060fa <_puts_r+0x4e>
 80060f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060f6:	f000 f989 	bl	800640c <__retarget_lock_release_recursive>
 80060fa:	4628      	mov	r0, r5
 80060fc:	bd70      	pop	{r4, r5, r6, pc}
 80060fe:	2b00      	cmp	r3, #0
 8006100:	da04      	bge.n	800610c <_puts_r+0x60>
 8006102:	69a2      	ldr	r2, [r4, #24]
 8006104:	429a      	cmp	r2, r3
 8006106:	dc17      	bgt.n	8006138 <_puts_r+0x8c>
 8006108:	290a      	cmp	r1, #10
 800610a:	d015      	beq.n	8006138 <_puts_r+0x8c>
 800610c:	6823      	ldr	r3, [r4, #0]
 800610e:	1c5a      	adds	r2, r3, #1
 8006110:	6022      	str	r2, [r4, #0]
 8006112:	7019      	strb	r1, [r3, #0]
 8006114:	68a3      	ldr	r3, [r4, #8]
 8006116:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800611a:	3b01      	subs	r3, #1
 800611c:	60a3      	str	r3, [r4, #8]
 800611e:	2900      	cmp	r1, #0
 8006120:	d1ed      	bne.n	80060fe <_puts_r+0x52>
 8006122:	2b00      	cmp	r3, #0
 8006124:	da11      	bge.n	800614a <_puts_r+0x9e>
 8006126:	4622      	mov	r2, r4
 8006128:	210a      	movs	r1, #10
 800612a:	4628      	mov	r0, r5
 800612c:	f000 f85f 	bl	80061ee <__swbuf_r>
 8006130:	3001      	adds	r0, #1
 8006132:	d0d7      	beq.n	80060e4 <_puts_r+0x38>
 8006134:	250a      	movs	r5, #10
 8006136:	e7d7      	b.n	80060e8 <_puts_r+0x3c>
 8006138:	4622      	mov	r2, r4
 800613a:	4628      	mov	r0, r5
 800613c:	f000 f857 	bl	80061ee <__swbuf_r>
 8006140:	3001      	adds	r0, #1
 8006142:	d1e7      	bne.n	8006114 <_puts_r+0x68>
 8006144:	e7ce      	b.n	80060e4 <_puts_r+0x38>
 8006146:	3e01      	subs	r6, #1
 8006148:	e7e4      	b.n	8006114 <_puts_r+0x68>
 800614a:	6823      	ldr	r3, [r4, #0]
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	6022      	str	r2, [r4, #0]
 8006150:	220a      	movs	r2, #10
 8006152:	701a      	strb	r2, [r3, #0]
 8006154:	e7ee      	b.n	8006134 <_puts_r+0x88>
	...

08006158 <puts>:
 8006158:	4b02      	ldr	r3, [pc, #8]	@ (8006164 <puts+0xc>)
 800615a:	4601      	mov	r1, r0
 800615c:	6818      	ldr	r0, [r3, #0]
 800615e:	f7ff bfa5 	b.w	80060ac <_puts_r>
 8006162:	bf00      	nop
 8006164:	2000001c 	.word	0x2000001c

08006168 <__sread>:
 8006168:	b510      	push	{r4, lr}
 800616a:	460c      	mov	r4, r1
 800616c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006170:	f000 f8fc 	bl	800636c <_read_r>
 8006174:	2800      	cmp	r0, #0
 8006176:	bfab      	itete	ge
 8006178:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800617a:	89a3      	ldrhlt	r3, [r4, #12]
 800617c:	181b      	addge	r3, r3, r0
 800617e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006182:	bfac      	ite	ge
 8006184:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006186:	81a3      	strhlt	r3, [r4, #12]
 8006188:	bd10      	pop	{r4, pc}

0800618a <__swrite>:
 800618a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800618e:	461f      	mov	r7, r3
 8006190:	898b      	ldrh	r3, [r1, #12]
 8006192:	05db      	lsls	r3, r3, #23
 8006194:	4605      	mov	r5, r0
 8006196:	460c      	mov	r4, r1
 8006198:	4616      	mov	r6, r2
 800619a:	d505      	bpl.n	80061a8 <__swrite+0x1e>
 800619c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061a0:	2302      	movs	r3, #2
 80061a2:	2200      	movs	r2, #0
 80061a4:	f000 f8d0 	bl	8006348 <_lseek_r>
 80061a8:	89a3      	ldrh	r3, [r4, #12]
 80061aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061b2:	81a3      	strh	r3, [r4, #12]
 80061b4:	4632      	mov	r2, r6
 80061b6:	463b      	mov	r3, r7
 80061b8:	4628      	mov	r0, r5
 80061ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061be:	f000 b8e7 	b.w	8006390 <_write_r>

080061c2 <__sseek>:
 80061c2:	b510      	push	{r4, lr}
 80061c4:	460c      	mov	r4, r1
 80061c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ca:	f000 f8bd 	bl	8006348 <_lseek_r>
 80061ce:	1c43      	adds	r3, r0, #1
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	bf15      	itete	ne
 80061d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80061da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80061de:	81a3      	strheq	r3, [r4, #12]
 80061e0:	bf18      	it	ne
 80061e2:	81a3      	strhne	r3, [r4, #12]
 80061e4:	bd10      	pop	{r4, pc}

080061e6 <__sclose>:
 80061e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061ea:	f000 b89d 	b.w	8006328 <_close_r>

080061ee <__swbuf_r>:
 80061ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f0:	460e      	mov	r6, r1
 80061f2:	4614      	mov	r4, r2
 80061f4:	4605      	mov	r5, r0
 80061f6:	b118      	cbz	r0, 8006200 <__swbuf_r+0x12>
 80061f8:	6a03      	ldr	r3, [r0, #32]
 80061fa:	b90b      	cbnz	r3, 8006200 <__swbuf_r+0x12>
 80061fc:	f7ff ff0e 	bl	800601c <__sinit>
 8006200:	69a3      	ldr	r3, [r4, #24]
 8006202:	60a3      	str	r3, [r4, #8]
 8006204:	89a3      	ldrh	r3, [r4, #12]
 8006206:	071a      	lsls	r2, r3, #28
 8006208:	d501      	bpl.n	800620e <__swbuf_r+0x20>
 800620a:	6923      	ldr	r3, [r4, #16]
 800620c:	b943      	cbnz	r3, 8006220 <__swbuf_r+0x32>
 800620e:	4621      	mov	r1, r4
 8006210:	4628      	mov	r0, r5
 8006212:	f000 f82b 	bl	800626c <__swsetup_r>
 8006216:	b118      	cbz	r0, 8006220 <__swbuf_r+0x32>
 8006218:	f04f 37ff 	mov.w	r7, #4294967295
 800621c:	4638      	mov	r0, r7
 800621e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	6922      	ldr	r2, [r4, #16]
 8006224:	1a98      	subs	r0, r3, r2
 8006226:	6963      	ldr	r3, [r4, #20]
 8006228:	b2f6      	uxtb	r6, r6
 800622a:	4283      	cmp	r3, r0
 800622c:	4637      	mov	r7, r6
 800622e:	dc05      	bgt.n	800623c <__swbuf_r+0x4e>
 8006230:	4621      	mov	r1, r4
 8006232:	4628      	mov	r0, r5
 8006234:	f000 fd38 	bl	8006ca8 <_fflush_r>
 8006238:	2800      	cmp	r0, #0
 800623a:	d1ed      	bne.n	8006218 <__swbuf_r+0x2a>
 800623c:	68a3      	ldr	r3, [r4, #8]
 800623e:	3b01      	subs	r3, #1
 8006240:	60a3      	str	r3, [r4, #8]
 8006242:	6823      	ldr	r3, [r4, #0]
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	6022      	str	r2, [r4, #0]
 8006248:	701e      	strb	r6, [r3, #0]
 800624a:	6962      	ldr	r2, [r4, #20]
 800624c:	1c43      	adds	r3, r0, #1
 800624e:	429a      	cmp	r2, r3
 8006250:	d004      	beq.n	800625c <__swbuf_r+0x6e>
 8006252:	89a3      	ldrh	r3, [r4, #12]
 8006254:	07db      	lsls	r3, r3, #31
 8006256:	d5e1      	bpl.n	800621c <__swbuf_r+0x2e>
 8006258:	2e0a      	cmp	r6, #10
 800625a:	d1df      	bne.n	800621c <__swbuf_r+0x2e>
 800625c:	4621      	mov	r1, r4
 800625e:	4628      	mov	r0, r5
 8006260:	f000 fd22 	bl	8006ca8 <_fflush_r>
 8006264:	2800      	cmp	r0, #0
 8006266:	d0d9      	beq.n	800621c <__swbuf_r+0x2e>
 8006268:	e7d6      	b.n	8006218 <__swbuf_r+0x2a>
	...

0800626c <__swsetup_r>:
 800626c:	b538      	push	{r3, r4, r5, lr}
 800626e:	4b29      	ldr	r3, [pc, #164]	@ (8006314 <__swsetup_r+0xa8>)
 8006270:	4605      	mov	r5, r0
 8006272:	6818      	ldr	r0, [r3, #0]
 8006274:	460c      	mov	r4, r1
 8006276:	b118      	cbz	r0, 8006280 <__swsetup_r+0x14>
 8006278:	6a03      	ldr	r3, [r0, #32]
 800627a:	b90b      	cbnz	r3, 8006280 <__swsetup_r+0x14>
 800627c:	f7ff fece 	bl	800601c <__sinit>
 8006280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006284:	0719      	lsls	r1, r3, #28
 8006286:	d422      	bmi.n	80062ce <__swsetup_r+0x62>
 8006288:	06da      	lsls	r2, r3, #27
 800628a:	d407      	bmi.n	800629c <__swsetup_r+0x30>
 800628c:	2209      	movs	r2, #9
 800628e:	602a      	str	r2, [r5, #0]
 8006290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006294:	81a3      	strh	r3, [r4, #12]
 8006296:	f04f 30ff 	mov.w	r0, #4294967295
 800629a:	e033      	b.n	8006304 <__swsetup_r+0x98>
 800629c:	0758      	lsls	r0, r3, #29
 800629e:	d512      	bpl.n	80062c6 <__swsetup_r+0x5a>
 80062a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062a2:	b141      	cbz	r1, 80062b6 <__swsetup_r+0x4a>
 80062a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062a8:	4299      	cmp	r1, r3
 80062aa:	d002      	beq.n	80062b2 <__swsetup_r+0x46>
 80062ac:	4628      	mov	r0, r5
 80062ae:	f000 f8af 	bl	8006410 <_free_r>
 80062b2:	2300      	movs	r3, #0
 80062b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80062b6:	89a3      	ldrh	r3, [r4, #12]
 80062b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80062bc:	81a3      	strh	r3, [r4, #12]
 80062be:	2300      	movs	r3, #0
 80062c0:	6063      	str	r3, [r4, #4]
 80062c2:	6923      	ldr	r3, [r4, #16]
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	89a3      	ldrh	r3, [r4, #12]
 80062c8:	f043 0308 	orr.w	r3, r3, #8
 80062cc:	81a3      	strh	r3, [r4, #12]
 80062ce:	6923      	ldr	r3, [r4, #16]
 80062d0:	b94b      	cbnz	r3, 80062e6 <__swsetup_r+0x7a>
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062dc:	d003      	beq.n	80062e6 <__swsetup_r+0x7a>
 80062de:	4621      	mov	r1, r4
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 fd2f 	bl	8006d44 <__smakebuf_r>
 80062e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ea:	f013 0201 	ands.w	r2, r3, #1
 80062ee:	d00a      	beq.n	8006306 <__swsetup_r+0x9a>
 80062f0:	2200      	movs	r2, #0
 80062f2:	60a2      	str	r2, [r4, #8]
 80062f4:	6962      	ldr	r2, [r4, #20]
 80062f6:	4252      	negs	r2, r2
 80062f8:	61a2      	str	r2, [r4, #24]
 80062fa:	6922      	ldr	r2, [r4, #16]
 80062fc:	b942      	cbnz	r2, 8006310 <__swsetup_r+0xa4>
 80062fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006302:	d1c5      	bne.n	8006290 <__swsetup_r+0x24>
 8006304:	bd38      	pop	{r3, r4, r5, pc}
 8006306:	0799      	lsls	r1, r3, #30
 8006308:	bf58      	it	pl
 800630a:	6962      	ldrpl	r2, [r4, #20]
 800630c:	60a2      	str	r2, [r4, #8]
 800630e:	e7f4      	b.n	80062fa <__swsetup_r+0x8e>
 8006310:	2000      	movs	r0, #0
 8006312:	e7f7      	b.n	8006304 <__swsetup_r+0x98>
 8006314:	2000001c 	.word	0x2000001c

08006318 <memset>:
 8006318:	4402      	add	r2, r0
 800631a:	4603      	mov	r3, r0
 800631c:	4293      	cmp	r3, r2
 800631e:	d100      	bne.n	8006322 <memset+0xa>
 8006320:	4770      	bx	lr
 8006322:	f803 1b01 	strb.w	r1, [r3], #1
 8006326:	e7f9      	b.n	800631c <memset+0x4>

08006328 <_close_r>:
 8006328:	b538      	push	{r3, r4, r5, lr}
 800632a:	4d06      	ldr	r5, [pc, #24]	@ (8006344 <_close_r+0x1c>)
 800632c:	2300      	movs	r3, #0
 800632e:	4604      	mov	r4, r0
 8006330:	4608      	mov	r0, r1
 8006332:	602b      	str	r3, [r5, #0]
 8006334:	f7fa fcb1 	bl	8000c9a <_close>
 8006338:	1c43      	adds	r3, r0, #1
 800633a:	d102      	bne.n	8006342 <_close_r+0x1a>
 800633c:	682b      	ldr	r3, [r5, #0]
 800633e:	b103      	cbz	r3, 8006342 <_close_r+0x1a>
 8006340:	6023      	str	r3, [r4, #0]
 8006342:	bd38      	pop	{r3, r4, r5, pc}
 8006344:	20000568 	.word	0x20000568

08006348 <_lseek_r>:
 8006348:	b538      	push	{r3, r4, r5, lr}
 800634a:	4d07      	ldr	r5, [pc, #28]	@ (8006368 <_lseek_r+0x20>)
 800634c:	4604      	mov	r4, r0
 800634e:	4608      	mov	r0, r1
 8006350:	4611      	mov	r1, r2
 8006352:	2200      	movs	r2, #0
 8006354:	602a      	str	r2, [r5, #0]
 8006356:	461a      	mov	r2, r3
 8006358:	f7fa fcc6 	bl	8000ce8 <_lseek>
 800635c:	1c43      	adds	r3, r0, #1
 800635e:	d102      	bne.n	8006366 <_lseek_r+0x1e>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	b103      	cbz	r3, 8006366 <_lseek_r+0x1e>
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	bd38      	pop	{r3, r4, r5, pc}
 8006368:	20000568 	.word	0x20000568

0800636c <_read_r>:
 800636c:	b538      	push	{r3, r4, r5, lr}
 800636e:	4d07      	ldr	r5, [pc, #28]	@ (800638c <_read_r+0x20>)
 8006370:	4604      	mov	r4, r0
 8006372:	4608      	mov	r0, r1
 8006374:	4611      	mov	r1, r2
 8006376:	2200      	movs	r2, #0
 8006378:	602a      	str	r2, [r5, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	f7fa fc54 	bl	8000c28 <_read>
 8006380:	1c43      	adds	r3, r0, #1
 8006382:	d102      	bne.n	800638a <_read_r+0x1e>
 8006384:	682b      	ldr	r3, [r5, #0]
 8006386:	b103      	cbz	r3, 800638a <_read_r+0x1e>
 8006388:	6023      	str	r3, [r4, #0]
 800638a:	bd38      	pop	{r3, r4, r5, pc}
 800638c:	20000568 	.word	0x20000568

08006390 <_write_r>:
 8006390:	b538      	push	{r3, r4, r5, lr}
 8006392:	4d07      	ldr	r5, [pc, #28]	@ (80063b0 <_write_r+0x20>)
 8006394:	4604      	mov	r4, r0
 8006396:	4608      	mov	r0, r1
 8006398:	4611      	mov	r1, r2
 800639a:	2200      	movs	r2, #0
 800639c:	602a      	str	r2, [r5, #0]
 800639e:	461a      	mov	r2, r3
 80063a0:	f7fa fc5f 	bl	8000c62 <_write>
 80063a4:	1c43      	adds	r3, r0, #1
 80063a6:	d102      	bne.n	80063ae <_write_r+0x1e>
 80063a8:	682b      	ldr	r3, [r5, #0]
 80063aa:	b103      	cbz	r3, 80063ae <_write_r+0x1e>
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	bd38      	pop	{r3, r4, r5, pc}
 80063b0:	20000568 	.word	0x20000568

080063b4 <__errno>:
 80063b4:	4b01      	ldr	r3, [pc, #4]	@ (80063bc <__errno+0x8>)
 80063b6:	6818      	ldr	r0, [r3, #0]
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	2000001c 	.word	0x2000001c

080063c0 <__libc_init_array>:
 80063c0:	b570      	push	{r4, r5, r6, lr}
 80063c2:	4d0d      	ldr	r5, [pc, #52]	@ (80063f8 <__libc_init_array+0x38>)
 80063c4:	4c0d      	ldr	r4, [pc, #52]	@ (80063fc <__libc_init_array+0x3c>)
 80063c6:	1b64      	subs	r4, r4, r5
 80063c8:	10a4      	asrs	r4, r4, #2
 80063ca:	2600      	movs	r6, #0
 80063cc:	42a6      	cmp	r6, r4
 80063ce:	d109      	bne.n	80063e4 <__libc_init_array+0x24>
 80063d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006400 <__libc_init_array+0x40>)
 80063d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006404 <__libc_init_array+0x44>)
 80063d4:	f000 fd24 	bl	8006e20 <_init>
 80063d8:	1b64      	subs	r4, r4, r5
 80063da:	10a4      	asrs	r4, r4, #2
 80063dc:	2600      	movs	r6, #0
 80063de:	42a6      	cmp	r6, r4
 80063e0:	d105      	bne.n	80063ee <__libc_init_array+0x2e>
 80063e2:	bd70      	pop	{r4, r5, r6, pc}
 80063e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e8:	4798      	blx	r3
 80063ea:	3601      	adds	r6, #1
 80063ec:	e7ee      	b.n	80063cc <__libc_init_array+0xc>
 80063ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80063f2:	4798      	blx	r3
 80063f4:	3601      	adds	r6, #1
 80063f6:	e7f2      	b.n	80063de <__libc_init_array+0x1e>
 80063f8:	08006f6c 	.word	0x08006f6c
 80063fc:	08006f6c 	.word	0x08006f6c
 8006400:	08006f6c 	.word	0x08006f6c
 8006404:	08006f70 	.word	0x08006f70

08006408 <__retarget_lock_init_recursive>:
 8006408:	4770      	bx	lr

0800640a <__retarget_lock_acquire_recursive>:
 800640a:	4770      	bx	lr

0800640c <__retarget_lock_release_recursive>:
 800640c:	4770      	bx	lr
	...

08006410 <_free_r>:
 8006410:	b538      	push	{r3, r4, r5, lr}
 8006412:	4605      	mov	r5, r0
 8006414:	2900      	cmp	r1, #0
 8006416:	d041      	beq.n	800649c <_free_r+0x8c>
 8006418:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800641c:	1f0c      	subs	r4, r1, #4
 800641e:	2b00      	cmp	r3, #0
 8006420:	bfb8      	it	lt
 8006422:	18e4      	addlt	r4, r4, r3
 8006424:	f000 f8e0 	bl	80065e8 <__malloc_lock>
 8006428:	4a1d      	ldr	r2, [pc, #116]	@ (80064a0 <_free_r+0x90>)
 800642a:	6813      	ldr	r3, [r2, #0]
 800642c:	b933      	cbnz	r3, 800643c <_free_r+0x2c>
 800642e:	6063      	str	r3, [r4, #4]
 8006430:	6014      	str	r4, [r2, #0]
 8006432:	4628      	mov	r0, r5
 8006434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006438:	f000 b8dc 	b.w	80065f4 <__malloc_unlock>
 800643c:	42a3      	cmp	r3, r4
 800643e:	d908      	bls.n	8006452 <_free_r+0x42>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	1821      	adds	r1, r4, r0
 8006444:	428b      	cmp	r3, r1
 8006446:	bf01      	itttt	eq
 8006448:	6819      	ldreq	r1, [r3, #0]
 800644a:	685b      	ldreq	r3, [r3, #4]
 800644c:	1809      	addeq	r1, r1, r0
 800644e:	6021      	streq	r1, [r4, #0]
 8006450:	e7ed      	b.n	800642e <_free_r+0x1e>
 8006452:	461a      	mov	r2, r3
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	b10b      	cbz	r3, 800645c <_free_r+0x4c>
 8006458:	42a3      	cmp	r3, r4
 800645a:	d9fa      	bls.n	8006452 <_free_r+0x42>
 800645c:	6811      	ldr	r1, [r2, #0]
 800645e:	1850      	adds	r0, r2, r1
 8006460:	42a0      	cmp	r0, r4
 8006462:	d10b      	bne.n	800647c <_free_r+0x6c>
 8006464:	6820      	ldr	r0, [r4, #0]
 8006466:	4401      	add	r1, r0
 8006468:	1850      	adds	r0, r2, r1
 800646a:	4283      	cmp	r3, r0
 800646c:	6011      	str	r1, [r2, #0]
 800646e:	d1e0      	bne.n	8006432 <_free_r+0x22>
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	6053      	str	r3, [r2, #4]
 8006476:	4408      	add	r0, r1
 8006478:	6010      	str	r0, [r2, #0]
 800647a:	e7da      	b.n	8006432 <_free_r+0x22>
 800647c:	d902      	bls.n	8006484 <_free_r+0x74>
 800647e:	230c      	movs	r3, #12
 8006480:	602b      	str	r3, [r5, #0]
 8006482:	e7d6      	b.n	8006432 <_free_r+0x22>
 8006484:	6820      	ldr	r0, [r4, #0]
 8006486:	1821      	adds	r1, r4, r0
 8006488:	428b      	cmp	r3, r1
 800648a:	bf04      	itt	eq
 800648c:	6819      	ldreq	r1, [r3, #0]
 800648e:	685b      	ldreq	r3, [r3, #4]
 8006490:	6063      	str	r3, [r4, #4]
 8006492:	bf04      	itt	eq
 8006494:	1809      	addeq	r1, r1, r0
 8006496:	6021      	streq	r1, [r4, #0]
 8006498:	6054      	str	r4, [r2, #4]
 800649a:	e7ca      	b.n	8006432 <_free_r+0x22>
 800649c:	bd38      	pop	{r3, r4, r5, pc}
 800649e:	bf00      	nop
 80064a0:	20000574 	.word	0x20000574

080064a4 <sbrk_aligned>:
 80064a4:	b570      	push	{r4, r5, r6, lr}
 80064a6:	4e0f      	ldr	r6, [pc, #60]	@ (80064e4 <sbrk_aligned+0x40>)
 80064a8:	460c      	mov	r4, r1
 80064aa:	6831      	ldr	r1, [r6, #0]
 80064ac:	4605      	mov	r5, r0
 80064ae:	b911      	cbnz	r1, 80064b6 <sbrk_aligned+0x12>
 80064b0:	f000 fca6 	bl	8006e00 <_sbrk_r>
 80064b4:	6030      	str	r0, [r6, #0]
 80064b6:	4621      	mov	r1, r4
 80064b8:	4628      	mov	r0, r5
 80064ba:	f000 fca1 	bl	8006e00 <_sbrk_r>
 80064be:	1c43      	adds	r3, r0, #1
 80064c0:	d103      	bne.n	80064ca <sbrk_aligned+0x26>
 80064c2:	f04f 34ff 	mov.w	r4, #4294967295
 80064c6:	4620      	mov	r0, r4
 80064c8:	bd70      	pop	{r4, r5, r6, pc}
 80064ca:	1cc4      	adds	r4, r0, #3
 80064cc:	f024 0403 	bic.w	r4, r4, #3
 80064d0:	42a0      	cmp	r0, r4
 80064d2:	d0f8      	beq.n	80064c6 <sbrk_aligned+0x22>
 80064d4:	1a21      	subs	r1, r4, r0
 80064d6:	4628      	mov	r0, r5
 80064d8:	f000 fc92 	bl	8006e00 <_sbrk_r>
 80064dc:	3001      	adds	r0, #1
 80064de:	d1f2      	bne.n	80064c6 <sbrk_aligned+0x22>
 80064e0:	e7ef      	b.n	80064c2 <sbrk_aligned+0x1e>
 80064e2:	bf00      	nop
 80064e4:	20000570 	.word	0x20000570

080064e8 <_malloc_r>:
 80064e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064ec:	1ccd      	adds	r5, r1, #3
 80064ee:	f025 0503 	bic.w	r5, r5, #3
 80064f2:	3508      	adds	r5, #8
 80064f4:	2d0c      	cmp	r5, #12
 80064f6:	bf38      	it	cc
 80064f8:	250c      	movcc	r5, #12
 80064fa:	2d00      	cmp	r5, #0
 80064fc:	4606      	mov	r6, r0
 80064fe:	db01      	blt.n	8006504 <_malloc_r+0x1c>
 8006500:	42a9      	cmp	r1, r5
 8006502:	d904      	bls.n	800650e <_malloc_r+0x26>
 8006504:	230c      	movs	r3, #12
 8006506:	6033      	str	r3, [r6, #0]
 8006508:	2000      	movs	r0, #0
 800650a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065e4 <_malloc_r+0xfc>
 8006512:	f000 f869 	bl	80065e8 <__malloc_lock>
 8006516:	f8d8 3000 	ldr.w	r3, [r8]
 800651a:	461c      	mov	r4, r3
 800651c:	bb44      	cbnz	r4, 8006570 <_malloc_r+0x88>
 800651e:	4629      	mov	r1, r5
 8006520:	4630      	mov	r0, r6
 8006522:	f7ff ffbf 	bl	80064a4 <sbrk_aligned>
 8006526:	1c43      	adds	r3, r0, #1
 8006528:	4604      	mov	r4, r0
 800652a:	d158      	bne.n	80065de <_malloc_r+0xf6>
 800652c:	f8d8 4000 	ldr.w	r4, [r8]
 8006530:	4627      	mov	r7, r4
 8006532:	2f00      	cmp	r7, #0
 8006534:	d143      	bne.n	80065be <_malloc_r+0xd6>
 8006536:	2c00      	cmp	r4, #0
 8006538:	d04b      	beq.n	80065d2 <_malloc_r+0xea>
 800653a:	6823      	ldr	r3, [r4, #0]
 800653c:	4639      	mov	r1, r7
 800653e:	4630      	mov	r0, r6
 8006540:	eb04 0903 	add.w	r9, r4, r3
 8006544:	f000 fc5c 	bl	8006e00 <_sbrk_r>
 8006548:	4581      	cmp	r9, r0
 800654a:	d142      	bne.n	80065d2 <_malloc_r+0xea>
 800654c:	6821      	ldr	r1, [r4, #0]
 800654e:	1a6d      	subs	r5, r5, r1
 8006550:	4629      	mov	r1, r5
 8006552:	4630      	mov	r0, r6
 8006554:	f7ff ffa6 	bl	80064a4 <sbrk_aligned>
 8006558:	3001      	adds	r0, #1
 800655a:	d03a      	beq.n	80065d2 <_malloc_r+0xea>
 800655c:	6823      	ldr	r3, [r4, #0]
 800655e:	442b      	add	r3, r5
 8006560:	6023      	str	r3, [r4, #0]
 8006562:	f8d8 3000 	ldr.w	r3, [r8]
 8006566:	685a      	ldr	r2, [r3, #4]
 8006568:	bb62      	cbnz	r2, 80065c4 <_malloc_r+0xdc>
 800656a:	f8c8 7000 	str.w	r7, [r8]
 800656e:	e00f      	b.n	8006590 <_malloc_r+0xa8>
 8006570:	6822      	ldr	r2, [r4, #0]
 8006572:	1b52      	subs	r2, r2, r5
 8006574:	d420      	bmi.n	80065b8 <_malloc_r+0xd0>
 8006576:	2a0b      	cmp	r2, #11
 8006578:	d917      	bls.n	80065aa <_malloc_r+0xc2>
 800657a:	1961      	adds	r1, r4, r5
 800657c:	42a3      	cmp	r3, r4
 800657e:	6025      	str	r5, [r4, #0]
 8006580:	bf18      	it	ne
 8006582:	6059      	strne	r1, [r3, #4]
 8006584:	6863      	ldr	r3, [r4, #4]
 8006586:	bf08      	it	eq
 8006588:	f8c8 1000 	streq.w	r1, [r8]
 800658c:	5162      	str	r2, [r4, r5]
 800658e:	604b      	str	r3, [r1, #4]
 8006590:	4630      	mov	r0, r6
 8006592:	f000 f82f 	bl	80065f4 <__malloc_unlock>
 8006596:	f104 000b 	add.w	r0, r4, #11
 800659a:	1d23      	adds	r3, r4, #4
 800659c:	f020 0007 	bic.w	r0, r0, #7
 80065a0:	1ac2      	subs	r2, r0, r3
 80065a2:	bf1c      	itt	ne
 80065a4:	1a1b      	subne	r3, r3, r0
 80065a6:	50a3      	strne	r3, [r4, r2]
 80065a8:	e7af      	b.n	800650a <_malloc_r+0x22>
 80065aa:	6862      	ldr	r2, [r4, #4]
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	bf0c      	ite	eq
 80065b0:	f8c8 2000 	streq.w	r2, [r8]
 80065b4:	605a      	strne	r2, [r3, #4]
 80065b6:	e7eb      	b.n	8006590 <_malloc_r+0xa8>
 80065b8:	4623      	mov	r3, r4
 80065ba:	6864      	ldr	r4, [r4, #4]
 80065bc:	e7ae      	b.n	800651c <_malloc_r+0x34>
 80065be:	463c      	mov	r4, r7
 80065c0:	687f      	ldr	r7, [r7, #4]
 80065c2:	e7b6      	b.n	8006532 <_malloc_r+0x4a>
 80065c4:	461a      	mov	r2, r3
 80065c6:	685b      	ldr	r3, [r3, #4]
 80065c8:	42a3      	cmp	r3, r4
 80065ca:	d1fb      	bne.n	80065c4 <_malloc_r+0xdc>
 80065cc:	2300      	movs	r3, #0
 80065ce:	6053      	str	r3, [r2, #4]
 80065d0:	e7de      	b.n	8006590 <_malloc_r+0xa8>
 80065d2:	230c      	movs	r3, #12
 80065d4:	6033      	str	r3, [r6, #0]
 80065d6:	4630      	mov	r0, r6
 80065d8:	f000 f80c 	bl	80065f4 <__malloc_unlock>
 80065dc:	e794      	b.n	8006508 <_malloc_r+0x20>
 80065de:	6005      	str	r5, [r0, #0]
 80065e0:	e7d6      	b.n	8006590 <_malloc_r+0xa8>
 80065e2:	bf00      	nop
 80065e4:	20000574 	.word	0x20000574

080065e8 <__malloc_lock>:
 80065e8:	4801      	ldr	r0, [pc, #4]	@ (80065f0 <__malloc_lock+0x8>)
 80065ea:	f7ff bf0e 	b.w	800640a <__retarget_lock_acquire_recursive>
 80065ee:	bf00      	nop
 80065f0:	2000056c 	.word	0x2000056c

080065f4 <__malloc_unlock>:
 80065f4:	4801      	ldr	r0, [pc, #4]	@ (80065fc <__malloc_unlock+0x8>)
 80065f6:	f7ff bf09 	b.w	800640c <__retarget_lock_release_recursive>
 80065fa:	bf00      	nop
 80065fc:	2000056c 	.word	0x2000056c

08006600 <__sfputc_r>:
 8006600:	6893      	ldr	r3, [r2, #8]
 8006602:	3b01      	subs	r3, #1
 8006604:	2b00      	cmp	r3, #0
 8006606:	b410      	push	{r4}
 8006608:	6093      	str	r3, [r2, #8]
 800660a:	da08      	bge.n	800661e <__sfputc_r+0x1e>
 800660c:	6994      	ldr	r4, [r2, #24]
 800660e:	42a3      	cmp	r3, r4
 8006610:	db01      	blt.n	8006616 <__sfputc_r+0x16>
 8006612:	290a      	cmp	r1, #10
 8006614:	d103      	bne.n	800661e <__sfputc_r+0x1e>
 8006616:	f85d 4b04 	ldr.w	r4, [sp], #4
 800661a:	f7ff bde8 	b.w	80061ee <__swbuf_r>
 800661e:	6813      	ldr	r3, [r2, #0]
 8006620:	1c58      	adds	r0, r3, #1
 8006622:	6010      	str	r0, [r2, #0]
 8006624:	7019      	strb	r1, [r3, #0]
 8006626:	4608      	mov	r0, r1
 8006628:	f85d 4b04 	ldr.w	r4, [sp], #4
 800662c:	4770      	bx	lr

0800662e <__sfputs_r>:
 800662e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006630:	4606      	mov	r6, r0
 8006632:	460f      	mov	r7, r1
 8006634:	4614      	mov	r4, r2
 8006636:	18d5      	adds	r5, r2, r3
 8006638:	42ac      	cmp	r4, r5
 800663a:	d101      	bne.n	8006640 <__sfputs_r+0x12>
 800663c:	2000      	movs	r0, #0
 800663e:	e007      	b.n	8006650 <__sfputs_r+0x22>
 8006640:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006644:	463a      	mov	r2, r7
 8006646:	4630      	mov	r0, r6
 8006648:	f7ff ffda 	bl	8006600 <__sfputc_r>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d1f3      	bne.n	8006638 <__sfputs_r+0xa>
 8006650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006654 <_vfiprintf_r>:
 8006654:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006658:	460d      	mov	r5, r1
 800665a:	b09d      	sub	sp, #116	@ 0x74
 800665c:	4614      	mov	r4, r2
 800665e:	4698      	mov	r8, r3
 8006660:	4606      	mov	r6, r0
 8006662:	b118      	cbz	r0, 800666c <_vfiprintf_r+0x18>
 8006664:	6a03      	ldr	r3, [r0, #32]
 8006666:	b90b      	cbnz	r3, 800666c <_vfiprintf_r+0x18>
 8006668:	f7ff fcd8 	bl	800601c <__sinit>
 800666c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800666e:	07d9      	lsls	r1, r3, #31
 8006670:	d405      	bmi.n	800667e <_vfiprintf_r+0x2a>
 8006672:	89ab      	ldrh	r3, [r5, #12]
 8006674:	059a      	lsls	r2, r3, #22
 8006676:	d402      	bmi.n	800667e <_vfiprintf_r+0x2a>
 8006678:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800667a:	f7ff fec6 	bl	800640a <__retarget_lock_acquire_recursive>
 800667e:	89ab      	ldrh	r3, [r5, #12]
 8006680:	071b      	lsls	r3, r3, #28
 8006682:	d501      	bpl.n	8006688 <_vfiprintf_r+0x34>
 8006684:	692b      	ldr	r3, [r5, #16]
 8006686:	b99b      	cbnz	r3, 80066b0 <_vfiprintf_r+0x5c>
 8006688:	4629      	mov	r1, r5
 800668a:	4630      	mov	r0, r6
 800668c:	f7ff fdee 	bl	800626c <__swsetup_r>
 8006690:	b170      	cbz	r0, 80066b0 <_vfiprintf_r+0x5c>
 8006692:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006694:	07dc      	lsls	r4, r3, #31
 8006696:	d504      	bpl.n	80066a2 <_vfiprintf_r+0x4e>
 8006698:	f04f 30ff 	mov.w	r0, #4294967295
 800669c:	b01d      	add	sp, #116	@ 0x74
 800669e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a2:	89ab      	ldrh	r3, [r5, #12]
 80066a4:	0598      	lsls	r0, r3, #22
 80066a6:	d4f7      	bmi.n	8006698 <_vfiprintf_r+0x44>
 80066a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066aa:	f7ff feaf 	bl	800640c <__retarget_lock_release_recursive>
 80066ae:	e7f3      	b.n	8006698 <_vfiprintf_r+0x44>
 80066b0:	2300      	movs	r3, #0
 80066b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80066b4:	2320      	movs	r3, #32
 80066b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066ba:	f8cd 800c 	str.w	r8, [sp, #12]
 80066be:	2330      	movs	r3, #48	@ 0x30
 80066c0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006870 <_vfiprintf_r+0x21c>
 80066c4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066c8:	f04f 0901 	mov.w	r9, #1
 80066cc:	4623      	mov	r3, r4
 80066ce:	469a      	mov	sl, r3
 80066d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066d4:	b10a      	cbz	r2, 80066da <_vfiprintf_r+0x86>
 80066d6:	2a25      	cmp	r2, #37	@ 0x25
 80066d8:	d1f9      	bne.n	80066ce <_vfiprintf_r+0x7a>
 80066da:	ebba 0b04 	subs.w	fp, sl, r4
 80066de:	d00b      	beq.n	80066f8 <_vfiprintf_r+0xa4>
 80066e0:	465b      	mov	r3, fp
 80066e2:	4622      	mov	r2, r4
 80066e4:	4629      	mov	r1, r5
 80066e6:	4630      	mov	r0, r6
 80066e8:	f7ff ffa1 	bl	800662e <__sfputs_r>
 80066ec:	3001      	adds	r0, #1
 80066ee:	f000 80a7 	beq.w	8006840 <_vfiprintf_r+0x1ec>
 80066f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066f4:	445a      	add	r2, fp
 80066f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80066f8:	f89a 3000 	ldrb.w	r3, [sl]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f000 809f 	beq.w	8006840 <_vfiprintf_r+0x1ec>
 8006702:	2300      	movs	r3, #0
 8006704:	f04f 32ff 	mov.w	r2, #4294967295
 8006708:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800670c:	f10a 0a01 	add.w	sl, sl, #1
 8006710:	9304      	str	r3, [sp, #16]
 8006712:	9307      	str	r3, [sp, #28]
 8006714:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006718:	931a      	str	r3, [sp, #104]	@ 0x68
 800671a:	4654      	mov	r4, sl
 800671c:	2205      	movs	r2, #5
 800671e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006722:	4853      	ldr	r0, [pc, #332]	@ (8006870 <_vfiprintf_r+0x21c>)
 8006724:	f7f9 fd54 	bl	80001d0 <memchr>
 8006728:	9a04      	ldr	r2, [sp, #16]
 800672a:	b9d8      	cbnz	r0, 8006764 <_vfiprintf_r+0x110>
 800672c:	06d1      	lsls	r1, r2, #27
 800672e:	bf44      	itt	mi
 8006730:	2320      	movmi	r3, #32
 8006732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006736:	0713      	lsls	r3, r2, #28
 8006738:	bf44      	itt	mi
 800673a:	232b      	movmi	r3, #43	@ 0x2b
 800673c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006740:	f89a 3000 	ldrb.w	r3, [sl]
 8006744:	2b2a      	cmp	r3, #42	@ 0x2a
 8006746:	d015      	beq.n	8006774 <_vfiprintf_r+0x120>
 8006748:	9a07      	ldr	r2, [sp, #28]
 800674a:	4654      	mov	r4, sl
 800674c:	2000      	movs	r0, #0
 800674e:	f04f 0c0a 	mov.w	ip, #10
 8006752:	4621      	mov	r1, r4
 8006754:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006758:	3b30      	subs	r3, #48	@ 0x30
 800675a:	2b09      	cmp	r3, #9
 800675c:	d94b      	bls.n	80067f6 <_vfiprintf_r+0x1a2>
 800675e:	b1b0      	cbz	r0, 800678e <_vfiprintf_r+0x13a>
 8006760:	9207      	str	r2, [sp, #28]
 8006762:	e014      	b.n	800678e <_vfiprintf_r+0x13a>
 8006764:	eba0 0308 	sub.w	r3, r0, r8
 8006768:	fa09 f303 	lsl.w	r3, r9, r3
 800676c:	4313      	orrs	r3, r2
 800676e:	9304      	str	r3, [sp, #16]
 8006770:	46a2      	mov	sl, r4
 8006772:	e7d2      	b.n	800671a <_vfiprintf_r+0xc6>
 8006774:	9b03      	ldr	r3, [sp, #12]
 8006776:	1d19      	adds	r1, r3, #4
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	9103      	str	r1, [sp, #12]
 800677c:	2b00      	cmp	r3, #0
 800677e:	bfbb      	ittet	lt
 8006780:	425b      	neglt	r3, r3
 8006782:	f042 0202 	orrlt.w	r2, r2, #2
 8006786:	9307      	strge	r3, [sp, #28]
 8006788:	9307      	strlt	r3, [sp, #28]
 800678a:	bfb8      	it	lt
 800678c:	9204      	strlt	r2, [sp, #16]
 800678e:	7823      	ldrb	r3, [r4, #0]
 8006790:	2b2e      	cmp	r3, #46	@ 0x2e
 8006792:	d10a      	bne.n	80067aa <_vfiprintf_r+0x156>
 8006794:	7863      	ldrb	r3, [r4, #1]
 8006796:	2b2a      	cmp	r3, #42	@ 0x2a
 8006798:	d132      	bne.n	8006800 <_vfiprintf_r+0x1ac>
 800679a:	9b03      	ldr	r3, [sp, #12]
 800679c:	1d1a      	adds	r2, r3, #4
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	9203      	str	r2, [sp, #12]
 80067a2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067a6:	3402      	adds	r4, #2
 80067a8:	9305      	str	r3, [sp, #20]
 80067aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006880 <_vfiprintf_r+0x22c>
 80067ae:	7821      	ldrb	r1, [r4, #0]
 80067b0:	2203      	movs	r2, #3
 80067b2:	4650      	mov	r0, sl
 80067b4:	f7f9 fd0c 	bl	80001d0 <memchr>
 80067b8:	b138      	cbz	r0, 80067ca <_vfiprintf_r+0x176>
 80067ba:	9b04      	ldr	r3, [sp, #16]
 80067bc:	eba0 000a 	sub.w	r0, r0, sl
 80067c0:	2240      	movs	r2, #64	@ 0x40
 80067c2:	4082      	lsls	r2, r0
 80067c4:	4313      	orrs	r3, r2
 80067c6:	3401      	adds	r4, #1
 80067c8:	9304      	str	r3, [sp, #16]
 80067ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067ce:	4829      	ldr	r0, [pc, #164]	@ (8006874 <_vfiprintf_r+0x220>)
 80067d0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067d4:	2206      	movs	r2, #6
 80067d6:	f7f9 fcfb 	bl	80001d0 <memchr>
 80067da:	2800      	cmp	r0, #0
 80067dc:	d03f      	beq.n	800685e <_vfiprintf_r+0x20a>
 80067de:	4b26      	ldr	r3, [pc, #152]	@ (8006878 <_vfiprintf_r+0x224>)
 80067e0:	bb1b      	cbnz	r3, 800682a <_vfiprintf_r+0x1d6>
 80067e2:	9b03      	ldr	r3, [sp, #12]
 80067e4:	3307      	adds	r3, #7
 80067e6:	f023 0307 	bic.w	r3, r3, #7
 80067ea:	3308      	adds	r3, #8
 80067ec:	9303      	str	r3, [sp, #12]
 80067ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f0:	443b      	add	r3, r7
 80067f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80067f4:	e76a      	b.n	80066cc <_vfiprintf_r+0x78>
 80067f6:	fb0c 3202 	mla	r2, ip, r2, r3
 80067fa:	460c      	mov	r4, r1
 80067fc:	2001      	movs	r0, #1
 80067fe:	e7a8      	b.n	8006752 <_vfiprintf_r+0xfe>
 8006800:	2300      	movs	r3, #0
 8006802:	3401      	adds	r4, #1
 8006804:	9305      	str	r3, [sp, #20]
 8006806:	4619      	mov	r1, r3
 8006808:	f04f 0c0a 	mov.w	ip, #10
 800680c:	4620      	mov	r0, r4
 800680e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006812:	3a30      	subs	r2, #48	@ 0x30
 8006814:	2a09      	cmp	r2, #9
 8006816:	d903      	bls.n	8006820 <_vfiprintf_r+0x1cc>
 8006818:	2b00      	cmp	r3, #0
 800681a:	d0c6      	beq.n	80067aa <_vfiprintf_r+0x156>
 800681c:	9105      	str	r1, [sp, #20]
 800681e:	e7c4      	b.n	80067aa <_vfiprintf_r+0x156>
 8006820:	fb0c 2101 	mla	r1, ip, r1, r2
 8006824:	4604      	mov	r4, r0
 8006826:	2301      	movs	r3, #1
 8006828:	e7f0      	b.n	800680c <_vfiprintf_r+0x1b8>
 800682a:	ab03      	add	r3, sp, #12
 800682c:	9300      	str	r3, [sp, #0]
 800682e:	462a      	mov	r2, r5
 8006830:	4b12      	ldr	r3, [pc, #72]	@ (800687c <_vfiprintf_r+0x228>)
 8006832:	a904      	add	r1, sp, #16
 8006834:	4630      	mov	r0, r6
 8006836:	f3af 8000 	nop.w
 800683a:	4607      	mov	r7, r0
 800683c:	1c78      	adds	r0, r7, #1
 800683e:	d1d6      	bne.n	80067ee <_vfiprintf_r+0x19a>
 8006840:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006842:	07d9      	lsls	r1, r3, #31
 8006844:	d405      	bmi.n	8006852 <_vfiprintf_r+0x1fe>
 8006846:	89ab      	ldrh	r3, [r5, #12]
 8006848:	059a      	lsls	r2, r3, #22
 800684a:	d402      	bmi.n	8006852 <_vfiprintf_r+0x1fe>
 800684c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800684e:	f7ff fddd 	bl	800640c <__retarget_lock_release_recursive>
 8006852:	89ab      	ldrh	r3, [r5, #12]
 8006854:	065b      	lsls	r3, r3, #25
 8006856:	f53f af1f 	bmi.w	8006698 <_vfiprintf_r+0x44>
 800685a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800685c:	e71e      	b.n	800669c <_vfiprintf_r+0x48>
 800685e:	ab03      	add	r3, sp, #12
 8006860:	9300      	str	r3, [sp, #0]
 8006862:	462a      	mov	r2, r5
 8006864:	4b05      	ldr	r3, [pc, #20]	@ (800687c <_vfiprintf_r+0x228>)
 8006866:	a904      	add	r1, sp, #16
 8006868:	4630      	mov	r0, r6
 800686a:	f000 f879 	bl	8006960 <_printf_i>
 800686e:	e7e4      	b.n	800683a <_vfiprintf_r+0x1e6>
 8006870:	08006f30 	.word	0x08006f30
 8006874:	08006f3a 	.word	0x08006f3a
 8006878:	00000000 	.word	0x00000000
 800687c:	0800662f 	.word	0x0800662f
 8006880:	08006f36 	.word	0x08006f36

08006884 <_printf_common>:
 8006884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006888:	4616      	mov	r6, r2
 800688a:	4698      	mov	r8, r3
 800688c:	688a      	ldr	r2, [r1, #8]
 800688e:	690b      	ldr	r3, [r1, #16]
 8006890:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006894:	4293      	cmp	r3, r2
 8006896:	bfb8      	it	lt
 8006898:	4613      	movlt	r3, r2
 800689a:	6033      	str	r3, [r6, #0]
 800689c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068a0:	4607      	mov	r7, r0
 80068a2:	460c      	mov	r4, r1
 80068a4:	b10a      	cbz	r2, 80068aa <_printf_common+0x26>
 80068a6:	3301      	adds	r3, #1
 80068a8:	6033      	str	r3, [r6, #0]
 80068aa:	6823      	ldr	r3, [r4, #0]
 80068ac:	0699      	lsls	r1, r3, #26
 80068ae:	bf42      	ittt	mi
 80068b0:	6833      	ldrmi	r3, [r6, #0]
 80068b2:	3302      	addmi	r3, #2
 80068b4:	6033      	strmi	r3, [r6, #0]
 80068b6:	6825      	ldr	r5, [r4, #0]
 80068b8:	f015 0506 	ands.w	r5, r5, #6
 80068bc:	d106      	bne.n	80068cc <_printf_common+0x48>
 80068be:	f104 0a19 	add.w	sl, r4, #25
 80068c2:	68e3      	ldr	r3, [r4, #12]
 80068c4:	6832      	ldr	r2, [r6, #0]
 80068c6:	1a9b      	subs	r3, r3, r2
 80068c8:	42ab      	cmp	r3, r5
 80068ca:	dc26      	bgt.n	800691a <_printf_common+0x96>
 80068cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068d0:	6822      	ldr	r2, [r4, #0]
 80068d2:	3b00      	subs	r3, #0
 80068d4:	bf18      	it	ne
 80068d6:	2301      	movne	r3, #1
 80068d8:	0692      	lsls	r2, r2, #26
 80068da:	d42b      	bmi.n	8006934 <_printf_common+0xb0>
 80068dc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068e0:	4641      	mov	r1, r8
 80068e2:	4638      	mov	r0, r7
 80068e4:	47c8      	blx	r9
 80068e6:	3001      	adds	r0, #1
 80068e8:	d01e      	beq.n	8006928 <_printf_common+0xa4>
 80068ea:	6823      	ldr	r3, [r4, #0]
 80068ec:	6922      	ldr	r2, [r4, #16]
 80068ee:	f003 0306 	and.w	r3, r3, #6
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	bf02      	ittt	eq
 80068f6:	68e5      	ldreq	r5, [r4, #12]
 80068f8:	6833      	ldreq	r3, [r6, #0]
 80068fa:	1aed      	subeq	r5, r5, r3
 80068fc:	68a3      	ldr	r3, [r4, #8]
 80068fe:	bf0c      	ite	eq
 8006900:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006904:	2500      	movne	r5, #0
 8006906:	4293      	cmp	r3, r2
 8006908:	bfc4      	itt	gt
 800690a:	1a9b      	subgt	r3, r3, r2
 800690c:	18ed      	addgt	r5, r5, r3
 800690e:	2600      	movs	r6, #0
 8006910:	341a      	adds	r4, #26
 8006912:	42b5      	cmp	r5, r6
 8006914:	d11a      	bne.n	800694c <_printf_common+0xc8>
 8006916:	2000      	movs	r0, #0
 8006918:	e008      	b.n	800692c <_printf_common+0xa8>
 800691a:	2301      	movs	r3, #1
 800691c:	4652      	mov	r2, sl
 800691e:	4641      	mov	r1, r8
 8006920:	4638      	mov	r0, r7
 8006922:	47c8      	blx	r9
 8006924:	3001      	adds	r0, #1
 8006926:	d103      	bne.n	8006930 <_printf_common+0xac>
 8006928:	f04f 30ff 	mov.w	r0, #4294967295
 800692c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006930:	3501      	adds	r5, #1
 8006932:	e7c6      	b.n	80068c2 <_printf_common+0x3e>
 8006934:	18e1      	adds	r1, r4, r3
 8006936:	1c5a      	adds	r2, r3, #1
 8006938:	2030      	movs	r0, #48	@ 0x30
 800693a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800693e:	4422      	add	r2, r4
 8006940:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006944:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006948:	3302      	adds	r3, #2
 800694a:	e7c7      	b.n	80068dc <_printf_common+0x58>
 800694c:	2301      	movs	r3, #1
 800694e:	4622      	mov	r2, r4
 8006950:	4641      	mov	r1, r8
 8006952:	4638      	mov	r0, r7
 8006954:	47c8      	blx	r9
 8006956:	3001      	adds	r0, #1
 8006958:	d0e6      	beq.n	8006928 <_printf_common+0xa4>
 800695a:	3601      	adds	r6, #1
 800695c:	e7d9      	b.n	8006912 <_printf_common+0x8e>
	...

08006960 <_printf_i>:
 8006960:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006964:	7e0f      	ldrb	r7, [r1, #24]
 8006966:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006968:	2f78      	cmp	r7, #120	@ 0x78
 800696a:	4691      	mov	r9, r2
 800696c:	4680      	mov	r8, r0
 800696e:	460c      	mov	r4, r1
 8006970:	469a      	mov	sl, r3
 8006972:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006976:	d807      	bhi.n	8006988 <_printf_i+0x28>
 8006978:	2f62      	cmp	r7, #98	@ 0x62
 800697a:	d80a      	bhi.n	8006992 <_printf_i+0x32>
 800697c:	2f00      	cmp	r7, #0
 800697e:	f000 80d2 	beq.w	8006b26 <_printf_i+0x1c6>
 8006982:	2f58      	cmp	r7, #88	@ 0x58
 8006984:	f000 80b9 	beq.w	8006afa <_printf_i+0x19a>
 8006988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800698c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006990:	e03a      	b.n	8006a08 <_printf_i+0xa8>
 8006992:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006996:	2b15      	cmp	r3, #21
 8006998:	d8f6      	bhi.n	8006988 <_printf_i+0x28>
 800699a:	a101      	add	r1, pc, #4	@ (adr r1, 80069a0 <_printf_i+0x40>)
 800699c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069a0:	080069f9 	.word	0x080069f9
 80069a4:	08006a0d 	.word	0x08006a0d
 80069a8:	08006989 	.word	0x08006989
 80069ac:	08006989 	.word	0x08006989
 80069b0:	08006989 	.word	0x08006989
 80069b4:	08006989 	.word	0x08006989
 80069b8:	08006a0d 	.word	0x08006a0d
 80069bc:	08006989 	.word	0x08006989
 80069c0:	08006989 	.word	0x08006989
 80069c4:	08006989 	.word	0x08006989
 80069c8:	08006989 	.word	0x08006989
 80069cc:	08006b0d 	.word	0x08006b0d
 80069d0:	08006a37 	.word	0x08006a37
 80069d4:	08006ac7 	.word	0x08006ac7
 80069d8:	08006989 	.word	0x08006989
 80069dc:	08006989 	.word	0x08006989
 80069e0:	08006b2f 	.word	0x08006b2f
 80069e4:	08006989 	.word	0x08006989
 80069e8:	08006a37 	.word	0x08006a37
 80069ec:	08006989 	.word	0x08006989
 80069f0:	08006989 	.word	0x08006989
 80069f4:	08006acf 	.word	0x08006acf
 80069f8:	6833      	ldr	r3, [r6, #0]
 80069fa:	1d1a      	adds	r2, r3, #4
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6032      	str	r2, [r6, #0]
 8006a00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a04:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e09d      	b.n	8006b48 <_printf_i+0x1e8>
 8006a0c:	6833      	ldr	r3, [r6, #0]
 8006a0e:	6820      	ldr	r0, [r4, #0]
 8006a10:	1d19      	adds	r1, r3, #4
 8006a12:	6031      	str	r1, [r6, #0]
 8006a14:	0606      	lsls	r6, r0, #24
 8006a16:	d501      	bpl.n	8006a1c <_printf_i+0xbc>
 8006a18:	681d      	ldr	r5, [r3, #0]
 8006a1a:	e003      	b.n	8006a24 <_printf_i+0xc4>
 8006a1c:	0645      	lsls	r5, r0, #25
 8006a1e:	d5fb      	bpl.n	8006a18 <_printf_i+0xb8>
 8006a20:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a24:	2d00      	cmp	r5, #0
 8006a26:	da03      	bge.n	8006a30 <_printf_i+0xd0>
 8006a28:	232d      	movs	r3, #45	@ 0x2d
 8006a2a:	426d      	negs	r5, r5
 8006a2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a30:	4859      	ldr	r0, [pc, #356]	@ (8006b98 <_printf_i+0x238>)
 8006a32:	230a      	movs	r3, #10
 8006a34:	e011      	b.n	8006a5a <_printf_i+0xfa>
 8006a36:	6821      	ldr	r1, [r4, #0]
 8006a38:	6833      	ldr	r3, [r6, #0]
 8006a3a:	0608      	lsls	r0, r1, #24
 8006a3c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a40:	d402      	bmi.n	8006a48 <_printf_i+0xe8>
 8006a42:	0649      	lsls	r1, r1, #25
 8006a44:	bf48      	it	mi
 8006a46:	b2ad      	uxthmi	r5, r5
 8006a48:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a4a:	4853      	ldr	r0, [pc, #332]	@ (8006b98 <_printf_i+0x238>)
 8006a4c:	6033      	str	r3, [r6, #0]
 8006a4e:	bf14      	ite	ne
 8006a50:	230a      	movne	r3, #10
 8006a52:	2308      	moveq	r3, #8
 8006a54:	2100      	movs	r1, #0
 8006a56:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a5a:	6866      	ldr	r6, [r4, #4]
 8006a5c:	60a6      	str	r6, [r4, #8]
 8006a5e:	2e00      	cmp	r6, #0
 8006a60:	bfa2      	ittt	ge
 8006a62:	6821      	ldrge	r1, [r4, #0]
 8006a64:	f021 0104 	bicge.w	r1, r1, #4
 8006a68:	6021      	strge	r1, [r4, #0]
 8006a6a:	b90d      	cbnz	r5, 8006a70 <_printf_i+0x110>
 8006a6c:	2e00      	cmp	r6, #0
 8006a6e:	d04b      	beq.n	8006b08 <_printf_i+0x1a8>
 8006a70:	4616      	mov	r6, r2
 8006a72:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a76:	fb03 5711 	mls	r7, r3, r1, r5
 8006a7a:	5dc7      	ldrb	r7, [r0, r7]
 8006a7c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a80:	462f      	mov	r7, r5
 8006a82:	42bb      	cmp	r3, r7
 8006a84:	460d      	mov	r5, r1
 8006a86:	d9f4      	bls.n	8006a72 <_printf_i+0x112>
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d10b      	bne.n	8006aa4 <_printf_i+0x144>
 8006a8c:	6823      	ldr	r3, [r4, #0]
 8006a8e:	07df      	lsls	r7, r3, #31
 8006a90:	d508      	bpl.n	8006aa4 <_printf_i+0x144>
 8006a92:	6923      	ldr	r3, [r4, #16]
 8006a94:	6861      	ldr	r1, [r4, #4]
 8006a96:	4299      	cmp	r1, r3
 8006a98:	bfde      	ittt	le
 8006a9a:	2330      	movle	r3, #48	@ 0x30
 8006a9c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006aa0:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006aa4:	1b92      	subs	r2, r2, r6
 8006aa6:	6122      	str	r2, [r4, #16]
 8006aa8:	f8cd a000 	str.w	sl, [sp]
 8006aac:	464b      	mov	r3, r9
 8006aae:	aa03      	add	r2, sp, #12
 8006ab0:	4621      	mov	r1, r4
 8006ab2:	4640      	mov	r0, r8
 8006ab4:	f7ff fee6 	bl	8006884 <_printf_common>
 8006ab8:	3001      	adds	r0, #1
 8006aba:	d14a      	bne.n	8006b52 <_printf_i+0x1f2>
 8006abc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac0:	b004      	add	sp, #16
 8006ac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ac6:	6823      	ldr	r3, [r4, #0]
 8006ac8:	f043 0320 	orr.w	r3, r3, #32
 8006acc:	6023      	str	r3, [r4, #0]
 8006ace:	4833      	ldr	r0, [pc, #204]	@ (8006b9c <_printf_i+0x23c>)
 8006ad0:	2778      	movs	r7, #120	@ 0x78
 8006ad2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	6831      	ldr	r1, [r6, #0]
 8006ada:	061f      	lsls	r7, r3, #24
 8006adc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ae0:	d402      	bmi.n	8006ae8 <_printf_i+0x188>
 8006ae2:	065f      	lsls	r7, r3, #25
 8006ae4:	bf48      	it	mi
 8006ae6:	b2ad      	uxthmi	r5, r5
 8006ae8:	6031      	str	r1, [r6, #0]
 8006aea:	07d9      	lsls	r1, r3, #31
 8006aec:	bf44      	itt	mi
 8006aee:	f043 0320 	orrmi.w	r3, r3, #32
 8006af2:	6023      	strmi	r3, [r4, #0]
 8006af4:	b11d      	cbz	r5, 8006afe <_printf_i+0x19e>
 8006af6:	2310      	movs	r3, #16
 8006af8:	e7ac      	b.n	8006a54 <_printf_i+0xf4>
 8006afa:	4827      	ldr	r0, [pc, #156]	@ (8006b98 <_printf_i+0x238>)
 8006afc:	e7e9      	b.n	8006ad2 <_printf_i+0x172>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	f023 0320 	bic.w	r3, r3, #32
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	e7f6      	b.n	8006af6 <_printf_i+0x196>
 8006b08:	4616      	mov	r6, r2
 8006b0a:	e7bd      	b.n	8006a88 <_printf_i+0x128>
 8006b0c:	6833      	ldr	r3, [r6, #0]
 8006b0e:	6825      	ldr	r5, [r4, #0]
 8006b10:	6961      	ldr	r1, [r4, #20]
 8006b12:	1d18      	adds	r0, r3, #4
 8006b14:	6030      	str	r0, [r6, #0]
 8006b16:	062e      	lsls	r6, r5, #24
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	d501      	bpl.n	8006b20 <_printf_i+0x1c0>
 8006b1c:	6019      	str	r1, [r3, #0]
 8006b1e:	e002      	b.n	8006b26 <_printf_i+0x1c6>
 8006b20:	0668      	lsls	r0, r5, #25
 8006b22:	d5fb      	bpl.n	8006b1c <_printf_i+0x1bc>
 8006b24:	8019      	strh	r1, [r3, #0]
 8006b26:	2300      	movs	r3, #0
 8006b28:	6123      	str	r3, [r4, #16]
 8006b2a:	4616      	mov	r6, r2
 8006b2c:	e7bc      	b.n	8006aa8 <_printf_i+0x148>
 8006b2e:	6833      	ldr	r3, [r6, #0]
 8006b30:	1d1a      	adds	r2, r3, #4
 8006b32:	6032      	str	r2, [r6, #0]
 8006b34:	681e      	ldr	r6, [r3, #0]
 8006b36:	6862      	ldr	r2, [r4, #4]
 8006b38:	2100      	movs	r1, #0
 8006b3a:	4630      	mov	r0, r6
 8006b3c:	f7f9 fb48 	bl	80001d0 <memchr>
 8006b40:	b108      	cbz	r0, 8006b46 <_printf_i+0x1e6>
 8006b42:	1b80      	subs	r0, r0, r6
 8006b44:	6060      	str	r0, [r4, #4]
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	6123      	str	r3, [r4, #16]
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b50:	e7aa      	b.n	8006aa8 <_printf_i+0x148>
 8006b52:	6923      	ldr	r3, [r4, #16]
 8006b54:	4632      	mov	r2, r6
 8006b56:	4649      	mov	r1, r9
 8006b58:	4640      	mov	r0, r8
 8006b5a:	47d0      	blx	sl
 8006b5c:	3001      	adds	r0, #1
 8006b5e:	d0ad      	beq.n	8006abc <_printf_i+0x15c>
 8006b60:	6823      	ldr	r3, [r4, #0]
 8006b62:	079b      	lsls	r3, r3, #30
 8006b64:	d413      	bmi.n	8006b8e <_printf_i+0x22e>
 8006b66:	68e0      	ldr	r0, [r4, #12]
 8006b68:	9b03      	ldr	r3, [sp, #12]
 8006b6a:	4298      	cmp	r0, r3
 8006b6c:	bfb8      	it	lt
 8006b6e:	4618      	movlt	r0, r3
 8006b70:	e7a6      	b.n	8006ac0 <_printf_i+0x160>
 8006b72:	2301      	movs	r3, #1
 8006b74:	4632      	mov	r2, r6
 8006b76:	4649      	mov	r1, r9
 8006b78:	4640      	mov	r0, r8
 8006b7a:	47d0      	blx	sl
 8006b7c:	3001      	adds	r0, #1
 8006b7e:	d09d      	beq.n	8006abc <_printf_i+0x15c>
 8006b80:	3501      	adds	r5, #1
 8006b82:	68e3      	ldr	r3, [r4, #12]
 8006b84:	9903      	ldr	r1, [sp, #12]
 8006b86:	1a5b      	subs	r3, r3, r1
 8006b88:	42ab      	cmp	r3, r5
 8006b8a:	dcf2      	bgt.n	8006b72 <_printf_i+0x212>
 8006b8c:	e7eb      	b.n	8006b66 <_printf_i+0x206>
 8006b8e:	2500      	movs	r5, #0
 8006b90:	f104 0619 	add.w	r6, r4, #25
 8006b94:	e7f5      	b.n	8006b82 <_printf_i+0x222>
 8006b96:	bf00      	nop
 8006b98:	08006f41 	.word	0x08006f41
 8006b9c:	08006f52 	.word	0x08006f52

08006ba0 <__sflush_r>:
 8006ba0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006ba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba8:	0716      	lsls	r6, r2, #28
 8006baa:	4605      	mov	r5, r0
 8006bac:	460c      	mov	r4, r1
 8006bae:	d454      	bmi.n	8006c5a <__sflush_r+0xba>
 8006bb0:	684b      	ldr	r3, [r1, #4]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	dc02      	bgt.n	8006bbc <__sflush_r+0x1c>
 8006bb6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	dd48      	ble.n	8006c4e <__sflush_r+0xae>
 8006bbc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006bbe:	2e00      	cmp	r6, #0
 8006bc0:	d045      	beq.n	8006c4e <__sflush_r+0xae>
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006bc8:	682f      	ldr	r7, [r5, #0]
 8006bca:	6a21      	ldr	r1, [r4, #32]
 8006bcc:	602b      	str	r3, [r5, #0]
 8006bce:	d030      	beq.n	8006c32 <__sflush_r+0x92>
 8006bd0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	0759      	lsls	r1, r3, #29
 8006bd6:	d505      	bpl.n	8006be4 <__sflush_r+0x44>
 8006bd8:	6863      	ldr	r3, [r4, #4]
 8006bda:	1ad2      	subs	r2, r2, r3
 8006bdc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006bde:	b10b      	cbz	r3, 8006be4 <__sflush_r+0x44>
 8006be0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006be2:	1ad2      	subs	r2, r2, r3
 8006be4:	2300      	movs	r3, #0
 8006be6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006be8:	6a21      	ldr	r1, [r4, #32]
 8006bea:	4628      	mov	r0, r5
 8006bec:	47b0      	blx	r6
 8006bee:	1c43      	adds	r3, r0, #1
 8006bf0:	89a3      	ldrh	r3, [r4, #12]
 8006bf2:	d106      	bne.n	8006c02 <__sflush_r+0x62>
 8006bf4:	6829      	ldr	r1, [r5, #0]
 8006bf6:	291d      	cmp	r1, #29
 8006bf8:	d82b      	bhi.n	8006c52 <__sflush_r+0xb2>
 8006bfa:	4a2a      	ldr	r2, [pc, #168]	@ (8006ca4 <__sflush_r+0x104>)
 8006bfc:	410a      	asrs	r2, r1
 8006bfe:	07d6      	lsls	r6, r2, #31
 8006c00:	d427      	bmi.n	8006c52 <__sflush_r+0xb2>
 8006c02:	2200      	movs	r2, #0
 8006c04:	6062      	str	r2, [r4, #4]
 8006c06:	04d9      	lsls	r1, r3, #19
 8006c08:	6922      	ldr	r2, [r4, #16]
 8006c0a:	6022      	str	r2, [r4, #0]
 8006c0c:	d504      	bpl.n	8006c18 <__sflush_r+0x78>
 8006c0e:	1c42      	adds	r2, r0, #1
 8006c10:	d101      	bne.n	8006c16 <__sflush_r+0x76>
 8006c12:	682b      	ldr	r3, [r5, #0]
 8006c14:	b903      	cbnz	r3, 8006c18 <__sflush_r+0x78>
 8006c16:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c1a:	602f      	str	r7, [r5, #0]
 8006c1c:	b1b9      	cbz	r1, 8006c4e <__sflush_r+0xae>
 8006c1e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c22:	4299      	cmp	r1, r3
 8006c24:	d002      	beq.n	8006c2c <__sflush_r+0x8c>
 8006c26:	4628      	mov	r0, r5
 8006c28:	f7ff fbf2 	bl	8006410 <_free_r>
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c30:	e00d      	b.n	8006c4e <__sflush_r+0xae>
 8006c32:	2301      	movs	r3, #1
 8006c34:	4628      	mov	r0, r5
 8006c36:	47b0      	blx	r6
 8006c38:	4602      	mov	r2, r0
 8006c3a:	1c50      	adds	r0, r2, #1
 8006c3c:	d1c9      	bne.n	8006bd2 <__sflush_r+0x32>
 8006c3e:	682b      	ldr	r3, [r5, #0]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0c6      	beq.n	8006bd2 <__sflush_r+0x32>
 8006c44:	2b1d      	cmp	r3, #29
 8006c46:	d001      	beq.n	8006c4c <__sflush_r+0xac>
 8006c48:	2b16      	cmp	r3, #22
 8006c4a:	d11e      	bne.n	8006c8a <__sflush_r+0xea>
 8006c4c:	602f      	str	r7, [r5, #0]
 8006c4e:	2000      	movs	r0, #0
 8006c50:	e022      	b.n	8006c98 <__sflush_r+0xf8>
 8006c52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c56:	b21b      	sxth	r3, r3
 8006c58:	e01b      	b.n	8006c92 <__sflush_r+0xf2>
 8006c5a:	690f      	ldr	r7, [r1, #16]
 8006c5c:	2f00      	cmp	r7, #0
 8006c5e:	d0f6      	beq.n	8006c4e <__sflush_r+0xae>
 8006c60:	0793      	lsls	r3, r2, #30
 8006c62:	680e      	ldr	r6, [r1, #0]
 8006c64:	bf08      	it	eq
 8006c66:	694b      	ldreq	r3, [r1, #20]
 8006c68:	600f      	str	r7, [r1, #0]
 8006c6a:	bf18      	it	ne
 8006c6c:	2300      	movne	r3, #0
 8006c6e:	eba6 0807 	sub.w	r8, r6, r7
 8006c72:	608b      	str	r3, [r1, #8]
 8006c74:	f1b8 0f00 	cmp.w	r8, #0
 8006c78:	dde9      	ble.n	8006c4e <__sflush_r+0xae>
 8006c7a:	6a21      	ldr	r1, [r4, #32]
 8006c7c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006c7e:	4643      	mov	r3, r8
 8006c80:	463a      	mov	r2, r7
 8006c82:	4628      	mov	r0, r5
 8006c84:	47b0      	blx	r6
 8006c86:	2800      	cmp	r0, #0
 8006c88:	dc08      	bgt.n	8006c9c <__sflush_r+0xfc>
 8006c8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c92:	81a3      	strh	r3, [r4, #12]
 8006c94:	f04f 30ff 	mov.w	r0, #4294967295
 8006c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c9c:	4407      	add	r7, r0
 8006c9e:	eba8 0800 	sub.w	r8, r8, r0
 8006ca2:	e7e7      	b.n	8006c74 <__sflush_r+0xd4>
 8006ca4:	dfbffffe 	.word	0xdfbffffe

08006ca8 <_fflush_r>:
 8006ca8:	b538      	push	{r3, r4, r5, lr}
 8006caa:	690b      	ldr	r3, [r1, #16]
 8006cac:	4605      	mov	r5, r0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	b913      	cbnz	r3, 8006cb8 <_fflush_r+0x10>
 8006cb2:	2500      	movs	r5, #0
 8006cb4:	4628      	mov	r0, r5
 8006cb6:	bd38      	pop	{r3, r4, r5, pc}
 8006cb8:	b118      	cbz	r0, 8006cc2 <_fflush_r+0x1a>
 8006cba:	6a03      	ldr	r3, [r0, #32]
 8006cbc:	b90b      	cbnz	r3, 8006cc2 <_fflush_r+0x1a>
 8006cbe:	f7ff f9ad 	bl	800601c <__sinit>
 8006cc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d0f3      	beq.n	8006cb2 <_fflush_r+0xa>
 8006cca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006ccc:	07d0      	lsls	r0, r2, #31
 8006cce:	d404      	bmi.n	8006cda <_fflush_r+0x32>
 8006cd0:	0599      	lsls	r1, r3, #22
 8006cd2:	d402      	bmi.n	8006cda <_fflush_r+0x32>
 8006cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cd6:	f7ff fb98 	bl	800640a <__retarget_lock_acquire_recursive>
 8006cda:	4628      	mov	r0, r5
 8006cdc:	4621      	mov	r1, r4
 8006cde:	f7ff ff5f 	bl	8006ba0 <__sflush_r>
 8006ce2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ce4:	07da      	lsls	r2, r3, #31
 8006ce6:	4605      	mov	r5, r0
 8006ce8:	d4e4      	bmi.n	8006cb4 <_fflush_r+0xc>
 8006cea:	89a3      	ldrh	r3, [r4, #12]
 8006cec:	059b      	lsls	r3, r3, #22
 8006cee:	d4e1      	bmi.n	8006cb4 <_fflush_r+0xc>
 8006cf0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cf2:	f7ff fb8b 	bl	800640c <__retarget_lock_release_recursive>
 8006cf6:	e7dd      	b.n	8006cb4 <_fflush_r+0xc>

08006cf8 <__swhatbuf_r>:
 8006cf8:	b570      	push	{r4, r5, r6, lr}
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d00:	2900      	cmp	r1, #0
 8006d02:	b096      	sub	sp, #88	@ 0x58
 8006d04:	4615      	mov	r5, r2
 8006d06:	461e      	mov	r6, r3
 8006d08:	da0d      	bge.n	8006d26 <__swhatbuf_r+0x2e>
 8006d0a:	89a3      	ldrh	r3, [r4, #12]
 8006d0c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d10:	f04f 0100 	mov.w	r1, #0
 8006d14:	bf14      	ite	ne
 8006d16:	2340      	movne	r3, #64	@ 0x40
 8006d18:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d1c:	2000      	movs	r0, #0
 8006d1e:	6031      	str	r1, [r6, #0]
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	b016      	add	sp, #88	@ 0x58
 8006d24:	bd70      	pop	{r4, r5, r6, pc}
 8006d26:	466a      	mov	r2, sp
 8006d28:	f000 f848 	bl	8006dbc <_fstat_r>
 8006d2c:	2800      	cmp	r0, #0
 8006d2e:	dbec      	blt.n	8006d0a <__swhatbuf_r+0x12>
 8006d30:	9901      	ldr	r1, [sp, #4]
 8006d32:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d36:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d3a:	4259      	negs	r1, r3
 8006d3c:	4159      	adcs	r1, r3
 8006d3e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d42:	e7eb      	b.n	8006d1c <__swhatbuf_r+0x24>

08006d44 <__smakebuf_r>:
 8006d44:	898b      	ldrh	r3, [r1, #12]
 8006d46:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d48:	079d      	lsls	r5, r3, #30
 8006d4a:	4606      	mov	r6, r0
 8006d4c:	460c      	mov	r4, r1
 8006d4e:	d507      	bpl.n	8006d60 <__smakebuf_r+0x1c>
 8006d50:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	6123      	str	r3, [r4, #16]
 8006d58:	2301      	movs	r3, #1
 8006d5a:	6163      	str	r3, [r4, #20]
 8006d5c:	b003      	add	sp, #12
 8006d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d60:	ab01      	add	r3, sp, #4
 8006d62:	466a      	mov	r2, sp
 8006d64:	f7ff ffc8 	bl	8006cf8 <__swhatbuf_r>
 8006d68:	9f00      	ldr	r7, [sp, #0]
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	4639      	mov	r1, r7
 8006d6e:	4630      	mov	r0, r6
 8006d70:	f7ff fbba 	bl	80064e8 <_malloc_r>
 8006d74:	b948      	cbnz	r0, 8006d8a <__smakebuf_r+0x46>
 8006d76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d7a:	059a      	lsls	r2, r3, #22
 8006d7c:	d4ee      	bmi.n	8006d5c <__smakebuf_r+0x18>
 8006d7e:	f023 0303 	bic.w	r3, r3, #3
 8006d82:	f043 0302 	orr.w	r3, r3, #2
 8006d86:	81a3      	strh	r3, [r4, #12]
 8006d88:	e7e2      	b.n	8006d50 <__smakebuf_r+0xc>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	6020      	str	r0, [r4, #0]
 8006d8e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006d92:	81a3      	strh	r3, [r4, #12]
 8006d94:	9b01      	ldr	r3, [sp, #4]
 8006d96:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006d9a:	b15b      	cbz	r3, 8006db4 <__smakebuf_r+0x70>
 8006d9c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006da0:	4630      	mov	r0, r6
 8006da2:	f000 f81d 	bl	8006de0 <_isatty_r>
 8006da6:	b128      	cbz	r0, 8006db4 <__smakebuf_r+0x70>
 8006da8:	89a3      	ldrh	r3, [r4, #12]
 8006daa:	f023 0303 	bic.w	r3, r3, #3
 8006dae:	f043 0301 	orr.w	r3, r3, #1
 8006db2:	81a3      	strh	r3, [r4, #12]
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	431d      	orrs	r5, r3
 8006db8:	81a5      	strh	r5, [r4, #12]
 8006dba:	e7cf      	b.n	8006d5c <__smakebuf_r+0x18>

08006dbc <_fstat_r>:
 8006dbc:	b538      	push	{r3, r4, r5, lr}
 8006dbe:	4d07      	ldr	r5, [pc, #28]	@ (8006ddc <_fstat_r+0x20>)
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	4604      	mov	r4, r0
 8006dc4:	4608      	mov	r0, r1
 8006dc6:	4611      	mov	r1, r2
 8006dc8:	602b      	str	r3, [r5, #0]
 8006dca:	f7f9 ff72 	bl	8000cb2 <_fstat>
 8006dce:	1c43      	adds	r3, r0, #1
 8006dd0:	d102      	bne.n	8006dd8 <_fstat_r+0x1c>
 8006dd2:	682b      	ldr	r3, [r5, #0]
 8006dd4:	b103      	cbz	r3, 8006dd8 <_fstat_r+0x1c>
 8006dd6:	6023      	str	r3, [r4, #0]
 8006dd8:	bd38      	pop	{r3, r4, r5, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000568 	.word	0x20000568

08006de0 <_isatty_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4d06      	ldr	r5, [pc, #24]	@ (8006dfc <_isatty_r+0x1c>)
 8006de4:	2300      	movs	r3, #0
 8006de6:	4604      	mov	r4, r0
 8006de8:	4608      	mov	r0, r1
 8006dea:	602b      	str	r3, [r5, #0]
 8006dec:	f7f9 ff71 	bl	8000cd2 <_isatty>
 8006df0:	1c43      	adds	r3, r0, #1
 8006df2:	d102      	bne.n	8006dfa <_isatty_r+0x1a>
 8006df4:	682b      	ldr	r3, [r5, #0]
 8006df6:	b103      	cbz	r3, 8006dfa <_isatty_r+0x1a>
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	bd38      	pop	{r3, r4, r5, pc}
 8006dfc:	20000568 	.word	0x20000568

08006e00 <_sbrk_r>:
 8006e00:	b538      	push	{r3, r4, r5, lr}
 8006e02:	4d06      	ldr	r5, [pc, #24]	@ (8006e1c <_sbrk_r+0x1c>)
 8006e04:	2300      	movs	r3, #0
 8006e06:	4604      	mov	r4, r0
 8006e08:	4608      	mov	r0, r1
 8006e0a:	602b      	str	r3, [r5, #0]
 8006e0c:	f7f9 ff7a 	bl	8000d04 <_sbrk>
 8006e10:	1c43      	adds	r3, r0, #1
 8006e12:	d102      	bne.n	8006e1a <_sbrk_r+0x1a>
 8006e14:	682b      	ldr	r3, [r5, #0]
 8006e16:	b103      	cbz	r3, 8006e1a <_sbrk_r+0x1a>
 8006e18:	6023      	str	r3, [r4, #0]
 8006e1a:	bd38      	pop	{r3, r4, r5, pc}
 8006e1c:	20000568 	.word	0x20000568

08006e20 <_init>:
 8006e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e22:	bf00      	nop
 8006e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e26:	bc08      	pop	{r3}
 8006e28:	469e      	mov	lr, r3
 8006e2a:	4770      	bx	lr

08006e2c <_fini>:
 8006e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e2e:	bf00      	nop
 8006e30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e32:	bc08      	pop	{r3}
 8006e34:	469e      	mov	lr, r3
 8006e36:	4770      	bx	lr
