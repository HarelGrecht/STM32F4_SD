
SD_Reader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006cd0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08006e60  08006e60  00007e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fa0  08006fa0  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006fa0  08006fa0  00007fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fa8  08006fa8  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fa8  08006fa8  00007fa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006fac  08006fac  00007fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006fb0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000806c  2**0
                  CONTENTS
 10 .bss          0000050c  2000006c  2000006c  0000806c  2**2
                  ALLOC
 11 ._user_heap_stack 00003000  20000578  20000578  0000806c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001063a  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a9d  00000000  00000000  000186d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e80  00000000  00000000  0001b178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b04  00000000  00000000  0001bff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002395f  00000000  00000000  0001cafc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013816  00000000  00000000  0004045b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cbba2  00000000  00000000  00053c71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011f813  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000426c  00000000  00000000  0011f858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00123ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e48 	.word	0x08006e48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006e48 	.word	0x08006e48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fc54 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f834 	bl	80005d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f000 f908 	bl	8000780 <MX_GPIO_Init>
  MX_DMA_Init();
 8000570:	f000 f8e6 	bl	8000740 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000574:	f000 f898 	bl	80006a8 <MX_SDIO_SD_Init>
  MX_USART2_UART_Init();
 8000578:	f000 f8b8 	bl	80006ec <MX_USART2_UART_Init>
  MX_FATFS_Init();
 800057c:	f004 fe5c 	bl	8005238 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(DONE_GPIO_Port, DONE_Pin, GPIO_PIN_SET);
 8000580:	2201      	movs	r2, #1
 8000582:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000586:	4810      	ldr	r0, [pc, #64]	@ (80005c8 <main+0x68>)
 8000588:	f001 fb1a 	bl	8001bc0 <HAL_GPIO_WritePin>

  if(InitSD() == false) {
 800058c:	f000 f97e 	bl	800088c <InitSD>
 8000590:	4603      	mov	r3, r0
 8000592:	f083 0301 	eor.w	r3, r3, #1
 8000596:	b2db      	uxtb	r3, r3
 8000598:	2b00      	cmp	r3, #0
 800059a:	d007      	beq.n	80005ac <main+0x4c>
	  HAL_GPIO_WritePin(GPIOD, Mount_Status_Pin|DONE_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80005a2:	4809      	ldr	r0, [pc, #36]	@ (80005c8 <main+0x68>)
 80005a4:	f001 fb0c 	bl	8001bc0 <HAL_GPIO_WritePin>
	  Error_Handler();
 80005a8:	f000 f9e4 	bl	8000974 <Error_Handler>
  }
  HAL_GPIO_WritePin(GPIOD, Mount_Status_Pin|DONE_Pin, GPIO_PIN_SET);
 80005ac:	2201      	movs	r2, #1
 80005ae:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 80005b2:	4805      	ldr	r0, [pc, #20]	@ (80005c8 <main+0x68>)
 80005b4:	f001 fb04 	bl	8001bc0 <HAL_GPIO_WritePin>

  HAL_UART_Receive_IT(&huart2, (uint8_t *)rxBuffer, 1);
 80005b8:	2201      	movs	r2, #1
 80005ba:	4904      	ldr	r1, [pc, #16]	@ (80005cc <main+0x6c>)
 80005bc:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <main+0x70>)
 80005be:	f003 f9a3 	bl	8003908 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c2:	bf00      	nop
 80005c4:	e7fd      	b.n	80005c2 <main+0x62>
 80005c6:	bf00      	nop
 80005c8:	40020c00 	.word	0x40020c00
 80005cc:	200003e4 	.word	0x200003e4
 80005d0:	2000010c 	.word	0x2000010c

080005d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b094      	sub	sp, #80	@ 0x50
 80005d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005da:	f107 0320 	add.w	r3, r7, #32
 80005de:	2230      	movs	r2, #48	@ 0x30
 80005e0:	2100      	movs	r1, #0
 80005e2:	4618      	mov	r0, r3
 80005e4:	f005 feac 	bl	8006340 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f8:	2300      	movs	r3, #0
 80005fa:	60bb      	str	r3, [r7, #8]
 80005fc:	4b28      	ldr	r3, [pc, #160]	@ (80006a0 <SystemClock_Config+0xcc>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000600:	4a27      	ldr	r2, [pc, #156]	@ (80006a0 <SystemClock_Config+0xcc>)
 8000602:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000606:	6413      	str	r3, [r2, #64]	@ 0x40
 8000608:	4b25      	ldr	r3, [pc, #148]	@ (80006a0 <SystemClock_Config+0xcc>)
 800060a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000614:	2300      	movs	r3, #0
 8000616:	607b      	str	r3, [r7, #4]
 8000618:	4b22      	ldr	r3, [pc, #136]	@ (80006a4 <SystemClock_Config+0xd0>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a21      	ldr	r2, [pc, #132]	@ (80006a4 <SystemClock_Config+0xd0>)
 800061e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000622:	6013      	str	r3, [r2, #0]
 8000624:	4b1f      	ldr	r3, [pc, #124]	@ (80006a4 <SystemClock_Config+0xd0>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000630:	2302      	movs	r3, #2
 8000632:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000634:	2301      	movs	r3, #1
 8000636:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000638:	2310      	movs	r3, #16
 800063a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000640:	2300      	movs	r3, #0
 8000642:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000644:	2308      	movs	r3, #8
 8000646:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000648:	23a8      	movs	r3, #168	@ 0xa8
 800064a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800064c:	2302      	movs	r3, #2
 800064e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000650:	2307      	movs	r3, #7
 8000652:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000654:	f107 0320 	add.w	r3, r7, #32
 8000658:	4618      	mov	r0, r3
 800065a:	f001 facb 	bl	8001bf4 <HAL_RCC_OscConfig>
 800065e:	4603      	mov	r3, r0
 8000660:	2b00      	cmp	r3, #0
 8000662:	d001      	beq.n	8000668 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000664:	f000 f986 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000668:	230f      	movs	r3, #15
 800066a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066c:	2302      	movs	r3, #2
 800066e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000670:	2300      	movs	r3, #0
 8000672:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000674:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000678:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800067e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000680:	f107 030c 	add.w	r3, r7, #12
 8000684:	2105      	movs	r1, #5
 8000686:	4618      	mov	r0, r3
 8000688:	f001 fd2c 	bl	80020e4 <HAL_RCC_ClockConfig>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000692:	f000 f96f 	bl	8000974 <Error_Handler>
  }
}
 8000696:	bf00      	nop
 8000698:	3750      	adds	r7, #80	@ 0x50
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006ae:	4a0e      	ldr	r2, [pc, #56]	@ (80006e8 <MX_SDIO_SD_Init+0x40>)
 80006b0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 80006b2:	4b0c      	ldr	r3, [pc, #48]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 80006b8:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80006be:	4b09      	ldr	r3, [pc, #36]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_4B;
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80006ca:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80006cc:	4b05      	ldr	r3, [pc, #20]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 80006d2:	4b04      	ldr	r3, [pc, #16]	@ (80006e4 <MX_SDIO_SD_Init+0x3c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr
 80006e2:	bf00      	nop
 80006e4:	20000088 	.word	0x20000088
 80006e8:	40012c00 	.word	0x40012c00

080006ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006f0:	4b10      	ldr	r3, [pc, #64]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 80006f2:	4a11      	ldr	r2, [pc, #68]	@ (8000738 <MX_USART2_UART_Init+0x4c>)
 80006f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 2625000;
 80006f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 80006f8:	4a10      	ldr	r2, [pc, #64]	@ (800073c <MX_USART2_UART_Init+0x50>)
 80006fa:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000708:	4b0a      	ldr	r3, [pc, #40]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 8000710:	220c      	movs	r2, #12
 8000712:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000714:	4b07      	ldr	r3, [pc, #28]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800071a:	4b06      	ldr	r3, [pc, #24]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000720:	4804      	ldr	r0, [pc, #16]	@ (8000734 <MX_USART2_UART_Init+0x48>)
 8000722:	f003 f8a1 	bl	8003868 <HAL_UART_Init>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <MX_USART2_UART_Init+0x44>
  {
    Error_Handler();
 800072c:	f000 f922 	bl	8000974 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	2000010c 	.word	0x2000010c
 8000738:	40004400 	.word	0x40004400
 800073c:	00280de8 	.word	0x00280de8

08000740 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	607b      	str	r3, [r7, #4]
 800074a:	4b0c      	ldr	r3, [pc, #48]	@ (800077c <MX_DMA_Init+0x3c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074e:	4a0b      	ldr	r2, [pc, #44]	@ (800077c <MX_DMA_Init+0x3c>)
 8000750:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000754:	6313      	str	r3, [r2, #48]	@ 0x30
 8000756:	4b09      	ldr	r3, [pc, #36]	@ (800077c <MX_DMA_Init+0x3c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000762:	2200      	movs	r2, #0
 8000764:	2100      	movs	r1, #0
 8000766:	2011      	movs	r0, #17
 8000768:	f000 fcc3 	bl	80010f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800076c:	2011      	movs	r0, #17
 800076e:	f000 fcdc 	bl	800112a <HAL_NVIC_EnableIRQ>

}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b08a      	sub	sp, #40	@ 0x28
 8000784:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
 800079a:	4b2e      	ldr	r3, [pc, #184]	@ (8000854 <MX_GPIO_Init+0xd4>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	4a2d      	ldr	r2, [pc, #180]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a6:	4b2b      	ldr	r3, [pc, #172]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007ae:	613b      	str	r3, [r7, #16]
 80007b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b2:	2300      	movs	r3, #0
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	4a26      	ldr	r2, [pc, #152]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007c2:	4b24      	ldr	r3, [pc, #144]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	4b20      	ldr	r3, [pc, #128]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007d8:	f043 0308 	orr.w	r3, r3, #8
 80007dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007de:	4b1d      	ldr	r3, [pc, #116]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b19      	ldr	r3, [pc, #100]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	4a18      	ldr	r2, [pc, #96]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007f4:	f043 0304 	orr.w	r3, r3, #4
 80007f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fa:	4b16      	ldr	r3, [pc, #88]	@ (8000854 <MX_GPIO_Init+0xd4>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fe:	f003 0304 	and.w	r3, r3, #4
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Mount_Status_Pin|DONE_Pin, GPIO_PIN_RESET);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 4120 	mov.w	r1, #40960	@ 0xa000
 800080c:	4812      	ldr	r0, [pc, #72]	@ (8000858 <MX_GPIO_Init+0xd8>)
 800080e:	f001 f9d7 	bl	8001bc0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Mount_Status_Pin DONE_Pin */
  GPIO_InitStruct.Pin = Mount_Status_Pin|DONE_Pin;
 8000812:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	480b      	ldr	r0, [pc, #44]	@ (8000858 <MX_GPIO_Init+0xd8>)
 800082c:	f001 f814 	bl	8001858 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000830:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083a:	2300      	movs	r3, #0
 800083c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_GPIO_Init+0xdc>)
 8000846:	f001 f807 	bl	8001858 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800084a:	bf00      	nop
 800084c:	3728      	adds	r7, #40	@ 0x28
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	40023800 	.word	0x40023800
 8000858:	40020c00 	.word	0x40020c00
 800085c:	40020000 	.word	0x40020000

08000860 <HAL_UART_TxCpltCallback>:

    // Wait for the last DMA transmission to complete
    while (!dma_tx_complete);
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) {
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	4a05      	ldr	r2, [pc, #20]	@ (8000884 <HAL_UART_TxCpltCallback+0x24>)
 800086e:	4293      	cmp	r3, r2
 8000870:	d102      	bne.n	8000878 <HAL_UART_TxCpltCallback+0x18>
        dma_tx_complete = 1;  // Set DMA transmission complete flag
 8000872:	4b05      	ldr	r3, [pc, #20]	@ (8000888 <HAL_UART_TxCpltCallback+0x28>)
 8000874:	2201      	movs	r2, #1
 8000876:	701a      	strb	r2, [r3, #0]
    }
}
 8000878:	bf00      	nop
 800087a:	370c      	adds	r7, #12
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr
 8000884:	40004400 	.word	0x40004400
 8000888:	20000000 	.word	0x20000000

0800088c <InitSD>:

bool InitSD() {
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
	if (HAL_SD_Init(&hsd) != HAL_OK) {
 8000892:	482b      	ldr	r0, [pc, #172]	@ (8000940 <InitSD+0xb4>)
 8000894:	f001 fe46 	bl	8002524 <HAL_SD_Init>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d003      	beq.n	80008a6 <InitSD+0x1a>
		Error_Handler();
 800089e:	f000 f869 	bl	8000974 <Error_Handler>
		return false;
 80008a2:	2300      	movs	r3, #0
 80008a4:	e048      	b.n	8000938 <InitSD+0xac>
	}
	HAL_Delay(100);
 80008a6:	2064      	movs	r0, #100	@ 0x64
 80008a8:	f000 fb24 	bl	8000ef4 <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8) == GPIO_PIN_RESET){
 80008ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80008b0:	4824      	ldr	r0, [pc, #144]	@ (8000944 <InitSD+0xb8>)
 80008b2:	f001 f96d 	bl	8001b90 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d103      	bne.n	80008c4 <InitSD+0x38>
		printf("PA8 reset");
 80008bc:	4822      	ldr	r0, [pc, #136]	@ (8000948 <InitSD+0xbc>)
 80008be:	f005 fbf7 	bl	80060b0 <iprintf>
 80008c2:	e002      	b.n	80008ca <InitSD+0x3e>
	}else{
		printf("PA8 SET");
 80008c4:	4821      	ldr	r0, [pc, #132]	@ (800094c <InitSD+0xc0>)
 80008c6:	f005 fbf3 	bl	80060b0 <iprintf>
	}
    if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == GPIO_PIN_RESET) {
 80008ca:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80008ce:	4820      	ldr	r0, [pc, #128]	@ (8000950 <InitSD+0xc4>)
 80008d0:	f001 f95e 	bl	8001b90 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d104      	bne.n	80008e4 <InitSD+0x58>
        printf("No SD card detected\r\n");
 80008da:	481e      	ldr	r0, [pc, #120]	@ (8000954 <InitSD+0xc8>)
 80008dc:	f005 fc50 	bl	8006180 <puts>
        return false;  // Exit if no card is detected
 80008e0:	2300      	movs	r3, #0
 80008e2:	e029      	b.n	8000938 <InitSD+0xac>
    }
    FRESULT res  = f_mount(&fileSystem, " ", 1);
 80008e4:	2201      	movs	r2, #1
 80008e6:	491c      	ldr	r1, [pc, #112]	@ (8000958 <InitSD+0xcc>)
 80008e8:	481c      	ldr	r0, [pc, #112]	@ (800095c <InitSD+0xd0>)
 80008ea:	f005 fa7d 	bl	8005de8 <f_mount>
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
	if (res != FR_OK) {
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d01b      	beq.n	8000930 <InitSD+0xa4>
		switch (res) {
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	2b0d      	cmp	r3, #13
 80008fc:	d006      	beq.n	800090c <InitSD+0x80>
 80008fe:	2b0d      	cmp	r3, #13
 8000900:	dc10      	bgt.n	8000924 <InitSD+0x98>
 8000902:	2b01      	cmp	r3, #1
 8000904:	d006      	beq.n	8000914 <InitSD+0x88>
 8000906:	2b03      	cmp	r3, #3
 8000908:	d008      	beq.n	800091c <InitSD+0x90>
 800090a:	e00b      	b.n	8000924 <InitSD+0x98>
			case FR_NO_FILESYSTEM:
				printf("no filesystem found");
 800090c:	4814      	ldr	r0, [pc, #80]	@ (8000960 <InitSD+0xd4>)
 800090e:	f005 fbcf 	bl	80060b0 <iprintf>
				break;
 8000912:	e00b      	b.n	800092c <InitSD+0xa0>
			case FR_DISK_ERR:
				printf("disk error");
 8000914:	4813      	ldr	r0, [pc, #76]	@ (8000964 <InitSD+0xd8>)
 8000916:	f005 fbcb 	bl	80060b0 <iprintf>
				break;
 800091a:	e007      	b.n	800092c <InitSD+0xa0>
			case FR_NOT_READY:
				printf("Not ready");
 800091c:	4812      	ldr	r0, [pc, #72]	@ (8000968 <InitSD+0xdc>)
 800091e:	f005 fbc7 	bl	80060b0 <iprintf>
				break;
 8000922:	e003      	b.n	800092c <InitSD+0xa0>
			default:
				printf("Unknown error");
 8000924:	4811      	ldr	r0, [pc, #68]	@ (800096c <InitSD+0xe0>)
 8000926:	f005 fbc3 	bl	80060b0 <iprintf>
				break;
 800092a:	bf00      	nop
		}
		return false;
 800092c:	2300      	movs	r3, #0
 800092e:	e003      	b.n	8000938 <InitSD+0xac>

	}
	printf("SD card mounted successfully");
 8000930:	480f      	ldr	r0, [pc, #60]	@ (8000970 <InitSD+0xe4>)
 8000932:	f005 fbbd 	bl	80060b0 <iprintf>
	return true;
 8000936:	2301      	movs	r3, #1
}
 8000938:	4618      	mov	r0, r3
 800093a:	3708      	adds	r7, #8
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000088 	.word	0x20000088
 8000944:	40020000 	.word	0x40020000
 8000948:	08006eac 	.word	0x08006eac
 800094c:	08006eb8 	.word	0x08006eb8
 8000950:	40020800 	.word	0x40020800
 8000954:	08006ec0 	.word	0x08006ec0
 8000958:	08006ed8 	.word	0x08006ed8
 800095c:	200001b4 	.word	0x200001b4
 8000960:	08006edc 	.word	0x08006edc
 8000964:	08006ef0 	.word	0x08006ef0
 8000968:	08006efc 	.word	0x08006efc
 800096c:	08006f08 	.word	0x08006f08
 8000970:	08006f18 	.word	0x08006f18

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <Error_Handler+0x8>

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	@ (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000994:	6453      	str	r3, [r2, #68]	@ 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d8:	f107 0314 	add.w	r3, r7, #20
 80009dc:	2200      	movs	r2, #0
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	605a      	str	r2, [r3, #4]
 80009e2:	609a      	str	r2, [r3, #8]
 80009e4:	60da      	str	r2, [r3, #12]
 80009e6:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a31      	ldr	r2, [pc, #196]	@ (8000ab4 <HAL_SD_MspInit+0xe4>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d15b      	bne.n	8000aaa <HAL_SD_MspInit+0xda>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80009f2:	2300      	movs	r3, #0
 80009f4:	613b      	str	r3, [r7, #16]
 80009f6:	4b30      	ldr	r3, [pc, #192]	@ (8000ab8 <HAL_SD_MspInit+0xe8>)
 80009f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009fa:	4a2f      	ldr	r2, [pc, #188]	@ (8000ab8 <HAL_SD_MspInit+0xe8>)
 80009fc:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000a00:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a02:	4b2d      	ldr	r3, [pc, #180]	@ (8000ab8 <HAL_SD_MspInit+0xe8>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a06:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	4b29      	ldr	r3, [pc, #164]	@ (8000ab8 <HAL_SD_MspInit+0xe8>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a16:	4a28      	ldr	r2, [pc, #160]	@ (8000ab8 <HAL_SD_MspInit+0xe8>)
 8000a18:	f043 0304 	orr.w	r3, r3, #4
 8000a1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a1e:	4b26      	ldr	r3, [pc, #152]	@ (8000ab8 <HAL_SD_MspInit+0xe8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a22:	f003 0304 	and.w	r3, r3, #4
 8000a26:	60fb      	str	r3, [r7, #12]
 8000a28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60bb      	str	r3, [r7, #8]
 8000a2e:	4b22      	ldr	r3, [pc, #136]	@ (8000ab8 <HAL_SD_MspInit+0xe8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a32:	4a21      	ldr	r2, [pc, #132]	@ (8000ab8 <HAL_SD_MspInit+0xe8>)
 8000a34:	f043 0308 	orr.w	r3, r3, #8
 8000a38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <HAL_SD_MspInit+0xe8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3e:	f003 0308 	and.w	r3, r3, #8
 8000a42:	60bb      	str	r3, [r7, #8]
 8000a44:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8000a46:	f44f 53b8 	mov.w	r3, #5888	@ 0x1700
 8000a4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4816      	ldr	r0, [pc, #88]	@ (8000abc <HAL_SD_MspInit+0xec>)
 8000a64:	f000 fef8 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a68:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a76:	2303      	movs	r3, #3
 8000a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	480d      	ldr	r0, [pc, #52]	@ (8000abc <HAL_SD_MspInit+0xec>)
 8000a86:	f000 fee7 	bl	8001858 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a96:	2303      	movs	r3, #3
 8000a98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4806      	ldr	r0, [pc, #24]	@ (8000ac0 <HAL_SD_MspInit+0xf0>)
 8000aa6:	f000 fed7 	bl	8001858 <HAL_GPIO_Init>

  /* USER CODE END SDIO_MspInit 1 */

  }

}
 8000aaa:	bf00      	nop
 8000aac:	3728      	adds	r7, #40	@ 0x28
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40012c00 	.word	0x40012c00
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020800 	.word	0x40020800
 8000ac0:	40020c00 	.word	0x40020c00

08000ac4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	@ 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a34      	ldr	r2, [pc, #208]	@ (8000bb4 <HAL_UART_MspInit+0xf0>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d162      	bne.n	8000bac <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	613b      	str	r3, [r7, #16]
 8000aea:	4b33      	ldr	r3, [pc, #204]	@ (8000bb8 <HAL_UART_MspInit+0xf4>)
 8000aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aee:	4a32      	ldr	r2, [pc, #200]	@ (8000bb8 <HAL_UART_MspInit+0xf4>)
 8000af0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af6:	4b30      	ldr	r3, [pc, #192]	@ (8000bb8 <HAL_UART_MspInit+0xf4>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000afe:	613b      	str	r3, [r7, #16]
 8000b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
 8000b06:	4b2c      	ldr	r3, [pc, #176]	@ (8000bb8 <HAL_UART_MspInit+0xf4>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8000bb8 <HAL_UART_MspInit+0xf4>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b12:	4b29      	ldr	r3, [pc, #164]	@ (8000bb8 <HAL_UART_MspInit+0xf4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b1e:	230c      	movs	r3, #12
 8000b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b22:	2302      	movs	r3, #2
 8000b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b2a:	2303      	movs	r3, #3
 8000b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b32:	f107 0314 	add.w	r3, r7, #20
 8000b36:	4619      	mov	r1, r3
 8000b38:	4820      	ldr	r0, [pc, #128]	@ (8000bbc <HAL_UART_MspInit+0xf8>)
 8000b3a:	f000 fe8d 	bl	8001858 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000b3e:	4b20      	ldr	r3, [pc, #128]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b40:	4a20      	ldr	r2, [pc, #128]	@ (8000bc4 <HAL_UART_MspInit+0x100>)
 8000b42:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000b44:	4b1e      	ldr	r3, [pc, #120]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b46:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000b4a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b4c:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b4e:	2240      	movs	r2, #64	@ 0x40
 8000b50:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b52:	4b1b      	ldr	r3, [pc, #108]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b58:	4b19      	ldr	r3, [pc, #100]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b5e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b60:	4b17      	ldr	r3, [pc, #92]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b66:	4b16      	ldr	r3, [pc, #88]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000b6c:	4b14      	ldr	r3, [pc, #80]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000b72:	4b13      	ldr	r3, [pc, #76]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b74:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000b78:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b7a:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000b80:	480f      	ldr	r0, [pc, #60]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b82:	f000 faed 	bl	8001160 <HAL_DMA_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d001      	beq.n	8000b90 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000b8c:	f7ff fef2 	bl	8000974 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b94:	639a      	str	r2, [r3, #56]	@ 0x38
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <HAL_UART_MspInit+0xfc>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	2026      	movs	r0, #38	@ 0x26
 8000ba2:	f000 faa6 	bl	80010f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ba6:	2026      	movs	r0, #38	@ 0x26
 8000ba8:	f000 fabf 	bl	800112a <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	@ 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40004400 	.word	0x40004400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020000 	.word	0x40020000
 8000bc0:	20000154 	.word	0x20000154
 8000bc4:	400260a0 	.word	0x400260a0

08000bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bcc:	bf00      	nop
 8000bce:	e7fd      	b.n	8000bcc <NMI_Handler+0x4>

08000bd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bd4:	bf00      	nop
 8000bd6:	e7fd      	b.n	8000bd4 <HardFault_Handler+0x4>

08000bd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <MemManage_Handler+0x4>

08000be0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <BusFault_Handler+0x4>

08000be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <UsageFault_Handler+0x4>

08000bf0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bf4:	bf00      	nop
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfc:	4770      	bx	lr

08000bfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c02:	bf00      	nop
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr

08000c0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr

08000c1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c1a:	b580      	push	{r7, lr}
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c1e:	f000 f949 	bl	8000eb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000c2c:	4802      	ldr	r0, [pc, #8]	@ (8000c38 <DMA1_Stream6_IRQHandler+0x10>)
 8000c2e:	f000 fbd7 	bl	80013e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000154 	.word	0x20000154

08000c3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c40:	4802      	ldr	r0, [pc, #8]	@ (8000c4c <USART2_IRQHandler+0x10>)
 8000c42:	f002 fe87 	bl	8003954 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	2000010c 	.word	0x2000010c

08000c50 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60f8      	str	r0, [r7, #12]
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]
 8000c60:	e00a      	b.n	8000c78 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c62:	f3af 8000 	nop.w
 8000c66:	4601      	mov	r1, r0
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	1c5a      	adds	r2, r3, #1
 8000c6c:	60ba      	str	r2, [r7, #8]
 8000c6e:	b2ca      	uxtb	r2, r1
 8000c70:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	3301      	adds	r3, #1
 8000c76:	617b      	str	r3, [r7, #20]
 8000c78:	697a      	ldr	r2, [r7, #20]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	429a      	cmp	r2, r3
 8000c7e:	dbf0      	blt.n	8000c62 <_read+0x12>
  }

  return len;
 8000c80:	687b      	ldr	r3, [r7, #4]
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3718      	adds	r7, #24
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c8a:	b580      	push	{r7, lr}
 8000c8c:	b086      	sub	sp, #24
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	60f8      	str	r0, [r7, #12]
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c96:	2300      	movs	r3, #0
 8000c98:	617b      	str	r3, [r7, #20]
 8000c9a:	e009      	b.n	8000cb0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	3301      	adds	r3, #1
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	697a      	ldr	r2, [r7, #20]
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	dbf1      	blt.n	8000c9c <_write+0x12>
  }
  return len;
 8000cb8:	687b      	ldr	r3, [r7, #4]
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}

08000cc2 <_close>:

int _close(int file)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	b083      	sub	sp, #12
 8000cc6:	af00      	add	r7, sp, #0
 8000cc8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cea:	605a      	str	r2, [r3, #4]
  return 0;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	370c      	adds	r7, #12
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr

08000cfa <_isatty>:

int _isatty(int file)
{
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3714      	adds	r7, #20
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d34:	4a14      	ldr	r2, [pc, #80]	@ (8000d88 <_sbrk+0x5c>)
 8000d36:	4b15      	ldr	r3, [pc, #84]	@ (8000d8c <_sbrk+0x60>)
 8000d38:	1ad3      	subs	r3, r2, r3
 8000d3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d3c:	697b      	ldr	r3, [r7, #20]
 8000d3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d40:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <_sbrk+0x64>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d102      	bne.n	8000d4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d48:	4b11      	ldr	r3, [pc, #68]	@ (8000d90 <_sbrk+0x64>)
 8000d4a:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <_sbrk+0x68>)
 8000d4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d4e:	4b10      	ldr	r3, [pc, #64]	@ (8000d90 <_sbrk+0x64>)
 8000d50:	681a      	ldr	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4413      	add	r3, r2
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d207      	bcs.n	8000d6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d5c:	f005 fb3e 	bl	80063dc <__errno>
 8000d60:	4603      	mov	r3, r0
 8000d62:	220c      	movs	r2, #12
 8000d64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
 8000d6a:	e009      	b.n	8000d80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d6c:	4b08      	ldr	r3, [pc, #32]	@ (8000d90 <_sbrk+0x64>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d72:	4b07      	ldr	r3, [pc, #28]	@ (8000d90 <_sbrk+0x64>)
 8000d74:	681a      	ldr	r2, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4413      	add	r3, r2
 8000d7a:	4a05      	ldr	r2, [pc, #20]	@ (8000d90 <_sbrk+0x64>)
 8000d7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3718      	adds	r7, #24
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20020000 	.word	0x20020000
 8000d8c:	00001000 	.word	0x00001000
 8000d90:	200003e8 	.word	0x200003e8
 8000d94:	20000578 	.word	0x20000578

08000d98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d9c:	4b06      	ldr	r3, [pc, #24]	@ (8000db8 <SystemInit+0x20>)
 8000d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000da2:	4a05      	ldr	r2, [pc, #20]	@ (8000db8 <SystemInit+0x20>)
 8000da4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	e000ed00 	.word	0xe000ed00

08000dbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000dbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000df4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000dc0:	f7ff ffea 	bl	8000d98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	@ (8000df8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	@ (8000dfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	@ (8000e00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	@ (8000e04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	@ (8000e08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f005 fafd 	bl	80063e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dee:	f7ff fbb7 	bl	8000560 <main>
  bx  lr    
 8000df2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000df4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000e00:	08006fb0 	.word	0x08006fb0
  ldr r2, =_sbss
 8000e04:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000e08:	20000578 	.word	0x20000578

08000e0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e14:	4b0e      	ldr	r3, [pc, #56]	@ (8000e50 <HAL_Init+0x40>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a0d      	ldr	r2, [pc, #52]	@ (8000e50 <HAL_Init+0x40>)
 8000e1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e20:	4b0b      	ldr	r3, [pc, #44]	@ (8000e50 <HAL_Init+0x40>)
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a0a      	ldr	r2, [pc, #40]	@ (8000e50 <HAL_Init+0x40>)
 8000e26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e2c:	4b08      	ldr	r3, [pc, #32]	@ (8000e50 <HAL_Init+0x40>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a07      	ldr	r2, [pc, #28]	@ (8000e50 <HAL_Init+0x40>)
 8000e32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e38:	2003      	movs	r0, #3
 8000e3a:	f000 f94f 	bl	80010dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e3e:	200f      	movs	r0, #15
 8000e40:	f000 f808 	bl	8000e54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e44:	f7ff fd9c 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e48:	2300      	movs	r3, #0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	40023c00 	.word	0x40023c00

08000e54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e5c:	4b12      	ldr	r3, [pc, #72]	@ (8000ea8 <HAL_InitTick+0x54>)
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	4b12      	ldr	r3, [pc, #72]	@ (8000eac <HAL_InitTick+0x58>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	4619      	mov	r1, r3
 8000e66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e72:	4618      	mov	r0, r3
 8000e74:	f000 f967 	bl	8001146 <HAL_SYSTICK_Config>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	e00e      	b.n	8000ea0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2b0f      	cmp	r3, #15
 8000e86:	d80a      	bhi.n	8000e9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	6879      	ldr	r1, [r7, #4]
 8000e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e90:	f000 f92f 	bl	80010f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e94:	4a06      	ldr	r2, [pc, #24]	@ (8000eb0 <HAL_InitTick+0x5c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	e000      	b.n	8000ea0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	20000004 	.word	0x20000004
 8000eac:	2000000c 	.word	0x2000000c
 8000eb0:	20000008 	.word	0x20000008

08000eb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb8:	4b06      	ldr	r3, [pc, #24]	@ (8000ed4 <HAL_IncTick+0x20>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	461a      	mov	r2, r3
 8000ebe:	4b06      	ldr	r3, [pc, #24]	@ (8000ed8 <HAL_IncTick+0x24>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	4a04      	ldr	r2, [pc, #16]	@ (8000ed8 <HAL_IncTick+0x24>)
 8000ec6:	6013      	str	r3, [r2, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	2000000c 	.word	0x2000000c
 8000ed8:	200003ec 	.word	0x200003ec

08000edc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return uwTick;
 8000ee0:	4b03      	ldr	r3, [pc, #12]	@ (8000ef0 <HAL_GetTick+0x14>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	200003ec 	.word	0x200003ec

08000ef4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000efc:	f7ff ffee 	bl	8000edc <HAL_GetTick>
 8000f00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d005      	beq.n	8000f1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_Delay+0x44>)
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4413      	add	r3, r2
 8000f18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f1a:	bf00      	nop
 8000f1c:	f7ff ffde 	bl	8000edc <HAL_GetTick>
 8000f20:	4602      	mov	r2, r0
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	1ad3      	subs	r3, r2, r3
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d8f7      	bhi.n	8000f1c <HAL_Delay+0x28>
  {
  }
}
 8000f2c:	bf00      	nop
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000000c 	.word	0x2000000c

08000f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f52:	68ba      	ldr	r2, [r7, #8]
 8000f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6e:	4a04      	ldr	r2, [pc, #16]	@ (8000f80 <__NVIC_SetPriorityGrouping+0x44>)
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	60d3      	str	r3, [r2, #12]
}
 8000f74:	bf00      	nop
 8000f76:	3714      	adds	r7, #20
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <__NVIC_GetPriorityGrouping+0x18>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	0a1b      	lsrs	r3, r3, #8
 8000f8e:	f003 0307 	and.w	r3, r3, #7
}
 8000f92:	4618      	mov	r0, r3
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	db0b      	blt.n	8000fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	f003 021f 	and.w	r2, r3, #31
 8000fb8:	4907      	ldr	r1, [pc, #28]	@ (8000fd8 <__NVIC_EnableIRQ+0x38>)
 8000fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbe:	095b      	lsrs	r3, r3, #5
 8000fc0:	2001      	movs	r0, #1
 8000fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	e000e100 	.word	0xe000e100

08000fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b083      	sub	sp, #12
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	6039      	str	r1, [r7, #0]
 8000fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	db0a      	blt.n	8001006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	490c      	ldr	r1, [pc, #48]	@ (8001028 <__NVIC_SetPriority+0x4c>)
 8000ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffa:	0112      	lsls	r2, r2, #4
 8000ffc:	b2d2      	uxtb	r2, r2
 8000ffe:	440b      	add	r3, r1
 8001000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001004:	e00a      	b.n	800101c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	b2da      	uxtb	r2, r3
 800100a:	4908      	ldr	r1, [pc, #32]	@ (800102c <__NVIC_SetPriority+0x50>)
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	f003 030f 	and.w	r3, r3, #15
 8001012:	3b04      	subs	r3, #4
 8001014:	0112      	lsls	r2, r2, #4
 8001016:	b2d2      	uxtb	r2, r2
 8001018:	440b      	add	r3, r1
 800101a:	761a      	strb	r2, [r3, #24]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	e000e100 	.word	0xe000e100
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	@ 0x24
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	f1c3 0307 	rsb	r3, r3, #7
 800104a:	2b04      	cmp	r3, #4
 800104c:	bf28      	it	cs
 800104e:	2304      	movcs	r3, #4
 8001050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3304      	adds	r3, #4
 8001056:	2b06      	cmp	r3, #6
 8001058:	d902      	bls.n	8001060 <NVIC_EncodePriority+0x30>
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	3b03      	subs	r3, #3
 800105e:	e000      	b.n	8001062 <NVIC_EncodePriority+0x32>
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001064:	f04f 32ff 	mov.w	r2, #4294967295
 8001068:	69bb      	ldr	r3, [r7, #24]
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43da      	mvns	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	401a      	ands	r2, r3
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001078:	f04f 31ff 	mov.w	r1, #4294967295
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	fa01 f303 	lsl.w	r3, r1, r3
 8001082:	43d9      	mvns	r1, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001088:	4313      	orrs	r3, r2
         );
}
 800108a:	4618      	mov	r0, r3
 800108c:	3724      	adds	r7, #36	@ 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
	...

08001098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a8:	d301      	bcc.n	80010ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010aa:	2301      	movs	r3, #1
 80010ac:	e00f      	b.n	80010ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010ae:	4a0a      	ldr	r2, [pc, #40]	@ (80010d8 <SysTick_Config+0x40>)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b6:	210f      	movs	r1, #15
 80010b8:	f04f 30ff 	mov.w	r0, #4294967295
 80010bc:	f7ff ff8e 	bl	8000fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c0:	4b05      	ldr	r3, [pc, #20]	@ (80010d8 <SysTick_Config+0x40>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c6:	4b04      	ldr	r3, [pc, #16]	@ (80010d8 <SysTick_Config+0x40>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010cc:	2300      	movs	r3, #0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	e000e010 	.word	0xe000e010

080010dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e4:	6878      	ldr	r0, [r7, #4]
 80010e6:	f7ff ff29 	bl	8000f3c <__NVIC_SetPriorityGrouping>
}
 80010ea:	bf00      	nop
 80010ec:	3708      	adds	r7, #8
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	4603      	mov	r3, r0
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
 80010fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001100:	2300      	movs	r3, #0
 8001102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001104:	f7ff ff3e 	bl	8000f84 <__NVIC_GetPriorityGrouping>
 8001108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	68b9      	ldr	r1, [r7, #8]
 800110e:	6978      	ldr	r0, [r7, #20]
 8001110:	f7ff ff8e 	bl	8001030 <NVIC_EncodePriority>
 8001114:	4602      	mov	r2, r0
 8001116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111a:	4611      	mov	r1, r2
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff ff5d 	bl	8000fdc <__NVIC_SetPriority>
}
 8001122:	bf00      	nop
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	4603      	mov	r3, r0
 8001132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff ff31 	bl	8000fa0 <__NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}

08001146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b082      	sub	sp, #8
 800114a:	af00      	add	r7, sp, #0
 800114c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff ffa2 	bl	8001098 <SysTick_Config>
 8001154:	4603      	mov	r3, r0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
	...

08001160 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b086      	sub	sp, #24
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff feb6 	bl	8000edc <HAL_GetTick>
 8001170:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e099      	b.n	80012b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2202      	movs	r2, #2
 8001180:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2200      	movs	r2, #0
 8001188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f022 0201 	bic.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800119c:	e00f      	b.n	80011be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800119e:	f7ff fe9d 	bl	8000edc <HAL_GetTick>
 80011a2:	4602      	mov	r2, r0
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	2b05      	cmp	r3, #5
 80011aa:	d908      	bls.n	80011be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2220      	movs	r2, #32
 80011b0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2203      	movs	r2, #3
 80011b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80011ba:	2303      	movs	r3, #3
 80011bc:	e078      	b.n	80012b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d1e8      	bne.n	800119e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80011d4:	697a      	ldr	r2, [r7, #20]
 80011d6:	4b38      	ldr	r3, [pc, #224]	@ (80012b8 <HAL_DMA_Init+0x158>)
 80011d8:	4013      	ands	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	685a      	ldr	r2, [r3, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80011ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	691b      	ldr	r3, [r3, #16]
 80011f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80011f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	699b      	ldr	r3, [r3, #24]
 80011fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001202:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a1b      	ldr	r3, [r3, #32]
 8001208:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800120a:	697a      	ldr	r2, [r7, #20]
 800120c:	4313      	orrs	r3, r2
 800120e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001214:	2b04      	cmp	r3, #4
 8001216:	d107      	bne.n	8001228 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001220:	4313      	orrs	r3, r2
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4313      	orrs	r3, r2
 8001226:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	695b      	ldr	r3, [r3, #20]
 8001236:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	f023 0307 	bic.w	r3, r3, #7
 800123e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	4313      	orrs	r3, r2
 8001248:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124e:	2b04      	cmp	r3, #4
 8001250:	d117      	bne.n	8001282 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	4313      	orrs	r3, r2
 800125a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00e      	beq.n	8001282 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f000 fa7b 	bl	8001760 <DMA_CheckFifoParam>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d008      	beq.n	8001282 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2240      	movs	r2, #64	@ 0x40
 8001274:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2201      	movs	r2, #1
 800127a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800127e:	2301      	movs	r3, #1
 8001280:	e016      	b.n	80012b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 fa32 	bl	80016f4 <DMA_CalcBaseAndBitshift>
 8001290:	4603      	mov	r3, r0
 8001292:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001298:	223f      	movs	r2, #63	@ 0x3f
 800129a:	409a      	lsls	r2, r3
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2201      	movs	r2, #1
 80012aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80012ae:	2300      	movs	r3, #0
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3718      	adds	r7, #24
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	f010803f 	.word	0xf010803f

080012bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012ca:	f7ff fe07 	bl	8000edc <HAL_GetTick>
 80012ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	2b02      	cmp	r3, #2
 80012da:	d008      	beq.n	80012ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	2280      	movs	r2, #128	@ 0x80
 80012e0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	e052      	b.n	8001394 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0216 	bic.w	r2, r2, #22
 80012fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	695a      	ldr	r2, [r3, #20]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800130c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d103      	bne.n	800131e <HAL_DMA_Abort+0x62>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800131a:	2b00      	cmp	r3, #0
 800131c:	d007      	beq.n	800132e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f022 0208 	bic.w	r2, r2, #8
 800132c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	681a      	ldr	r2, [r3, #0]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f022 0201 	bic.w	r2, r2, #1
 800133c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800133e:	e013      	b.n	8001368 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001340:	f7ff fdcc 	bl	8000edc <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b05      	cmp	r3, #5
 800134c:	d90c      	bls.n	8001368 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2220      	movs	r2, #32
 8001352:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2203      	movs	r2, #3
 8001358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e015      	b.n	8001394 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1e4      	bne.n	8001340 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800137a:	223f      	movs	r2, #63	@ 0x3f
 800137c:	409a      	lsls	r2, r3
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2201      	movs	r2, #1
 8001386:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001392:	2300      	movs	r3, #0
}
 8001394:	4618      	mov	r0, r3
 8001396:	3710      	adds	r7, #16
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	2b02      	cmp	r3, #2
 80013ae:	d004      	beq.n	80013ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2280      	movs	r2, #128	@ 0x80
 80013b4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e00c      	b.n	80013d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2205      	movs	r2, #5
 80013be:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 0201 	bic.w	r2, r2, #1
 80013d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013d2:	2300      	movs	r3, #0
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	370c      	adds	r7, #12
 80013d8:	46bd      	mov	sp, r7
 80013da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013de:	4770      	bx	lr

080013e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80013ec:	4b8e      	ldr	r3, [pc, #568]	@ (8001628 <HAL_DMA_IRQHandler+0x248>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a8e      	ldr	r2, [pc, #568]	@ (800162c <HAL_DMA_IRQHandler+0x24c>)
 80013f2:	fba2 2303 	umull	r2, r3, r2, r3
 80013f6:	0a9b      	lsrs	r3, r3, #10
 80013f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001400:	693b      	ldr	r3, [r7, #16]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800140a:	2208      	movs	r2, #8
 800140c:	409a      	lsls	r2, r3
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	4013      	ands	r3, r2
 8001412:	2b00      	cmp	r3, #0
 8001414:	d01a      	beq.n	800144c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f003 0304 	and.w	r3, r3, #4
 8001420:	2b00      	cmp	r3, #0
 8001422:	d013      	beq.n	800144c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0204 	bic.w	r2, r2, #4
 8001432:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001438:	2208      	movs	r2, #8
 800143a:	409a      	lsls	r2, r3
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001444:	f043 0201 	orr.w	r2, r3, #1
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001450:	2201      	movs	r2, #1
 8001452:	409a      	lsls	r2, r3
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	4013      	ands	r3, r2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d012      	beq.n	8001482 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800146e:	2201      	movs	r2, #1
 8001470:	409a      	lsls	r2, r3
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800147a:	f043 0202 	orr.w	r2, r3, #2
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001486:	2204      	movs	r2, #4
 8001488:	409a      	lsls	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	4013      	ands	r3, r2
 800148e:	2b00      	cmp	r3, #0
 8001490:	d012      	beq.n	80014b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d00b      	beq.n	80014b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014a4:	2204      	movs	r2, #4
 80014a6:	409a      	lsls	r2, r3
 80014a8:	693b      	ldr	r3, [r7, #16]
 80014aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80014b0:	f043 0204 	orr.w	r2, r3, #4
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014bc:	2210      	movs	r2, #16
 80014be:	409a      	lsls	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	4013      	ands	r3, r2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d043      	beq.n	8001550 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d03c      	beq.n	8001550 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014da:	2210      	movs	r2, #16
 80014dc:	409a      	lsls	r2, r3
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d018      	beq.n	8001522 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d108      	bne.n	8001510 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001502:	2b00      	cmp	r3, #0
 8001504:	d024      	beq.n	8001550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	4798      	blx	r3
 800150e:	e01f      	b.n	8001550 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001514:	2b00      	cmp	r3, #0
 8001516:	d01b      	beq.n	8001550 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	4798      	blx	r3
 8001520:	e016      	b.n	8001550 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800152c:	2b00      	cmp	r3, #0
 800152e:	d107      	bne.n	8001540 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f022 0208 	bic.w	r2, r2, #8
 800153e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001544:	2b00      	cmp	r3, #0
 8001546:	d003      	beq.n	8001550 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	6878      	ldr	r0, [r7, #4]
 800154e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001554:	2220      	movs	r2, #32
 8001556:	409a      	lsls	r2, r3
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	4013      	ands	r3, r2
 800155c:	2b00      	cmp	r3, #0
 800155e:	f000 808f 	beq.w	8001680 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0310 	and.w	r3, r3, #16
 800156c:	2b00      	cmp	r3, #0
 800156e:	f000 8087 	beq.w	8001680 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001576:	2220      	movs	r2, #32
 8001578:	409a      	lsls	r2, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b05      	cmp	r3, #5
 8001588:	d136      	bne.n	80015f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0216 	bic.w	r2, r2, #22
 8001598:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	695a      	ldr	r2, [r3, #20]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80015a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d103      	bne.n	80015ba <HAL_DMA_IRQHandler+0x1da>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d007      	beq.n	80015ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0208 	bic.w	r2, r2, #8
 80015c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80015ce:	223f      	movs	r2, #63	@ 0x3f
 80015d0:	409a      	lsls	r2, r3
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2201      	movs	r2, #1
 80015da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d07e      	beq.n	80016ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	4798      	blx	r3
        }
        return;
 80015f6:	e079      	b.n	80016ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d01d      	beq.n	8001642 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001610:	2b00      	cmp	r3, #0
 8001612:	d10d      	bne.n	8001630 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001618:	2b00      	cmp	r3, #0
 800161a:	d031      	beq.n	8001680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001620:	6878      	ldr	r0, [r7, #4]
 8001622:	4798      	blx	r3
 8001624:	e02c      	b.n	8001680 <HAL_DMA_IRQHandler+0x2a0>
 8001626:	bf00      	nop
 8001628:	20000004 	.word	0x20000004
 800162c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001634:	2b00      	cmp	r3, #0
 8001636:	d023      	beq.n	8001680 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	4798      	blx	r3
 8001640:	e01e      	b.n	8001680 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800164c:	2b00      	cmp	r3, #0
 800164e:	d10f      	bne.n	8001670 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f022 0210 	bic.w	r2, r2, #16
 800165e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2201      	movs	r2, #1
 8001664:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001674:	2b00      	cmp	r3, #0
 8001676:	d003      	beq.n	8001680 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001684:	2b00      	cmp	r3, #0
 8001686:	d032      	beq.n	80016ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b00      	cmp	r3, #0
 8001692:	d022      	beq.n	80016da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2205      	movs	r2, #5
 8001698:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0201 	bic.w	r2, r2, #1
 80016aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	3301      	adds	r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	697a      	ldr	r2, [r7, #20]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	d307      	bcc.n	80016c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f2      	bne.n	80016ac <HAL_DMA_IRQHandler+0x2cc>
 80016c6:	e000      	b.n	80016ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80016c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2201      	movs	r2, #1
 80016ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d005      	beq.n	80016ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	4798      	blx	r3
 80016ea:	e000      	b.n	80016ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80016ec:	bf00      	nop
    }
  }
}
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b085      	sub	sp, #20
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	b2db      	uxtb	r3, r3
 8001702:	3b10      	subs	r3, #16
 8001704:	4a14      	ldr	r2, [pc, #80]	@ (8001758 <DMA_CalcBaseAndBitshift+0x64>)
 8001706:	fba2 2303 	umull	r2, r3, r2, r3
 800170a:	091b      	lsrs	r3, r3, #4
 800170c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800170e:	4a13      	ldr	r2, [pc, #76]	@ (800175c <DMA_CalcBaseAndBitshift+0x68>)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4413      	add	r3, r2
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	461a      	mov	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2b03      	cmp	r3, #3
 8001720:	d909      	bls.n	8001736 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800172a:	f023 0303 	bic.w	r3, r3, #3
 800172e:	1d1a      	adds	r2, r3, #4
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	659a      	str	r2, [r3, #88]	@ 0x58
 8001734:	e007      	b.n	8001746 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800173e:	f023 0303 	bic.w	r3, r3, #3
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800174a:	4618      	mov	r0, r3
 800174c:	3714      	adds	r7, #20
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	aaaaaaab 	.word	0xaaaaaaab
 800175c:	08006f50 	.word	0x08006f50

08001760 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001760:	b480      	push	{r7}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001768:	2300      	movs	r3, #0
 800176a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001770:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d11f      	bne.n	80017ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	2b03      	cmp	r3, #3
 800177e:	d856      	bhi.n	800182e <DMA_CheckFifoParam+0xce>
 8001780:	a201      	add	r2, pc, #4	@ (adr r2, 8001788 <DMA_CheckFifoParam+0x28>)
 8001782:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001786:	bf00      	nop
 8001788:	08001799 	.word	0x08001799
 800178c:	080017ab 	.word	0x080017ab
 8001790:	08001799 	.word	0x08001799
 8001794:	0800182f 	.word	0x0800182f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800179c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d046      	beq.n	8001832 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017a8:	e043      	b.n	8001832 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ae:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80017b2:	d140      	bne.n	8001836 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017b8:	e03d      	b.n	8001836 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	699b      	ldr	r3, [r3, #24]
 80017be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80017c2:	d121      	bne.n	8001808 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2b03      	cmp	r3, #3
 80017c8:	d837      	bhi.n	800183a <DMA_CheckFifoParam+0xda>
 80017ca:	a201      	add	r2, pc, #4	@ (adr r2, 80017d0 <DMA_CheckFifoParam+0x70>)
 80017cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d0:	080017e1 	.word	0x080017e1
 80017d4:	080017e7 	.word	0x080017e7
 80017d8:	080017e1 	.word	0x080017e1
 80017dc:	080017f9 	.word	0x080017f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	73fb      	strb	r3, [r7, #15]
      break;
 80017e4:	e030      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ea:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d025      	beq.n	800183e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80017f2:	2301      	movs	r3, #1
 80017f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80017f6:	e022      	b.n	800183e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001800:	d11f      	bne.n	8001842 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001806:	e01c      	b.n	8001842 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	2b02      	cmp	r3, #2
 800180c:	d903      	bls.n	8001816 <DMA_CheckFifoParam+0xb6>
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	2b03      	cmp	r3, #3
 8001812:	d003      	beq.n	800181c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001814:	e018      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	73fb      	strb	r3, [r7, #15]
      break;
 800181a:	e015      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001820:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d00e      	beq.n	8001846 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001828:	2301      	movs	r3, #1
 800182a:	73fb      	strb	r3, [r7, #15]
      break;
 800182c:	e00b      	b.n	8001846 <DMA_CheckFifoParam+0xe6>
      break;
 800182e:	bf00      	nop
 8001830:	e00a      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;
 8001832:	bf00      	nop
 8001834:	e008      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;
 8001836:	bf00      	nop
 8001838:	e006      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;
 800183a:	bf00      	nop
 800183c:	e004      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;
 800183e:	bf00      	nop
 8001840:	e002      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;   
 8001842:	bf00      	nop
 8001844:	e000      	b.n	8001848 <DMA_CheckFifoParam+0xe8>
      break;
 8001846:	bf00      	nop
    }
  } 
  
  return status; 
 8001848:	7bfb      	ldrb	r3, [r7, #15]
}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	@ 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
 8001860:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001866:	2300      	movs	r3, #0
 8001868:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800186a:	2300      	movs	r3, #0
 800186c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800186e:	2300      	movs	r3, #0
 8001870:	61fb      	str	r3, [r7, #28]
 8001872:	e16b      	b.n	8001b4c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001874:	2201      	movs	r2, #1
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	697a      	ldr	r2, [r7, #20]
 8001884:	4013      	ands	r3, r2
 8001886:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	429a      	cmp	r2, r3
 800188e:	f040 815a 	bne.w	8001b46 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f003 0303 	and.w	r3, r3, #3
 800189a:	2b01      	cmp	r3, #1
 800189c:	d005      	beq.n	80018aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d130      	bne.n	800190c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	005b      	lsls	r3, r3, #1
 80018b4:	2203      	movs	r2, #3
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	43db      	mvns	r3, r3
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	4013      	ands	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	68da      	ldr	r2, [r3, #12]
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	69ba      	ldr	r2, [r7, #24]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	43db      	mvns	r3, r3
 80018ea:	69ba      	ldr	r2, [r7, #24]
 80018ec:	4013      	ands	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	091b      	lsrs	r3, r3, #4
 80018f6:	f003 0201 	and.w	r2, r3, #1
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4313      	orrs	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	69ba      	ldr	r2, [r7, #24]
 800190a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	f003 0303 	and.w	r3, r3, #3
 8001914:	2b03      	cmp	r3, #3
 8001916:	d017      	beq.n	8001948 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	2203      	movs	r2, #3
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	005b      	lsls	r3, r3, #1
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	4313      	orrs	r3, r2
 8001940:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	f003 0303 	and.w	r3, r3, #3
 8001950:	2b02      	cmp	r3, #2
 8001952:	d123      	bne.n	800199c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	08da      	lsrs	r2, r3, #3
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	3208      	adds	r2, #8
 800195c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001960:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	220f      	movs	r2, #15
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	43db      	mvns	r3, r3
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4013      	ands	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001978:	683b      	ldr	r3, [r7, #0]
 800197a:	691a      	ldr	r2, [r3, #16]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 0307 	and.w	r3, r3, #7
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	4313      	orrs	r3, r2
 800198c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	08da      	lsrs	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	3208      	adds	r2, #8
 8001996:	69b9      	ldr	r1, [r7, #24]
 8001998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f003 0203 	and.w	r2, r3, #3
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	005b      	lsls	r3, r3, #1
 80019c0:	fa02 f303 	lsl.w	r3, r2, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019d8:	2b00      	cmp	r3, #0
 80019da:	f000 80b4 	beq.w	8001b46 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	4b60      	ldr	r3, [pc, #384]	@ (8001b64 <HAL_GPIO_Init+0x30c>)
 80019e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001b64 <HAL_GPIO_Init+0x30c>)
 80019e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80019ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001b64 <HAL_GPIO_Init+0x30c>)
 80019f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019f6:	60fb      	str	r3, [r7, #12]
 80019f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001b68 <HAL_GPIO_Init+0x310>)
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	089b      	lsrs	r3, r3, #2
 8001a00:	3302      	adds	r3, #2
 8001a02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	220f      	movs	r2, #15
 8001a12:	fa02 f303 	lsl.w	r3, r2, r3
 8001a16:	43db      	mvns	r3, r3
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a52      	ldr	r2, [pc, #328]	@ (8001b6c <HAL_GPIO_Init+0x314>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d02b      	beq.n	8001a7e <HAL_GPIO_Init+0x226>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a51      	ldr	r2, [pc, #324]	@ (8001b70 <HAL_GPIO_Init+0x318>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d025      	beq.n	8001a7a <HAL_GPIO_Init+0x222>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a50      	ldr	r2, [pc, #320]	@ (8001b74 <HAL_GPIO_Init+0x31c>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d01f      	beq.n	8001a76 <HAL_GPIO_Init+0x21e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a4f      	ldr	r2, [pc, #316]	@ (8001b78 <HAL_GPIO_Init+0x320>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d019      	beq.n	8001a72 <HAL_GPIO_Init+0x21a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a4e      	ldr	r2, [pc, #312]	@ (8001b7c <HAL_GPIO_Init+0x324>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d013      	beq.n	8001a6e <HAL_GPIO_Init+0x216>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a4d      	ldr	r2, [pc, #308]	@ (8001b80 <HAL_GPIO_Init+0x328>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_GPIO_Init+0x212>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a4c      	ldr	r2, [pc, #304]	@ (8001b84 <HAL_GPIO_Init+0x32c>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d007      	beq.n	8001a66 <HAL_GPIO_Init+0x20e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4b      	ldr	r2, [pc, #300]	@ (8001b88 <HAL_GPIO_Init+0x330>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d101      	bne.n	8001a62 <HAL_GPIO_Init+0x20a>
 8001a5e:	2307      	movs	r3, #7
 8001a60:	e00e      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a62:	2308      	movs	r3, #8
 8001a64:	e00c      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a66:	2306      	movs	r3, #6
 8001a68:	e00a      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	e008      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e006      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a72:	2303      	movs	r3, #3
 8001a74:	e004      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e002      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_GPIO_Init+0x228>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	69fa      	ldr	r2, [r7, #28]
 8001a82:	f002 0203 	and.w	r2, r2, #3
 8001a86:	0092      	lsls	r2, r2, #2
 8001a88:	4093      	lsls	r3, r2
 8001a8a:	69ba      	ldr	r2, [r7, #24]
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a90:	4935      	ldr	r1, [pc, #212]	@ (8001b68 <HAL_GPIO_Init+0x310>)
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	3302      	adds	r3, #2
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a9e:	4b3b      	ldr	r3, [pc, #236]	@ (8001b8c <HAL_GPIO_Init+0x334>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	43db      	mvns	r3, r3
 8001aa8:	69ba      	ldr	r2, [r7, #24]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	693b      	ldr	r3, [r7, #16]
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ac2:	4a32      	ldr	r2, [pc, #200]	@ (8001b8c <HAL_GPIO_Init+0x334>)
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ac8:	4b30      	ldr	r3, [pc, #192]	@ (8001b8c <HAL_GPIO_Init+0x334>)
 8001aca:	68db      	ldr	r3, [r3, #12]
 8001acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	43db      	mvns	r3, r3
 8001ad2:	69ba      	ldr	r2, [r7, #24]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d003      	beq.n	8001aec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001aec:	4a27      	ldr	r2, [pc, #156]	@ (8001b8c <HAL_GPIO_Init+0x334>)
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001af2:	4b26      	ldr	r3, [pc, #152]	@ (8001b8c <HAL_GPIO_Init+0x334>)
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	43db      	mvns	r3, r3
 8001afc:	69ba      	ldr	r2, [r7, #24]
 8001afe:	4013      	ands	r3, r2
 8001b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d003      	beq.n	8001b16 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4313      	orrs	r3, r2
 8001b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b16:	4a1d      	ldr	r2, [pc, #116]	@ (8001b8c <HAL_GPIO_Init+0x334>)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	@ (8001b8c <HAL_GPIO_Init+0x334>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	43db      	mvns	r3, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4013      	ands	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d003      	beq.n	8001b40 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001b38:	69ba      	ldr	r2, [r7, #24]
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b40:	4a12      	ldr	r2, [pc, #72]	@ (8001b8c <HAL_GPIO_Init+0x334>)
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b0f      	cmp	r3, #15
 8001b50:	f67f ae90 	bls.w	8001874 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b54:	bf00      	nop
 8001b56:	bf00      	nop
 8001b58:	3724      	adds	r7, #36	@ 0x24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40013800 	.word	0x40013800
 8001b6c:	40020000 	.word	0x40020000
 8001b70:	40020400 	.word	0x40020400
 8001b74:	40020800 	.word	0x40020800
 8001b78:	40020c00 	.word	0x40020c00
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	40021400 	.word	0x40021400
 8001b84:	40021800 	.word	0x40021800
 8001b88:	40021c00 	.word	0x40021c00
 8001b8c:	40013c00 	.word	0x40013c00

08001b90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	691a      	ldr	r2, [r3, #16]
 8001ba0:	887b      	ldrh	r3, [r7, #2]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e001      	b.n	8001bb2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	807b      	strh	r3, [r7, #2]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bd0:	787b      	ldrb	r3, [r7, #1]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bdc:	e003      	b.n	8001be6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bde:	887b      	ldrh	r3, [r7, #2]
 8001be0:	041a      	lsls	r2, r3, #16
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	619a      	str	r2, [r3, #24]
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr
	...

08001bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b086      	sub	sp, #24
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e267      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0301 	and.w	r3, r3, #1
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d075      	beq.n	8001cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c12:	4b88      	ldr	r3, [pc, #544]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d00c      	beq.n	8001c38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c1e:	4b85      	ldr	r3, [pc, #532]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d112      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c2a:	4b82      	ldr	r3, [pc, #520]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001c36:	d10b      	bne.n	8001c50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c38:	4b7e      	ldr	r3, [pc, #504]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d05b      	beq.n	8001cfc <HAL_RCC_OscConfig+0x108>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d157      	bne.n	8001cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e242      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c58:	d106      	bne.n	8001c68 <HAL_RCC_OscConfig+0x74>
 8001c5a:	4b76      	ldr	r3, [pc, #472]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a75      	ldr	r2, [pc, #468]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	e01d      	b.n	8001ca4 <HAL_RCC_OscConfig+0xb0>
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c70:	d10c      	bne.n	8001c8c <HAL_RCC_OscConfig+0x98>
 8001c72:	4b70      	ldr	r3, [pc, #448]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a6f      	ldr	r2, [pc, #444]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c7c:	6013      	str	r3, [r2, #0]
 8001c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a6c      	ldr	r2, [pc, #432]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c88:	6013      	str	r3, [r2, #0]
 8001c8a:	e00b      	b.n	8001ca4 <HAL_RCC_OscConfig+0xb0>
 8001c8c:	4b69      	ldr	r3, [pc, #420]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a68      	ldr	r2, [pc, #416]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c96:	6013      	str	r3, [r2, #0]
 8001c98:	4b66      	ldr	r3, [pc, #408]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a65      	ldr	r2, [pc, #404]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001c9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d013      	beq.n	8001cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cac:	f7ff f916 	bl	8000edc <HAL_GetTick>
 8001cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb4:	f7ff f912 	bl	8000edc <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b64      	cmp	r3, #100	@ 0x64
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e207      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d0f0      	beq.n	8001cb4 <HAL_RCC_OscConfig+0xc0>
 8001cd2:	e014      	b.n	8001cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff f902 	bl	8000edc <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cdc:	f7ff f8fe 	bl	8000edc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b64      	cmp	r3, #100	@ 0x64
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1f3      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001cee:	4b51      	ldr	r3, [pc, #324]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d1f0      	bne.n	8001cdc <HAL_RCC_OscConfig+0xe8>
 8001cfa:	e000      	b.n	8001cfe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d063      	beq.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	f003 030c 	and.w	r3, r3, #12
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d00b      	beq.n	8001d2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d16:	4b47      	ldr	r3, [pc, #284]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001d1e:	2b08      	cmp	r3, #8
 8001d20:	d11c      	bne.n	8001d5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d22:	4b44      	ldr	r3, [pc, #272]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d116      	bne.n	8001d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d2e:	4b41      	ldr	r3, [pc, #260]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0302 	and.w	r3, r3, #2
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d005      	beq.n	8001d46 <HAL_RCC_OscConfig+0x152>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	2b01      	cmp	r3, #1
 8001d40:	d001      	beq.n	8001d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e1c7      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d46:	4b3b      	ldr	r3, [pc, #236]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	4937      	ldr	r1, [pc, #220]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d5a:	e03a      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d020      	beq.n	8001da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d64:	4b34      	ldr	r3, [pc, #208]	@ (8001e38 <HAL_RCC_OscConfig+0x244>)
 8001d66:	2201      	movs	r2, #1
 8001d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6a:	f7ff f8b7 	bl	8000edc <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d70:	e008      	b.n	8001d84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d72:	f7ff f8b3 	bl	8000edc <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e1a8      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d84:	4b2b      	ldr	r3, [pc, #172]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0f0      	beq.n	8001d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d90:	4b28      	ldr	r3, [pc, #160]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	691b      	ldr	r3, [r3, #16]
 8001d9c:	00db      	lsls	r3, r3, #3
 8001d9e:	4925      	ldr	r1, [pc, #148]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
 8001da4:	e015      	b.n	8001dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001da6:	4b24      	ldr	r3, [pc, #144]	@ (8001e38 <HAL_RCC_OscConfig+0x244>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dac:	f7ff f896 	bl	8000edc <HAL_GetTick>
 8001db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001db2:	e008      	b.n	8001dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001db4:	f7ff f892 	bl	8000edc <HAL_GetTick>
 8001db8:	4602      	mov	r2, r0
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	1ad3      	subs	r3, r2, r3
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	d901      	bls.n	8001dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e187      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d1f0      	bne.n	8001db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0308 	and.w	r3, r3, #8
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d036      	beq.n	8001e4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	695b      	ldr	r3, [r3, #20]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d016      	beq.n	8001e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001de6:	4b15      	ldr	r3, [pc, #84]	@ (8001e3c <HAL_RCC_OscConfig+0x248>)
 8001de8:	2201      	movs	r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff f876 	bl	8000edc <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff f872 	bl	8000edc <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e167      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e06:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <HAL_RCC_OscConfig+0x240>)
 8001e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d0f0      	beq.n	8001df4 <HAL_RCC_OscConfig+0x200>
 8001e12:	e01b      	b.n	8001e4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e14:	4b09      	ldr	r3, [pc, #36]	@ (8001e3c <HAL_RCC_OscConfig+0x248>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1a:	f7ff f85f 	bl	8000edc <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e20:	e00e      	b.n	8001e40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e22:	f7ff f85b 	bl	8000edc <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d907      	bls.n	8001e40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e150      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
 8001e34:	40023800 	.word	0x40023800
 8001e38:	42470000 	.word	0x42470000
 8001e3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e40:	4b88      	ldr	r3, [pc, #544]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001e42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e44:	f003 0302 	and.w	r3, r3, #2
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1ea      	bne.n	8001e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0304 	and.w	r3, r3, #4
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 8097 	beq.w	8001f88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001e5e:	4b81      	ldr	r3, [pc, #516]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001e60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10f      	bne.n	8001e8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	60bb      	str	r3, [r7, #8]
 8001e6e:	4b7d      	ldr	r3, [pc, #500]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e72:	4a7c      	ldr	r2, [pc, #496]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e86:	2301      	movs	r3, #1
 8001e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e8a:	4b77      	ldr	r3, [pc, #476]	@ (8002068 <HAL_RCC_OscConfig+0x474>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d118      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e96:	4b74      	ldr	r3, [pc, #464]	@ (8002068 <HAL_RCC_OscConfig+0x474>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a73      	ldr	r2, [pc, #460]	@ (8002068 <HAL_RCC_OscConfig+0x474>)
 8001e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ea2:	f7ff f81b 	bl	8000edc <HAL_GetTick>
 8001ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eaa:	f7ff f817 	bl	8000edc <HAL_GetTick>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e10c      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ebc:	4b6a      	ldr	r3, [pc, #424]	@ (8002068 <HAL_RCC_OscConfig+0x474>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0f0      	beq.n	8001eaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d106      	bne.n	8001ede <HAL_RCC_OscConfig+0x2ea>
 8001ed0:	4b64      	ldr	r3, [pc, #400]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ed2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ed4:	4a63      	ldr	r2, [pc, #396]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001edc:	e01c      	b.n	8001f18 <HAL_RCC_OscConfig+0x324>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	2b05      	cmp	r3, #5
 8001ee4:	d10c      	bne.n	8001f00 <HAL_RCC_OscConfig+0x30c>
 8001ee6:	4b5f      	ldr	r3, [pc, #380]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ee8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eea:	4a5e      	ldr	r2, [pc, #376]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001eec:	f043 0304 	orr.w	r3, r3, #4
 8001ef0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ef2:	4b5c      	ldr	r3, [pc, #368]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef6:	4a5b      	ldr	r2, [pc, #364]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ef8:	f043 0301 	orr.w	r3, r3, #1
 8001efc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efe:	e00b      	b.n	8001f18 <HAL_RCC_OscConfig+0x324>
 8001f00:	4b58      	ldr	r3, [pc, #352]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f04:	4a57      	ldr	r2, [pc, #348]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f06:	f023 0301 	bic.w	r3, r3, #1
 8001f0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f0c:	4b55      	ldr	r3, [pc, #340]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f10:	4a54      	ldr	r2, [pc, #336]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f12:	f023 0304 	bic.w	r3, r3, #4
 8001f16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d015      	beq.n	8001f4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f20:	f7fe ffdc 	bl	8000edc <HAL_GetTick>
 8001f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f26:	e00a      	b.n	8001f3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f28:	f7fe ffd8 	bl	8000edc <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e0cb      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f3e:	4b49      	ldr	r3, [pc, #292]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d0ee      	beq.n	8001f28 <HAL_RCC_OscConfig+0x334>
 8001f4a:	e014      	b.n	8001f76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4c:	f7fe ffc6 	bl	8000edc <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7fe ffc2 	bl	8000edc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e0b5      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f6a:	4b3e      	ldr	r3, [pc, #248]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1ee      	bne.n	8001f54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f7c:	4b39      	ldr	r3, [pc, #228]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	4a38      	ldr	r2, [pc, #224]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	699b      	ldr	r3, [r3, #24]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 80a1 	beq.w	80020d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001f92:	4b34      	ldr	r3, [pc, #208]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f003 030c 	and.w	r3, r3, #12
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d05c      	beq.n	8002058 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d141      	bne.n	800202a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa6:	4b31      	ldr	r3, [pc, #196]	@ (800206c <HAL_RCC_OscConfig+0x478>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fac:	f7fe ff96 	bl	8000edc <HAL_GetTick>
 8001fb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb2:	e008      	b.n	8001fc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fb4:	f7fe ff92 	bl	8000edc <HAL_GetTick>
 8001fb8:	4602      	mov	r2, r0
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d901      	bls.n	8001fc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	e087      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc6:	4b27      	ldr	r3, [pc, #156]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d1f0      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69da      	ldr	r2, [r3, #28]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	431a      	orrs	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fe0:	019b      	lsls	r3, r3, #6
 8001fe2:	431a      	orrs	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fe8:	085b      	lsrs	r3, r3, #1
 8001fea:	3b01      	subs	r3, #1
 8001fec:	041b      	lsls	r3, r3, #16
 8001fee:	431a      	orrs	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	061b      	lsls	r3, r3, #24
 8001ff6:	491b      	ldr	r1, [pc, #108]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ffc:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <HAL_RCC_OscConfig+0x478>)
 8001ffe:	2201      	movs	r2, #1
 8002000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002002:	f7fe ff6b 	bl	8000edc <HAL_GetTick>
 8002006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002008:	e008      	b.n	800201c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800200a:	f7fe ff67 	bl	8000edc <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	693b      	ldr	r3, [r7, #16]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b02      	cmp	r3, #2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e05c      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800201c:	4b11      	ldr	r3, [pc, #68]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0f0      	beq.n	800200a <HAL_RCC_OscConfig+0x416>
 8002028:	e054      	b.n	80020d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800202a:	4b10      	ldr	r3, [pc, #64]	@ (800206c <HAL_RCC_OscConfig+0x478>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002030:	f7fe ff54 	bl	8000edc <HAL_GetTick>
 8002034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002036:	e008      	b.n	800204a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002038:	f7fe ff50 	bl	8000edc <HAL_GetTick>
 800203c:	4602      	mov	r2, r0
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	1ad3      	subs	r3, r2, r3
 8002042:	2b02      	cmp	r3, #2
 8002044:	d901      	bls.n	800204a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e045      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800204a:	4b06      	ldr	r3, [pc, #24]	@ (8002064 <HAL_RCC_OscConfig+0x470>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002052:	2b00      	cmp	r3, #0
 8002054:	d1f0      	bne.n	8002038 <HAL_RCC_OscConfig+0x444>
 8002056:	e03d      	b.n	80020d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	2b01      	cmp	r3, #1
 800205e:	d107      	bne.n	8002070 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	e038      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
 8002064:	40023800 	.word	0x40023800
 8002068:	40007000 	.word	0x40007000
 800206c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <HAL_RCC_OscConfig+0x4ec>)
 8002072:	685b      	ldr	r3, [r3, #4]
 8002074:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d028      	beq.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002088:	429a      	cmp	r2, r3
 800208a:	d121      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	429a      	cmp	r2, r3
 8002098:	d11a      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800209a:	68fa      	ldr	r2, [r7, #12]
 800209c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80020a0:	4013      	ands	r3, r2
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80020a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d111      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020b6:	085b      	lsrs	r3, r3, #1
 80020b8:	3b01      	subs	r3, #1
 80020ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80020bc:	429a      	cmp	r2, r3
 80020be:	d107      	bne.n	80020d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d001      	beq.n	80020d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80020d4:	2300      	movs	r3, #0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3718      	adds	r7, #24
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800

080020e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d101      	bne.n	80020f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020f4:	2301      	movs	r3, #1
 80020f6:	e0cc      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80020f8:	4b68      	ldr	r3, [pc, #416]	@ (800229c <HAL_RCC_ClockConfig+0x1b8>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d90c      	bls.n	8002120 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b65      	ldr	r3, [pc, #404]	@ (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	b2d2      	uxtb	r2, r2
 800210c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800210e:	4b63      	ldr	r3, [pc, #396]	@ (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0307 	and.w	r3, r3, #7
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	429a      	cmp	r2, r3
 800211a:	d001      	beq.n	8002120 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e0b8      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d020      	beq.n	800216e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0304 	and.w	r3, r3, #4
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002138:	4b59      	ldr	r3, [pc, #356]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	4a58      	ldr	r2, [pc, #352]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800213e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002142:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0308 	and.w	r3, r3, #8
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002150:	4b53      	ldr	r3, [pc, #332]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	4a52      	ldr	r2, [pc, #328]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002156:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800215a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800215c:	4b50      	ldr	r3, [pc, #320]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	494d      	ldr	r1, [pc, #308]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800216a:	4313      	orrs	r3, r2
 800216c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	2b00      	cmp	r3, #0
 8002178:	d044      	beq.n	8002204 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	685b      	ldr	r3, [r3, #4]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d107      	bne.n	8002192 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002182:	4b47      	ldr	r3, [pc, #284]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d119      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e07f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d003      	beq.n	80021a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d107      	bne.n	80021b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a2:	4b3f      	ldr	r3, [pc, #252]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d109      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ae:	2301      	movs	r3, #1
 80021b0:	e06f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021b2:	4b3b      	ldr	r3, [pc, #236]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e067      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021c2:	4b37      	ldr	r3, [pc, #220]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f023 0203 	bic.w	r2, r3, #3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	4934      	ldr	r1, [pc, #208]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021d4:	f7fe fe82 	bl	8000edc <HAL_GetTick>
 80021d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021da:	e00a      	b.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021dc:	f7fe fe7e 	bl	8000edc <HAL_GetTick>
 80021e0:	4602      	mov	r2, r0
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d901      	bls.n	80021f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021ee:	2303      	movs	r3, #3
 80021f0:	e04f      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021f2:	4b2b      	ldr	r3, [pc, #172]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 020c 	and.w	r2, r3, #12
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	429a      	cmp	r2, r3
 8002202:	d1eb      	bne.n	80021dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002204:	4b25      	ldr	r3, [pc, #148]	@ (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0307 	and.w	r3, r3, #7
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d20c      	bcs.n	800222c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b22      	ldr	r3, [pc, #136]	@ (800229c <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b20      	ldr	r3, [pc, #128]	@ (800229c <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e032      	b.n	8002292 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0304 	and.w	r3, r3, #4
 8002234:	2b00      	cmp	r3, #0
 8002236:	d008      	beq.n	800224a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002238:	4b19      	ldr	r3, [pc, #100]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	4916      	ldr	r1, [pc, #88]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	4313      	orrs	r3, r2
 8002248:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d009      	beq.n	800226a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	691b      	ldr	r3, [r3, #16]
 8002262:	00db      	lsls	r3, r3, #3
 8002264:	490e      	ldr	r1, [pc, #56]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002266:	4313      	orrs	r3, r2
 8002268:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800226a:	f000 f821 	bl	80022b0 <HAL_RCC_GetSysClockFreq>
 800226e:	4602      	mov	r2, r0
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	490a      	ldr	r1, [pc, #40]	@ (80022a4 <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	5ccb      	ldrb	r3, [r1, r3]
 800227e:	fa22 f303 	lsr.w	r3, r2, r3
 8002282:	4a09      	ldr	r2, [pc, #36]	@ (80022a8 <HAL_RCC_ClockConfig+0x1c4>)
 8002284:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002286:	4b09      	ldr	r3, [pc, #36]	@ (80022ac <HAL_RCC_ClockConfig+0x1c8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	f7fe fde2 	bl	8000e54 <HAL_InitTick>

  return HAL_OK;
 8002290:	2300      	movs	r3, #0
}
 8002292:	4618      	mov	r0, r3
 8002294:	3710      	adds	r7, #16
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	40023c00 	.word	0x40023c00
 80022a0:	40023800 	.word	0x40023800
 80022a4:	08006f38 	.word	0x08006f38
 80022a8:	20000004 	.word	0x20000004
 80022ac:	20000008 	.word	0x20000008

080022b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80022b4:	b094      	sub	sp, #80	@ 0x50
 80022b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80022bc:	2300      	movs	r3, #0
 80022be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80022c4:	2300      	movs	r3, #0
 80022c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80022c8:	4b79      	ldr	r3, [pc, #484]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d00d      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x40>
 80022d4:	2b08      	cmp	r3, #8
 80022d6:	f200 80e1 	bhi.w	800249c <HAL_RCC_GetSysClockFreq+0x1ec>
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d002      	beq.n	80022e4 <HAL_RCC_GetSysClockFreq+0x34>
 80022de:	2b04      	cmp	r3, #4
 80022e0:	d003      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x3a>
 80022e2:	e0db      	b.n	800249c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80022e4:	4b73      	ldr	r3, [pc, #460]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80022e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022e8:	e0db      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80022ea:	4b73      	ldr	r3, [pc, #460]	@ (80024b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80022ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80022ee:	e0d8      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022f0:	4b6f      	ldr	r3, [pc, #444]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022fa:	4b6d      	ldr	r3, [pc, #436]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d063      	beq.n	80023ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002306:	4b6a      	ldr	r3, [pc, #424]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	099b      	lsrs	r3, r3, #6
 800230c:	2200      	movs	r2, #0
 800230e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002310:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002312:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002314:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002318:	633b      	str	r3, [r7, #48]	@ 0x30
 800231a:	2300      	movs	r3, #0
 800231c:	637b      	str	r3, [r7, #52]	@ 0x34
 800231e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002322:	4622      	mov	r2, r4
 8002324:	462b      	mov	r3, r5
 8002326:	f04f 0000 	mov.w	r0, #0
 800232a:	f04f 0100 	mov.w	r1, #0
 800232e:	0159      	lsls	r1, r3, #5
 8002330:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002334:	0150      	lsls	r0, r2, #5
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4621      	mov	r1, r4
 800233c:	1a51      	subs	r1, r2, r1
 800233e:	6139      	str	r1, [r7, #16]
 8002340:	4629      	mov	r1, r5
 8002342:	eb63 0301 	sbc.w	r3, r3, r1
 8002346:	617b      	str	r3, [r7, #20]
 8002348:	f04f 0200 	mov.w	r2, #0
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002354:	4659      	mov	r1, fp
 8002356:	018b      	lsls	r3, r1, #6
 8002358:	4651      	mov	r1, sl
 800235a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800235e:	4651      	mov	r1, sl
 8002360:	018a      	lsls	r2, r1, #6
 8002362:	4651      	mov	r1, sl
 8002364:	ebb2 0801 	subs.w	r8, r2, r1
 8002368:	4659      	mov	r1, fp
 800236a:	eb63 0901 	sbc.w	r9, r3, r1
 800236e:	f04f 0200 	mov.w	r2, #0
 8002372:	f04f 0300 	mov.w	r3, #0
 8002376:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800237a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800237e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002382:	4690      	mov	r8, r2
 8002384:	4699      	mov	r9, r3
 8002386:	4623      	mov	r3, r4
 8002388:	eb18 0303 	adds.w	r3, r8, r3
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	462b      	mov	r3, r5
 8002390:	eb49 0303 	adc.w	r3, r9, r3
 8002394:	60fb      	str	r3, [r7, #12]
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	f04f 0300 	mov.w	r3, #0
 800239e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80023a2:	4629      	mov	r1, r5
 80023a4:	024b      	lsls	r3, r1, #9
 80023a6:	4621      	mov	r1, r4
 80023a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80023ac:	4621      	mov	r1, r4
 80023ae:	024a      	lsls	r2, r1, #9
 80023b0:	4610      	mov	r0, r2
 80023b2:	4619      	mov	r1, r3
 80023b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80023b6:	2200      	movs	r2, #0
 80023b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80023c0:	f7fd ff56 	bl	8000270 <__aeabi_uldivmod>
 80023c4:	4602      	mov	r2, r0
 80023c6:	460b      	mov	r3, r1
 80023c8:	4613      	mov	r3, r2
 80023ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023cc:	e058      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ce:	4b38      	ldr	r3, [pc, #224]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	099b      	lsrs	r3, r3, #6
 80023d4:	2200      	movs	r2, #0
 80023d6:	4618      	mov	r0, r3
 80023d8:	4611      	mov	r1, r2
 80023da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80023de:	623b      	str	r3, [r7, #32]
 80023e0:	2300      	movs	r3, #0
 80023e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80023e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80023e8:	4642      	mov	r2, r8
 80023ea:	464b      	mov	r3, r9
 80023ec:	f04f 0000 	mov.w	r0, #0
 80023f0:	f04f 0100 	mov.w	r1, #0
 80023f4:	0159      	lsls	r1, r3, #5
 80023f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023fa:	0150      	lsls	r0, r2, #5
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4641      	mov	r1, r8
 8002402:	ebb2 0a01 	subs.w	sl, r2, r1
 8002406:	4649      	mov	r1, r9
 8002408:	eb63 0b01 	sbc.w	fp, r3, r1
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002418:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800241c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002420:	ebb2 040a 	subs.w	r4, r2, sl
 8002424:	eb63 050b 	sbc.w	r5, r3, fp
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 0300 	mov.w	r3, #0
 8002430:	00eb      	lsls	r3, r5, #3
 8002432:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002436:	00e2      	lsls	r2, r4, #3
 8002438:	4614      	mov	r4, r2
 800243a:	461d      	mov	r5, r3
 800243c:	4643      	mov	r3, r8
 800243e:	18e3      	adds	r3, r4, r3
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	464b      	mov	r3, r9
 8002444:	eb45 0303 	adc.w	r3, r5, r3
 8002448:	607b      	str	r3, [r7, #4]
 800244a:	f04f 0200 	mov.w	r2, #0
 800244e:	f04f 0300 	mov.w	r3, #0
 8002452:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002456:	4629      	mov	r1, r5
 8002458:	028b      	lsls	r3, r1, #10
 800245a:	4621      	mov	r1, r4
 800245c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002460:	4621      	mov	r1, r4
 8002462:	028a      	lsls	r2, r1, #10
 8002464:	4610      	mov	r0, r2
 8002466:	4619      	mov	r1, r3
 8002468:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800246a:	2200      	movs	r2, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	61fa      	str	r2, [r7, #28]
 8002470:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002474:	f7fd fefc 	bl	8000270 <__aeabi_uldivmod>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4613      	mov	r3, r2
 800247e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002480:	4b0b      	ldr	r3, [pc, #44]	@ (80024b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	3301      	adds	r3, #1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002490:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002492:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800249a:	e002      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800249e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80024a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3750      	adds	r7, #80	@ 0x50
 80024a8:	46bd      	mov	sp, r7
 80024aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80024ae:	bf00      	nop
 80024b0:	40023800 	.word	0x40023800
 80024b4:	00f42400 	.word	0x00f42400
 80024b8:	007a1200 	.word	0x007a1200

080024bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c0:	4b03      	ldr	r3, [pc, #12]	@ (80024d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024c2:	681b      	ldr	r3, [r3, #0]
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	20000004 	.word	0x20000004

080024d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024d8:	f7ff fff0 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 80024dc:	4602      	mov	r2, r0
 80024de:	4b05      	ldr	r3, [pc, #20]	@ (80024f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e0:	689b      	ldr	r3, [r3, #8]
 80024e2:	0a9b      	lsrs	r3, r3, #10
 80024e4:	f003 0307 	and.w	r3, r3, #7
 80024e8:	4903      	ldr	r1, [pc, #12]	@ (80024f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ea:	5ccb      	ldrb	r3, [r1, r3]
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	40023800 	.word	0x40023800
 80024f8:	08006f48 	.word	0x08006f48

080024fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002500:	f7ff ffdc 	bl	80024bc <HAL_RCC_GetHCLKFreq>
 8002504:	4602      	mov	r2, r0
 8002506:	4b05      	ldr	r3, [pc, #20]	@ (800251c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	0b5b      	lsrs	r3, r3, #13
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	4903      	ldr	r1, [pc, #12]	@ (8002520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002512:	5ccb      	ldrb	r3, [r1, r3]
 8002514:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002518:	4618      	mov	r0, r3
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40023800 	.word	0x40023800
 8002520:	08006f48 	.word	0x08006f48

08002524 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d101      	bne.n	8002536 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e022      	b.n	800257c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800253c:	b2db      	uxtb	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f7fe fa41 	bl	80009d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2203      	movs	r2, #3
 8002552:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f814 	bl	8002584 <HAL_SD_InitCard>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e00a      	b.n	800257c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800257a:	2300      	movs	r3, #0
}
 800257c:	4618      	mov	r0, r3
 800257e:	3708      	adds	r7, #8
 8002580:	46bd      	mov	sp, r7
 8002582:	bd80      	pop	{r7, pc}

08002584 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002584:	b5b0      	push	{r4, r5, r7, lr}
 8002586:	b08e      	sub	sp, #56	@ 0x38
 8002588:	af04      	add	r7, sp, #16
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002590:	2300      	movs	r3, #0
 8002592:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002594:	2300      	movs	r3, #0
 8002596:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800259c:	2300      	movs	r3, #0
 800259e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80025a0:	2376      	movs	r3, #118	@ 0x76
 80025a2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681d      	ldr	r5, [r3, #0]
 80025a8:	466c      	mov	r4, sp
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80025b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80025b6:	f107 0308 	add.w	r3, r7, #8
 80025ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025bc:	4628      	mov	r0, r5
 80025be:	f002 f8c7 	bl	8004750 <SDIO_Init>
 80025c2:	4603      	mov	r3, r0
 80025c4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if(status != HAL_OK)
 80025c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d001      	beq.n	80025d4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e04f      	b.n	8002674 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80025d4:	4b29      	ldr	r3, [pc, #164]	@ (800267c <HAL_SD_InitCard+0xf8>)
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4618      	mov	r0, r3
 80025e0:	f002 f8ff 	bl	80047e2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80025e4:	4b25      	ldr	r3, [pc, #148]	@ (800267c <HAL_SD_InitCard+0xf8>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80025ea:	2002      	movs	r0, #2
 80025ec:	f7fe fc82 	bl	8000ef4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 ff13 	bl	800341c <SD_PowerON>
 80025f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025f8:	6a3b      	ldr	r3, [r7, #32]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00b      	beq.n	8002616 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2201      	movs	r2, #1
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	431a      	orrs	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e02e      	b.n	8002674 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 fe32 	bl	8003280 <SD_InitCard>
 800261c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800261e:	6a3b      	ldr	r3, [r7, #32]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00b      	beq.n	800263c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    hsd->ErrorCode |= errorstate;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002630:	6a3b      	ldr	r3, [r7, #32]
 8002632:	431a      	orrs	r2, r3
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e01b      	b.n	8002674 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002644:	4618      	mov	r0, r3
 8002646:	f002 f95e 	bl	8004906 <SDMMC_CmdBlockLength>
 800264a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d00f      	beq.n	8002672 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0a      	ldr	r2, [pc, #40]	@ (8002680 <HAL_SD_InitCard+0xfc>)
 8002658:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800265e:	6a3b      	ldr	r3, [r7, #32]
 8002660:	431a      	orrs	r2, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3728      	adds	r7, #40	@ 0x28
 8002678:	46bd      	mov	sp, r7
 800267a:	bdb0      	pop	{r4, r5, r7, pc}
 800267c:	422580a0 	.word	0x422580a0
 8002680:	004005ff 	.word	0x004005ff

08002684 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b092      	sub	sp, #72	@ 0x48
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002692:	f7fe fc23 	bl	8000edc <HAL_GetTick>
 8002696:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d107      	bne.n	80026b6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026aa:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e1c5      	b.n	8002a42 <HAL_SD_ReadBlocks+0x3be>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	f040 81b8 	bne.w	8002a34 <HAL_SD_ReadBlocks+0x3b0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2200      	movs	r2, #0
 80026c8:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80026ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	441a      	add	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d907      	bls.n	80026e8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026dc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e1ac      	b.n	8002a42 <HAL_SD_ReadBlocks+0x3be>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2203      	movs	r2, #3
 80026ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2200      	movs	r2, #0
 80026f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026fc:	2b01      	cmp	r3, #1
 80026fe:	d002      	beq.n	8002706 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002702:	025b      	lsls	r3, r3, #9
 8002704:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002706:	f04f 33ff 	mov.w	r3, #4294967295
 800270a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	025b      	lsls	r3, r3, #9
 8002710:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002712:	2390      	movs	r3, #144	@ 0x90
 8002714:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002716:	2302      	movs	r3, #2
 8002718:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800271a:	2300      	movs	r3, #0
 800271c:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 800271e:	2301      	movs	r3, #1
 8002720:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f107 0214 	add.w	r2, r7, #20
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f002 f8be 	bl	80048ae <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d90a      	bls.n	800274e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2202      	movs	r2, #2
 800273c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002744:	4618      	mov	r0, r3
 8002746:	f002 f922 	bl	800498e <SDMMC_CmdReadMultiBlock>
 800274a:	6478      	str	r0, [r7, #68]	@ 0x44
 800274c:	e009      	b.n	8002762 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2201      	movs	r2, #1
 8002752:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800275a:	4618      	mov	r0, r3
 800275c:	f002 f8f5 	bl	800494a <SDMMC_CmdReadSingleBlock>
 8002760:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002762:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002764:	2b00      	cmp	r3, #0
 8002766:	d012      	beq.n	800278e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a7e      	ldr	r2, [pc, #504]	@ (8002968 <HAL_SD_ReadBlocks+0x2e4>)
 800276e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002774:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002776:	431a      	orrs	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	2200      	movs	r2, #0
 8002788:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e159      	b.n	8002a42 <HAL_SD_ReadBlocks+0x3be>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800278e:	69bb      	ldr	r3, [r7, #24]
 8002790:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002792:	e061      	b.n	8002858 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800279a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d03c      	beq.n	800281c <HAL_SD_ReadBlocks+0x198>
 80027a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d039      	beq.n	800281c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	643b      	str	r3, [r7, #64]	@ 0x40
 80027ac:	e033      	b.n	8002816 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f001 fff7 	bl	80047a6 <SDIO_ReadFIFO>
 80027b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80027ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027bc:	b2da      	uxtb	r2, r3
 80027be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80027c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027c4:	3301      	adds	r3, #1
 80027c6:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ca:	3b01      	subs	r3, #1
 80027cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80027ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027d0:	0a1b      	lsrs	r3, r3, #8
 80027d2:	b2da      	uxtb	r2, r3
 80027d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027d6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80027d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027da:	3301      	adds	r3, #1
 80027dc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027e0:	3b01      	subs	r3, #1
 80027e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80027e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027e6:	0c1b      	lsrs	r3, r3, #16
 80027e8:	b2da      	uxtb	r2, r3
 80027ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027ec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80027ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80027f0:	3301      	adds	r3, #1
 80027f2:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 80027f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027f6:	3b01      	subs	r3, #1
 80027f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80027fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80027fc:	0e1b      	lsrs	r3, r3, #24
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002802:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002804:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002806:	3301      	adds	r3, #1
 8002808:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 800280a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800280c:	3b01      	subs	r3, #1
 800280e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for(count = 0U; count < 8U; count++)
 8002810:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002812:	3301      	adds	r3, #1
 8002814:	643b      	str	r3, [r7, #64]	@ 0x40
 8002816:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002818:	2b07      	cmp	r3, #7
 800281a:	d9c8      	bls.n	80027ae <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800281c:	f7fe fb5e 	bl	8000edc <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002828:	429a      	cmp	r2, r3
 800282a:	d902      	bls.n	8002832 <HAL_SD_ReadBlocks+0x1ae>
 800282c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800282e:	2b00      	cmp	r3, #0
 8002830:	d112      	bne.n	8002858 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a4c      	ldr	r2, [pc, #304]	@ (8002968 <HAL_SD_ReadBlocks+0x2e4>)
 8002838:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800283e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2201      	movs	r2, #1
 800284a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e0f4      	b.n	8002a42 <HAL_SD_ReadBlocks+0x3be>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800285e:	f240 332a 	movw	r3, #810	@ 0x32a
 8002862:	4013      	ands	r3, r2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d095      	beq.n	8002794 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002872:	2b00      	cmp	r3, #0
 8002874:	d022      	beq.n	80028bc <HAL_SD_ReadBlocks+0x238>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d91f      	bls.n	80028bc <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002880:	2b03      	cmp	r3, #3
 8002882:	d01b      	beq.n	80028bc <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4618      	mov	r0, r3
 800288a:	f002 f8e7 	bl	8004a5c <SDMMC_CmdStopTransfer>
 800288e:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002890:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002892:	2b00      	cmp	r3, #0
 8002894:	d012      	beq.n	80028bc <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a33      	ldr	r2, [pc, #204]	@ (8002968 <HAL_SD_ReadBlocks+0x2e4>)
 800289c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80028a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2201      	movs	r2, #1
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2200      	movs	r2, #0
 80028b6:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0c2      	b.n	8002a42 <HAL_SD_ReadBlocks+0x3be>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d106      	bne.n	80028d8 <HAL_SD_ReadBlocks+0x254>
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d012      	beq.n	80028fe <HAL_SD_ReadBlocks+0x27a>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a22      	ldr	r2, [pc, #136]	@ (8002968 <HAL_SD_ReadBlocks+0x2e4>)
 80028de:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e4:	f043 0208 	orr.w	r2, r3, #8
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e0a1      	b.n	8002a42 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d012      	beq.n	8002932 <HAL_SD_ReadBlocks+0x2ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a15      	ldr	r2, [pc, #84]	@ (8002968 <HAL_SD_ReadBlocks+0x2e4>)
 8002912:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002918:	f043 0202 	orr.w	r2, r3, #2
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e087      	b.n	8002a42 <HAL_SD_ReadBlocks+0x3be>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002938:	f003 0320 	and.w	r3, r3, #32
 800293c:	2b00      	cmp	r3, #0
 800293e:	d064      	beq.n	8002a0a <HAL_SD_ReadBlocks+0x386>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a08      	ldr	r2, [pc, #32]	@ (8002968 <HAL_SD_ReadBlocks+0x2e4>)
 8002946:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800294c:	f043 0220 	orr.w	r2, r3, #32
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2200      	movs	r2, #0
 8002960:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e06d      	b.n	8002a42 <HAL_SD_ReadBlocks+0x3be>
 8002966:	bf00      	nop
 8002968:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4618      	mov	r0, r3
 8002972:	f001 ff18 	bl	80047a6 <SDIO_ReadFIFO>
 8002976:	62f8      	str	r0, [r7, #44]	@ 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800297a:	b2da      	uxtb	r2, r3
 800297c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800297e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002982:	3301      	adds	r3, #1
 8002984:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 8002986:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002988:	3b01      	subs	r3, #1
 800298a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800298c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800298e:	0a1b      	lsrs	r3, r3, #8
 8002990:	b2da      	uxtb	r2, r3
 8002992:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002994:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002998:	3301      	adds	r3, #1
 800299a:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 800299c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800299e:	3b01      	subs	r3, #1
 80029a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80029a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	b2da      	uxtb	r2, r3
 80029a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029aa:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80029ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029ae:	3301      	adds	r3, #1
 80029b0:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80029b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029b4:	3b01      	subs	r3, #1
 80029b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80029b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029ba:	0e1b      	lsrs	r3, r3, #24
 80029bc:	b2da      	uxtb	r2, r3
 80029be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80029c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80029c4:	3301      	adds	r3, #1
 80029c6:	637b      	str	r3, [r7, #52]	@ 0x34
      dataremaining--;
 80029c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80029ca:	3b01      	subs	r3, #1
 80029cc:	63fb      	str	r3, [r7, #60]	@ 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80029ce:	f7fe fa85 	bl	8000edc <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80029da:	429a      	cmp	r2, r3
 80029dc:	d902      	bls.n	80029e4 <HAL_SD_ReadBlocks+0x360>
 80029de:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d112      	bne.n	8002a0a <HAL_SD_ReadBlocks+0x386>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a18      	ldr	r2, [pc, #96]	@ (8002a4c <HAL_SD_ReadBlocks+0x3c8>)
 80029ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State= HAL_SD_STATE_READY;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	2200      	movs	r2, #0
 8002a04:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e01b      	b.n	8002a42 <HAL_SD_ReadBlocks+0x3be>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a10:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d002      	beq.n	8002a1e <HAL_SD_ReadBlocks+0x39a>
 8002a18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d1a6      	bne.n	800296c <HAL_SD_ReadBlocks+0x2e8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002a26:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002a30:	2300      	movs	r3, #0
 8002a32:	e006      	b.n	8002a42 <HAL_SD_ReadBlocks+0x3be>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a38:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002a40:	2301      	movs	r3, #1
  }
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3748      	adds	r7, #72	@ 0x48
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	004005ff 	.word	0x004005ff

08002a50 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b092      	sub	sp, #72	@ 0x48
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002a5e:	f7fe fa3d 	bl	8000edc <HAL_GetTick>
 8002a62:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	637b      	str	r3, [r7, #52]	@ 0x34

  if(NULL == pData)
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d107      	bne.n	8002a82 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a76:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e16d      	b.n	8002d5e <HAL_SD_WriteBlocks+0x30e>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	f040 8160 	bne.w	8002d50 <HAL_SD_WriteBlocks+0x300>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2200      	movs	r2, #0
 8002a94:	639a      	str	r2, [r3, #56]	@ 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002a96:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	441a      	add	r2, r3
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d907      	bls.n	8002ab4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa8:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	639a      	str	r2, [r3, #56]	@ 0x38
      return HAL_ERROR;
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	e154      	b.n	8002d5e <HAL_SD_WriteBlocks+0x30e>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d002      	beq.n	8002ad2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ace:	025b      	lsls	r3, r3, #9
 8002ad0:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ad2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ad6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	025b      	lsls	r3, r3, #9
 8002adc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ade:	2390      	movs	r3, #144	@ 0x90
 8002ae0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002aea:	2301      	movs	r3, #1
 8002aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f107 0218 	add.w	r2, r7, #24
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f001 fed8 	bl	80048ae <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d90a      	bls.n	8002b1a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2220      	movs	r2, #32
 8002b08:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b10:	4618      	mov	r0, r3
 8002b12:	f001 ff80 	bl	8004a16 <SDMMC_CmdWriteMultiBlock>
 8002b16:	6478      	str	r0, [r7, #68]	@ 0x44
 8002b18:	e009      	b.n	8002b2e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b26:	4618      	mov	r0, r3
 8002b28:	f001 ff53 	bl	80049d2 <SDMMC_CmdWriteSingleBlock>
 8002b2c:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b2e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d012      	beq.n	8002b5a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a8b      	ldr	r2, [pc, #556]	@ (8002d68 <HAL_SD_WriteBlocks+0x318>)
 8002b3a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b42:	431a      	orrs	r2, r3
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e101      	b.n	8002d5e <HAL_SD_WriteBlocks+0x30e>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002b5e:	e065      	b.n	8002c2c <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b66:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d040      	beq.n	8002bf0 <HAL_SD_WriteBlocks+0x1a0>
 8002b6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d03d      	beq.n	8002bf0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002b74:	2300      	movs	r3, #0
 8002b76:	643b      	str	r3, [r7, #64]	@ 0x40
 8002b78:	e037      	b.n	8002bea <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b82:	3301      	adds	r3, #1
 8002b84:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002b8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	021a      	lsls	r2, r3, #8
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002b98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002b9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	041a      	lsls	r2, r3, #16
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	4313      	orrs	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002bb0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002bb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	061a      	lsls	r2, r3, #24
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002bca:	3301      	adds	r3, #1
 8002bcc:	637b      	str	r3, [r7, #52]	@ 0x34
          dataremaining--;
 8002bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f107 0214 	add.w	r2, r7, #20
 8002bdc:	4611      	mov	r1, r2
 8002bde:	4618      	mov	r0, r3
 8002be0:	f001 fdee 	bl	80047c0 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002be4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002be6:	3301      	adds	r3, #1
 8002be8:	643b      	str	r3, [r7, #64]	@ 0x40
 8002bea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002bec:	2b07      	cmp	r3, #7
 8002bee:	d9c4      	bls.n	8002b7a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002bf0:	f7fe f974 	bl	8000edc <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d902      	bls.n	8002c06 <HAL_SD_WriteBlocks+0x1b6>
 8002c00:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d112      	bne.n	8002c2c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a57      	ldr	r2, [pc, #348]	@ (8002d68 <HAL_SD_WriteBlocks+0x318>)
 8002c0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c12:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c14:	431a      	orrs	r2, r3
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2201      	movs	r2, #1
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	631a      	str	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	e098      	b.n	8002d5e <HAL_SD_WriteBlocks+0x30e>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c32:	f240 331a 	movw	r3, #794	@ 0x31a
 8002c36:	4013      	ands	r3, r2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d091      	beq.n	8002b60 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c42:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d022      	beq.n	8002c90 <HAL_SD_WriteBlocks+0x240>
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d91f      	bls.n	8002c90 <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d01b      	beq.n	8002c90 <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f001 fefd 	bl	8004a5c <SDMMC_CmdStopTransfer>
 8002c62:	6478      	str	r0, [r7, #68]	@ 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002c64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d012      	beq.n	8002c90 <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d68 <HAL_SD_WriteBlocks+0x318>)
 8002c70:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002c76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	631a      	str	r2, [r3, #48]	@ 0x30
          return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e066      	b.n	8002d5e <HAL_SD_WriteBlocks+0x30e>
      }
    }

    /* Get error state */
#if defined(SDIO_STA_STBITERR)
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c96:	f003 0308 	and.w	r3, r3, #8
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d106      	bne.n	8002cac <HAL_SD_WriteBlocks+0x25c>
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ca4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d012      	beq.n	8002cd2 <HAL_SD_WriteBlocks+0x282>
#else /* SDIO_STA_STBITERR not defined */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */		
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d68 <HAL_SD_WriteBlocks+0x318>)
 8002cb2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cb8:	f043 0208 	orr.w	r2, r3, #8
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e045      	b.n	8002d5e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d012      	beq.n	8002d06 <HAL_SD_WriteBlocks+0x2b6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a20      	ldr	r2, [pc, #128]	@ (8002d68 <HAL_SD_WriteBlocks+0x318>)
 8002ce6:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cec:	f043 0202 	orr.w	r2, r3, #2
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e02b      	b.n	8002d5e <HAL_SD_WriteBlocks+0x30e>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d0c:	f003 0310 	and.w	r3, r3, #16
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d012      	beq.n	8002d3a <HAL_SD_WriteBlocks+0x2ea>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a13      	ldr	r2, [pc, #76]	@ (8002d68 <HAL_SD_WriteBlocks+0x318>)
 8002d1a:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d20:	f043 0210 	orr.w	r2, r3, #16
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	2200      	movs	r2, #0
 8002d34:	631a      	str	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e011      	b.n	8002d5e <HAL_SD_WriteBlocks+0x30e>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8002d42:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e006      	b.n	8002d5e <HAL_SD_WriteBlocks+0x30e>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d54:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	639a      	str	r2, [r3, #56]	@ 0x38
    return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
  }
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3748      	adds	r7, #72	@ 0x48
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	004005ff 	.word	0x004005ff

08002d6c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b083      	sub	sp, #12
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
 8002d74:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d7a:	0f9b      	lsrs	r3, r3, #30
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d86:	0e9b      	lsrs	r3, r3, #26
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	f003 030f 	and.w	r3, r3, #15
 8002d8e:	b2da      	uxtb	r2, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d98:	0e1b      	lsrs	r3, r3, #24
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f003 0303 	and.w	r3, r3, #3
 8002da0:	b2da      	uxtb	r2, r3
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002daa:	0c1b      	lsrs	r3, r3, #16
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002db6:	0a1b      	lsrs	r3, r3, #8
 8002db8:	b2da      	uxtb	r2, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dcc:	0d1b      	lsrs	r3, r3, #20
 8002dce:	b29a      	uxth	r2, r3
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dd8:	0c1b      	lsrs	r3, r3, #16
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	b2da      	uxtb	r2, r3
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dea:	0bdb      	lsrs	r3, r3, #15
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	b2da      	uxtb	r2, r3
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002dfc:	0b9b      	lsrs	r3, r3, #14
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	b2da      	uxtb	r2, r3
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e0e:	0b5b      	lsrs	r3, r3, #13
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e20:	0b1b      	lsrs	r3, r3, #12
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2200      	movs	r2, #0
 8002e32:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d163      	bne.n	8002f04 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002e40:	009a      	lsls	r2, r3, #2
 8002e42:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002e46:	4013      	ands	r3, r2
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
 8002e4c:	0f92      	lsrs	r2, r2, #30
 8002e4e:	431a      	orrs	r2, r3
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e58:	0edb      	lsrs	r3, r3, #27
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	b2da      	uxtb	r2, r3
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e6a:	0e1b      	lsrs	r3, r3, #24
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	b2da      	uxtb	r2, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e7c:	0d5b      	lsrs	r3, r3, #21
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	f003 0307 	and.w	r3, r3, #7
 8002e84:	b2da      	uxtb	r2, r3
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002e8e:	0c9b      	lsrs	r3, r3, #18
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	b2da      	uxtb	r2, r3
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002ea0:	0bdb      	lsrs	r3, r3, #15
 8002ea2:	b2db      	uxtb	r3, r3
 8002ea4:	f003 0307 	and.w	r3, r3, #7
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	7e1b      	ldrb	r3, [r3, #24]
 8002ebc:	b2db      	uxtb	r3, r3
 8002ebe:	f003 0307 	and.w	r3, r3, #7
 8002ec2:	3302      	adds	r3, #2
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8002ece:	fb03 f202 	mul.w	r2, r3, r2
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	7a1b      	ldrb	r3, [r3, #8]
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	f003 030f 	and.w	r3, r3, #15
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	409a      	lsls	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	659a      	str	r2, [r3, #88]	@ 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002ef0:	0a52      	lsrs	r2, r2, #9
 8002ef2:	fb03 f202 	mul.w	r2, r3, r2
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f00:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f02:	e031      	b.n	8002f68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d11d      	bne.n	8002f48 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002f10:	041b      	lsls	r3, r3, #16
 8002f12:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f1a:	0c1b      	lsrs	r3, r3, #16
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	3301      	adds	r3, #1
 8002f28:	029a      	lsls	r2, r3, #10
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	655a      	str	r2, [r3, #84]	@ 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	65da      	str	r2, [r3, #92]	@ 0x5c
    hsd->SdCard.BlockSize = 512U;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002f3c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	661a      	str	r2, [r3, #96]	@ 0x60
 8002f46:	e00f      	b.n	8002f68 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a58      	ldr	r2, [pc, #352]	@ (80030b0 <HAL_SD_GetCardCSD+0x344>)
 8002f4e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f54:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e09d      	b.n	80030a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f6c:	0b9b      	lsrs	r3, r3, #14
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f7e:	09db      	lsrs	r3, r3, #7
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f86:	b2da      	uxtb	r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f96:	b2da      	uxtb	r2, r3
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa0:	0fdb      	lsrs	r3, r3, #31
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fac:	0f5b      	lsrs	r3, r3, #29
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fbe:	0e9b      	lsrs	r3, r3, #26
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f003 0307 	and.w	r3, r3, #7
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd0:	0d9b      	lsrs	r3, r3, #22
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f003 030f 	and.w	r3, r3, #15
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe2:	0d5b      	lsrs	r3, r3, #21
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ffe:	0c1b      	lsrs	r3, r3, #16
 8003000:	b2db      	uxtb	r3, r3
 8003002:	f003 0301 	and.w	r3, r3, #1
 8003006:	b2da      	uxtb	r2, r3
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003012:	0bdb      	lsrs	r3, r3, #15
 8003014:	b2db      	uxtb	r3, r3
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	b2da      	uxtb	r2, r3
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003026:	0b9b      	lsrs	r3, r3, #14
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f003 0301 	and.w	r3, r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303a:	0b5b      	lsrs	r3, r3, #13
 800303c:	b2db      	uxtb	r3, r3
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	b2da      	uxtb	r2, r3
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800304e:	0b1b      	lsrs	r3, r3, #12
 8003050:	b2db      	uxtb	r3, r3
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	b2da      	uxtb	r2, r3
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003062:	0a9b      	lsrs	r3, r3, #10
 8003064:	b2db      	uxtb	r3, r3
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	b2da      	uxtb	r2, r3
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003076:	0a1b      	lsrs	r3, r3, #8
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	b2da      	uxtb	r2, r3
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	b2db      	uxtb	r3, r3
 800308e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003092:	b2da      	uxtb	r2, r3
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80030a2:	2300      	movs	r3, #0
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ae:	4770      	bx	lr
 80030b0:	004005ff 	.word	0x004005ff

080030b4 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80030fa:	683b      	ldr	r3, [r7, #0]
 80030fc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80030fe:	2300      	movs	r3, #0
}
 8003100:	4618      	mov	r0, r3
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr

0800310c <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800310c:	b5b0      	push	{r4, r5, r7, lr}
 800310e:	b08e      	sub	sp, #56	@ 0x38
 8003110:	af04      	add	r7, sp, #16
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003116:	2300      	movs	r3, #0
 8003118:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2203      	movs	r2, #3
 8003120:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003128:	2b03      	cmp	r3, #3
 800312a:	d02e      	beq.n	800318a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003132:	d106      	bne.n	8003142 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003138:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003140:	e029      	b.n	8003196 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003148:	d10a      	bne.n	8003160 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fa1c 	bl	8003588 <SD_WideBus_Enable>
 8003150:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003156:	6a3b      	ldr	r3, [r7, #32]
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	639a      	str	r2, [r3, #56]	@ 0x38
 800315e:	e01a      	b.n	8003196 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10a      	bne.n	800317c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 fa59 	bl	800361e <SD_WideBus_Disable>
 800316c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	639a      	str	r2, [r3, #56]	@ 0x38
 800317a:	e00c      	b.n	8003196 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	639a      	str	r2, [r3, #56]	@ 0x38
 8003188:	e005      	b.n	8003196 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318e:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00b      	beq.n	80031b6 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a26      	ldr	r2, [pc, #152]	@ (800323c <HAL_SD_ConfigWideBusOperation+0x130>)
 80031a4:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->State = HAL_SD_STATE_READY;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2201      	movs	r2, #1
 80031aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80031b4:	e01f      	b.n	80031f6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681d      	ldr	r5, [r3, #0]
 80031dc:	466c      	mov	r4, sp
 80031de:	f107 0314 	add.w	r3, r7, #20
 80031e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80031e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80031ea:	f107 0308 	add.w	r3, r7, #8
 80031ee:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031f0:	4628      	mov	r0, r5
 80031f2:	f001 faad 	bl	8004750 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 fb81 	bl	8004906 <SDMMC_CmdBlockLength>
 8003204:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003206:	6a3b      	ldr	r3, [r7, #32]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00c      	beq.n	8003226 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a0a      	ldr	r2, [pc, #40]	@ (800323c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003212:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003218:	6a3b      	ldr	r3, [r7, #32]
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2201      	movs	r2, #1
 800322a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return status;
 800322e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8003232:	4618      	mov	r0, r3
 8003234:	3728      	adds	r7, #40	@ 0x28
 8003236:	46bd      	mov	sp, r7
 8003238:	bdb0      	pop	{r4, r5, r7, pc}
 800323a:	bf00      	nop
 800323c:	004005ff 	.word	0x004005ff

08003240 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800324c:	f107 030c 	add.w	r3, r7, #12
 8003250:	4619      	mov	r1, r3
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 f970 	bl	8003538 <SD_SendStatus>
 8003258:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d005      	beq.n	800326c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	0a5b      	lsrs	r3, r3, #9
 8003270:	f003 030f 	and.w	r3, r3, #15
 8003274:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003276:	693b      	ldr	r3, [r7, #16]
}
 8003278:	4618      	mov	r0, r3
 800327a:	3718      	adds	r7, #24
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}

08003280 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003280:	b5b0      	push	{r4, r5, r7, lr}
 8003282:	b094      	sub	sp, #80	@ 0x50
 8003284:	af04      	add	r7, sp, #16
 8003286:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003288:	2301      	movs	r3, #1
 800328a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4618      	mov	r0, r3
 8003292:	f001 fab4 	bl	80047fe <SDIO_GetPowerState>
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	d102      	bne.n	80032a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800329c:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80032a0:	e0b8      	b.n	8003414 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032a6:	2b03      	cmp	r3, #3
 80032a8:	d02f      	beq.n	800330a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4618      	mov	r0, r3
 80032b0:	f001 fcde 	bl	8004c70 <SDMMC_CmdSendCID>
 80032b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80032b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <SD_InitCard+0x40>
    {
      return errorstate;
 80032bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032be:	e0a9      	b.n	8003414 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2100      	movs	r1, #0
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fade 	bl	8004888 <SDIO_GetResponse>
 80032cc:	4602      	mov	r2, r0
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2104      	movs	r1, #4
 80032d8:	4618      	mov	r0, r3
 80032da:	f001 fad5 	bl	8004888 <SDIO_GetResponse>
 80032de:	4602      	mov	r2, r0
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	679a      	str	r2, [r3, #120]	@ 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	2108      	movs	r1, #8
 80032ea:	4618      	mov	r0, r3
 80032ec:	f001 facc 	bl	8004888 <SDIO_GetResponse>
 80032f0:	4602      	mov	r2, r0
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	67da      	str	r2, [r3, #124]	@ 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	210c      	movs	r1, #12
 80032fc:	4618      	mov	r0, r3
 80032fe:	f001 fac3 	bl	8004888 <SDIO_GetResponse>
 8003302:	4602      	mov	r2, r0
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	2b03      	cmp	r3, #3
 8003310:	d00d      	beq.n	800332e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f107 020e 	add.w	r2, r7, #14
 800331a:	4611      	mov	r1, r2
 800331c:	4618      	mov	r0, r3
 800331e:	f001 fce4 	bl	8004cea <SDMMC_CmdSetRelAdd>
 8003322:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <SD_InitCard+0xae>
    {
      return errorstate;
 800332a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800332c:	e072      	b.n	8003414 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	2b03      	cmp	r3, #3
 8003334:	d036      	beq.n	80033a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003336:	89fb      	ldrh	r3, [r7, #14]
 8003338:	461a      	mov	r2, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003346:	041b      	lsls	r3, r3, #16
 8003348:	4619      	mov	r1, r3
 800334a:	4610      	mov	r0, r2
 800334c:	f001 fcae 	bl	8004cac <SDMMC_CmdSendCSD>
 8003350:	63f8      	str	r0, [r7, #60]	@ 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003358:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800335a:	e05b      	b.n	8003414 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	2100      	movs	r1, #0
 8003362:	4618      	mov	r0, r3
 8003364:	f001 fa90 	bl	8004888 <SDIO_GetResponse>
 8003368:	4602      	mov	r2, r0
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2104      	movs	r1, #4
 8003374:	4618      	mov	r0, r3
 8003376:	f001 fa87 	bl	8004888 <SDIO_GetResponse>
 800337a:	4602      	mov	r2, r0
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	669a      	str	r2, [r3, #104]	@ 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2108      	movs	r1, #8
 8003386:	4618      	mov	r0, r3
 8003388:	f001 fa7e 	bl	8004888 <SDIO_GetResponse>
 800338c:	4602      	mov	r2, r0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	210c      	movs	r1, #12
 8003398:	4618      	mov	r0, r3
 800339a:	f001 fa75 	bl	8004888 <SDIO_GetResponse>
 800339e:	4602      	mov	r2, r0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	671a      	str	r2, [r3, #112]	@ 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2104      	movs	r1, #4
 80033aa:	4618      	mov	r0, r3
 80033ac:	f001 fa6c 	bl	8004888 <SDIO_GetResponse>
 80033b0:	4603      	mov	r3, r0
 80033b2:	0d1a      	lsrs	r2, r3, #20
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80033b8:	f107 0310 	add.w	r3, r7, #16
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f7ff fcd4 	bl	8002d6c <HAL_SD_GetCardCSD>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80033ca:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80033ce:	e021      	b.n	8003414 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6819      	ldr	r1, [r3, #0]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	2200      	movs	r2, #0
 80033dc:	461c      	mov	r4, r3
 80033de:	4615      	mov	r5, r2
 80033e0:	4622      	mov	r2, r4
 80033e2:	462b      	mov	r3, r5
 80033e4:	4608      	mov	r0, r1
 80033e6:	f001 fb5b 	bl	8004aa0 <SDMMC_CmdSelDesel>
 80033ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80033ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <SD_InitCard+0x176>
  {
    return errorstate;
 80033f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033f4:	e00e      	b.n	8003414 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681d      	ldr	r5, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	466c      	mov	r4, sp
 80033fe:	f103 0210 	add.w	r2, r3, #16
 8003402:	ca07      	ldmia	r2, {r0, r1, r2}
 8003404:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003408:	3304      	adds	r3, #4
 800340a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800340c:	4628      	mov	r0, r5
 800340e:	f001 f99f 	bl	8004750 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3740      	adds	r7, #64	@ 0x40
 8003418:	46bd      	mov	sp, r7
 800341a:	bdb0      	pop	{r4, r5, r7, pc}

0800341c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	617b      	str	r3, [r7, #20]
 800342c:	2300      	movs	r3, #0
 800342e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4618      	mov	r0, r3
 8003436:	f001 fb56 	bl	8004ae6 <SDMMC_CmdGoIdleState>
 800343a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <SD_PowerON+0x2a>
  {
    return errorstate;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	e072      	b.n	800352c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4618      	mov	r0, r3
 800344c:	f001 fb69 	bl	8004b22 <SDMMC_CmdOperCond>
 8003450:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d00d      	beq.n	8003474 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	649a      	str	r2, [r3, #72]	@ 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f001 fb3f 	bl	8004ae6 <SDMMC_CmdGoIdleState>
 8003468:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d004      	beq.n	800347a <SD_PowerON+0x5e>
    {
      return errorstate;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	e05b      	b.n	800352c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	649a      	str	r2, [r3, #72]	@ 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800347e:	2b01      	cmp	r3, #1
 8003480:	d137      	bne.n	80034f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f001 fb69 	bl	8004b60 <SDMMC_CmdAppCommand>
 800348e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d02d      	beq.n	80034f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003496:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800349a:	e047      	b.n	800352c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2100      	movs	r1, #0
 80034a2:	4618      	mov	r0, r3
 80034a4:	f001 fb5c 	bl	8004b60 <SDMMC_CmdAppCommand>
 80034a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <SD_PowerON+0x98>
    {
      return errorstate;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	e03b      	b.n	800352c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	491e      	ldr	r1, [pc, #120]	@ (8003534 <SD_PowerON+0x118>)
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fb72 	bl	8004ba4 <SDMMC_CmdAppOperCommand>
 80034c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80034c8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80034cc:	e02e      	b.n	800352c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2100      	movs	r1, #0
 80034d4:	4618      	mov	r0, r3
 80034d6:	f001 f9d7 	bl	8004888 <SDIO_GetResponse>
 80034da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	0fdb      	lsrs	r3, r3, #31
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <SD_PowerON+0xcc>
 80034e4:	2301      	movs	r3, #1
 80034e6:	e000      	b.n	80034ea <SD_PowerON+0xce>
 80034e8:	2300      	movs	r3, #0
 80034ea:	613b      	str	r3, [r7, #16]

    count++;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	3301      	adds	r3, #1
 80034f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d802      	bhi.n	8003502 <SD_PowerON+0xe6>
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d0cc      	beq.n	800349c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003508:	4293      	cmp	r3, r2
 800350a:	d902      	bls.n	8003512 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800350c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003510:	e00c      	b.n	800352c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003512:	697b      	ldr	r3, [r7, #20]
 8003514:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44
 8003522:	e002      	b.n	800352a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	645a      	str	r2, [r3, #68]	@ 0x44
  }


  return HAL_SD_ERROR_NONE;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3718      	adds	r7, #24
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	c1100000 	.word	0xc1100000

08003538 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d102      	bne.n	800354e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003548:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800354c:	e018      	b.n	8003580 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003556:	041b      	lsls	r3, r3, #16
 8003558:	4619      	mov	r1, r3
 800355a:	4610      	mov	r0, r2
 800355c:	f001 fbe6 	bl	8004d2c <SDMMC_CmdSendStatus>
 8003560:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d001      	beq.n	800356c <SD_SendStatus+0x34>
  {
    return errorstate;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	e009      	b.n	8003580 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	2100      	movs	r1, #0
 8003572:	4618      	mov	r0, r3
 8003574:	f001 f988 	bl	8004888 <SDIO_GetResponse>
 8003578:	4602      	mov	r2, r0
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3710      	adds	r7, #16
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003590:	2300      	movs	r3, #0
 8003592:	60fb      	str	r3, [r7, #12]
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2100      	movs	r1, #0
 800359e:	4618      	mov	r0, r3
 80035a0:	f001 f972 	bl	8004888 <SDIO_GetResponse>
 80035a4:	4603      	mov	r3, r0
 80035a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80035ae:	d102      	bne.n	80035b6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80035b0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80035b4:	e02f      	b.n	8003616 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80035b6:	f107 030c 	add.w	r3, r7, #12
 80035ba:	4619      	mov	r1, r3
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f879 	bl	80036b4 <SD_FindSCR>
 80035c2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	e023      	b.n	8003616 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d01c      	beq.n	8003612 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681a      	ldr	r2, [r3, #0]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e0:	041b      	lsls	r3, r3, #16
 80035e2:	4619      	mov	r1, r3
 80035e4:	4610      	mov	r0, r2
 80035e6:	f001 fabb 	bl	8004b60 <SDMMC_CmdAppCommand>
 80035ea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	e00f      	b.n	8003616 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2102      	movs	r1, #2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f001 faf4 	bl	8004bea <SDMMC_CmdBusWidth>
 8003602:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d001      	beq.n	800360e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	e003      	b.n	8003616 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800360e:	2300      	movs	r3, #0
 8003610:	e001      	b.n	8003616 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003612:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}

0800361e <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800361e:	b580      	push	{r7, lr}
 8003620:	b086      	sub	sp, #24
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003626:	2300      	movs	r3, #0
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	2300      	movs	r3, #0
 800362c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	2100      	movs	r1, #0
 8003634:	4618      	mov	r0, r3
 8003636:	f001 f927 	bl	8004888 <SDIO_GetResponse>
 800363a:	4603      	mov	r3, r0
 800363c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003640:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003644:	d102      	bne.n	800364c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003646:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800364a:	e02f      	b.n	80036ac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800364c:	f107 030c 	add.w	r3, r7, #12
 8003650:	4619      	mov	r1, r3
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f000 f82e 	bl	80036b4 <SD_FindSCR>
 8003658:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800365a:	697b      	ldr	r3, [r7, #20]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	e023      	b.n	80036ac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800366a:	2b00      	cmp	r3, #0
 800366c:	d01c      	beq.n	80036a8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003676:	041b      	lsls	r3, r3, #16
 8003678:	4619      	mov	r1, r3
 800367a:	4610      	mov	r0, r2
 800367c:	f001 fa70 	bl	8004b60 <SDMMC_CmdAppCommand>
 8003680:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d001      	beq.n	800368c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	e00f      	b.n	80036ac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2100      	movs	r1, #0
 8003692:	4618      	mov	r0, r3
 8003694:	f001 faa9 	bl	8004bea <SDMMC_CmdBusWidth>
 8003698:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d001      	beq.n	80036a4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	e003      	b.n	80036ac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80036a4:	2300      	movs	r3, #0
 80036a6:	e001      	b.n	80036ac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80036a8:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3718      	adds	r7, #24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}

080036b4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80036b4:	b590      	push	{r4, r7, lr}
 80036b6:	b08f      	sub	sp, #60	@ 0x3c
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80036be:	f7fd fc0d 	bl	8000edc <HAL_GetTick>
 80036c2:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80036c8:	2300      	movs	r3, #0
 80036ca:	60bb      	str	r3, [r7, #8]
 80036cc:	2300      	movs	r3, #0
 80036ce:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2108      	movs	r1, #8
 80036da:	4618      	mov	r0, r3
 80036dc:	f001 f913 	bl	8004906 <SDMMC_CmdBlockLength>
 80036e0:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80036e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <SD_FindSCR+0x38>
  {
    return errorstate;
 80036e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036ea:	e0b9      	b.n	8003860 <SD_FindSCR+0x1ac>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036f4:	041b      	lsls	r3, r3, #16
 80036f6:	4619      	mov	r1, r3
 80036f8:	4610      	mov	r0, r2
 80036fa:	f001 fa31 	bl	8004b60 <SDMMC_CmdAppCommand>
 80036fe:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <SD_FindSCR+0x56>
  {
    return errorstate;
 8003706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003708:	e0aa      	b.n	8003860 <SD_FindSCR+0x1ac>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800370a:	f04f 33ff 	mov.w	r3, #4294967295
 800370e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003710:	2308      	movs	r3, #8
 8003712:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003714:	2330      	movs	r3, #48	@ 0x30
 8003716:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003718:	2302      	movs	r3, #2
 800371a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800371c:	2300      	movs	r3, #0
 800371e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003720:	2301      	movs	r3, #1
 8003722:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f107 0210 	add.w	r2, r7, #16
 800372c:	4611      	mov	r1, r2
 800372e:	4618      	mov	r0, r3
 8003730:	f001 f8bd 	bl	80048ae <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f001 fa78 	bl	8004c2e <SDMMC_CmdSendSCR>
 800373e:	62b8      	str	r0, [r7, #40]	@ 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003742:	2b00      	cmp	r3, #0
 8003744:	d02a      	beq.n	800379c <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003748:	e08a      	b.n	8003860 <SD_FindSCR+0x1ac>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003750:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00f      	beq.n	8003778 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6819      	ldr	r1, [r3, #0]
 800375c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	f107 0208 	add.w	r2, r7, #8
 8003764:	18d4      	adds	r4, r2, r3
 8003766:	4608      	mov	r0, r1
 8003768:	f001 f81d 	bl	80047a6 <SDIO_ReadFIFO>
 800376c:	4603      	mov	r3, r0
 800376e:	6023      	str	r3, [r4, #0]
      index++;
 8003770:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003772:	3301      	adds	r3, #1
 8003774:	637b      	str	r3, [r7, #52]	@ 0x34
 8003776:	e006      	b.n	8003786 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800377e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d012      	beq.n	80037ac <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8003786:	f7fd fba9 	bl	8000edc <HAL_GetTick>
 800378a:	4602      	mov	r2, r0
 800378c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003794:	d102      	bne.n	800379c <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003796:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800379a:	e061      	b.n	8003860 <SD_FindSCR+0x1ac>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037a2:	f003 032a 	and.w	r3, r3, #42	@ 0x2a
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d0cf      	beq.n	800374a <SD_FindSCR+0x96>
 80037aa:	e000      	b.n	80037ae <SD_FindSCR+0xfa>
      break;
 80037ac:	bf00      	nop
    }
  }

#if defined(SDIO_STA_STBITERR)
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) || (__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR)))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037b4:	f003 0308 	and.w	r3, r3, #8
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d106      	bne.n	80037ca <SD_FindSCR+0x116>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <SD_FindSCR+0x122>
#else /* SDIO_STA_STBITERR not defined */
  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
#endif /* SDIO_STA_STBITERR */
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2208      	movs	r2, #8
 80037d0:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80037d2:	2308      	movs	r3, #8
 80037d4:	e044      	b.n	8003860 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037dc:	f003 0302 	and.w	r3, r3, #2
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <SD_FindSCR+0x13c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2202      	movs	r2, #2
 80037ea:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80037ec:	2302      	movs	r3, #2
 80037ee:	e037      	b.n	8003860 <SD_FindSCR+0x1ac>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d005      	beq.n	800380a <SD_FindSCR+0x156>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	2220      	movs	r2, #32
 8003804:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003806:	2320      	movs	r3, #32
 8003808:	e02a      	b.n	8003860 <SD_FindSCR+0x1ac>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f240 523a 	movw	r2, #1338	@ 0x53a
 8003812:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	061a      	lsls	r2, r3, #24
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	021b      	lsls	r3, r3, #8
 800381c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003820:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	0a1b      	lsrs	r3, r3, #8
 8003826:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800382a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	0e1b      	lsrs	r3, r3, #24
 8003830:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003834:	601a      	str	r2, [r3, #0]
    scr++;
 8003836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003838:	3304      	adds	r3, #4
 800383a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	061a      	lsls	r2, r3, #24
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	021b      	lsls	r3, r3, #8
 8003844:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003848:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	0a1b      	lsrs	r3, r3, #8
 800384e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003852:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	0e1b      	lsrs	r3, r3, #24
 8003858:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800385a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800385c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800385e:	2300      	movs	r3, #0
}
 8003860:	4618      	mov	r0, r3
 8003862:	373c      	adds	r7, #60	@ 0x3c
 8003864:	46bd      	mov	sp, r7
 8003866:	bd90      	pop	{r4, r7, pc}

08003868 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e042      	b.n	8003900 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003880:	b2db      	uxtb	r3, r3
 8003882:	2b00      	cmp	r3, #0
 8003884:	d106      	bne.n	8003894 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f7fd f918 	bl	8000ac4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2224      	movs	r2, #36	@ 0x24
 8003898:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fcdb 	bl	8004268 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	691a      	ldr	r2, [r3, #16]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	695a      	ldr	r2, [r3, #20]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2220      	movs	r2, #32
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3708      	adds	r7, #8
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}

08003908 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	4613      	mov	r3, r2
 8003914:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b20      	cmp	r3, #32
 8003920:	d112      	bne.n	8003948 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d002      	beq.n	800392e <HAL_UART_Receive_IT+0x26>
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e00b      	b.n	800394a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003938:	88fb      	ldrh	r3, [r7, #6]
 800393a:	461a      	mov	r2, r3
 800393c:	68b9      	ldr	r1, [r7, #8]
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 faba 	bl	8003eb8 <UART_Start_Receive_IT>
 8003944:	4603      	mov	r3, r0
 8003946:	e000      	b.n	800394a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003948:	2302      	movs	r3, #2
  }
}
 800394a:	4618      	mov	r0, r3
 800394c:	3710      	adds	r7, #16
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
	...

08003954 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b0ba      	sub	sp, #232	@ 0xe8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68db      	ldr	r3, [r3, #12]
 800396c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800397a:	2300      	movs	r3, #0
 800397c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003980:	2300      	movs	r3, #0
 8003982:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003992:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10f      	bne.n	80039ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800399a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <HAL_UART_IRQHandler+0x66>
 80039a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039aa:	f003 0320 	and.w	r3, r3, #32
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d003      	beq.n	80039ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	f000 fb99 	bl	80040ea <UART_Receive_IT>
      return;
 80039b8:	e25b      	b.n	8003e72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80039ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80039be:	2b00      	cmp	r3, #0
 80039c0:	f000 80de 	beq.w	8003b80 <HAL_UART_IRQHandler+0x22c>
 80039c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d106      	bne.n	80039de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80039d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80039d8:	2b00      	cmp	r3, #0
 80039da:	f000 80d1 	beq.w	8003b80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80039de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00b      	beq.n	8003a02 <HAL_UART_IRQHandler+0xae>
 80039ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80039ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d005      	beq.n	8003a02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fa:	f043 0201 	orr.w	r2, r3, #1
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d00b      	beq.n	8003a26 <HAL_UART_IRQHandler+0xd2>
 8003a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d005      	beq.n	8003a26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a1e:	f043 0202 	orr.w	r2, r3, #2
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <HAL_UART_IRQHandler+0xf6>
 8003a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a42:	f043 0204 	orr.w	r2, r3, #4
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003a4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a4e:	f003 0308 	and.w	r3, r3, #8
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d011      	beq.n	8003a7a <HAL_UART_IRQHandler+0x126>
 8003a56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a5a:	f003 0320 	and.w	r3, r3, #32
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d105      	bne.n	8003a6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003a66:	f003 0301 	and.w	r3, r3, #1
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a72:	f043 0208 	orr.w	r2, r3, #8
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 81f2 	beq.w	8003e68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a88:	f003 0320 	and.w	r3, r3, #32
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d008      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x14e>
 8003a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003a94:	f003 0320 	and.w	r3, r3, #32
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d002      	beq.n	8003aa2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fb24 	bl	80040ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	695b      	ldr	r3, [r3, #20]
 8003aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aac:	2b40      	cmp	r3, #64	@ 0x40
 8003aae:	bf0c      	ite	eq
 8003ab0:	2301      	moveq	r3, #1
 8003ab2:	2300      	movne	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d103      	bne.n	8003ace <HAL_UART_IRQHandler+0x17a>
 8003ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d04f      	beq.n	8003b6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 fa2c 	bl	8003f2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ade:	2b40      	cmp	r3, #64	@ 0x40
 8003ae0:	d141      	bne.n	8003b66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3314      	adds	r3, #20
 8003ae8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003af0:	e853 3f00 	ldrex	r3, [r3]
 8003af4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003afc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b00:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3314      	adds	r3, #20
 8003b0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003b0e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003b12:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003b1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003b1e:	e841 2300 	strex	r3, r2, [r1]
 8003b22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003b26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d1d9      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d013      	beq.n	8003b5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b3a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d34 <HAL_UART_IRQHandler+0x3e0>)
 8003b3c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fd fc2a 	bl	800139c <HAL_DMA_Abort_IT>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d016      	beq.n	8003b7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003b58:	4610      	mov	r0, r2
 8003b5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b5c:	e00e      	b.n	8003b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f000 f994 	bl	8003e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b64:	e00a      	b.n	8003b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f990 	bl	8003e8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b6c:	e006      	b.n	8003b7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f98c 	bl	8003e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2200      	movs	r2, #0
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003b7a:	e175      	b.n	8003e68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003b7c:	bf00      	nop
    return;
 8003b7e:	e173      	b.n	8003e68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	f040 814f 	bne.w	8003e28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b8e:	f003 0310 	and.w	r3, r3, #16
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	f000 8148 	beq.w	8003e28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	f000 8141 	beq.w	8003e28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60bb      	str	r3, [r7, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60bb      	str	r3, [r7, #8]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	60bb      	str	r3, [r7, #8]
 8003bba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bc6:	2b40      	cmp	r3, #64	@ 0x40
 8003bc8:	f040 80b6 	bne.w	8003d38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003bd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f000 8145 	beq.w	8003e6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003be6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bea:	429a      	cmp	r2, r3
 8003bec:	f080 813e 	bcs.w	8003e6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003bf6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c02:	f000 8088 	beq.w	8003d16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	330c      	adds	r3, #12
 8003c0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003c1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003c20:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003c32:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003c36:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003c3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003c42:	e841 2300 	strex	r3, r2, [r1]
 8003c46:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003c4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1d9      	bne.n	8003c06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	3314      	adds	r3, #20
 8003c58:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003c5c:	e853 3f00 	ldrex	r3, [r3]
 8003c60:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003c62:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003c64:	f023 0301 	bic.w	r3, r3, #1
 8003c68:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3314      	adds	r3, #20
 8003c72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003c76:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003c7a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003c7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003c88:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e1      	bne.n	8003c52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	3314      	adds	r3, #20
 8003c94:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c96:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003c98:	e853 3f00 	ldrex	r3, [r3]
 8003c9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003c9e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ca0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3314      	adds	r3, #20
 8003cae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003cb2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003cb4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003cb8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003cba:	e841 2300 	strex	r3, r2, [r1]
 8003cbe:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003cc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d1e3      	bne.n	8003c8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003cde:	e853 3f00 	ldrex	r3, [r3]
 8003ce2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ce4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003ce6:	f023 0310 	bic.w	r3, r3, #16
 8003cea:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	330c      	adds	r3, #12
 8003cf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003cf8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003cfa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cfc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003cfe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003d00:	e841 2300 	strex	r3, r2, [r1]
 8003d04:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003d06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d1e3      	bne.n	8003cd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d10:	4618      	mov	r0, r3
 8003d12:	f7fd fad3 	bl	80012bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2202      	movs	r2, #2
 8003d1a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d24:	b29b      	uxth	r3, r3
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 f8b7 	bl	8003ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003d32:	e09b      	b.n	8003e6c <HAL_UART_IRQHandler+0x518>
 8003d34:	08003ff3 	.word	0x08003ff3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	f000 808e 	beq.w	8003e70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003d54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8089 	beq.w	8003e70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	330c      	adds	r3, #12
 8003d64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d68:	e853 3f00 	ldrex	r3, [r3]
 8003d6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003d6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d70:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d74:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	330c      	adds	r3, #12
 8003d7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003d82:	647a      	str	r2, [r7, #68]	@ 0x44
 8003d84:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003d88:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003d90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e3      	bne.n	8003d5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	3314      	adds	r3, #20
 8003d9c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	623b      	str	r3, [r7, #32]
   return(result);
 8003da6:	6a3b      	ldr	r3, [r7, #32]
 8003da8:	f023 0301 	bic.w	r3, r3, #1
 8003dac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3314      	adds	r3, #20
 8003db6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003dba:	633a      	str	r2, [r7, #48]	@ 0x30
 8003dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003dc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dc2:	e841 2300 	strex	r3, r2, [r1]
 8003dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1e3      	bne.n	8003d96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	330c      	adds	r3, #12
 8003de2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	e853 3f00 	ldrex	r3, [r3]
 8003dea:	60fb      	str	r3, [r7, #12]
   return(result);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f023 0310 	bic.w	r3, r3, #16
 8003df2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	330c      	adds	r3, #12
 8003dfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003e00:	61fa      	str	r2, [r7, #28]
 8003e02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e04:	69b9      	ldr	r1, [r7, #24]
 8003e06:	69fa      	ldr	r2, [r7, #28]
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1e3      	bne.n	8003ddc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003e1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e1e:	4619      	mov	r1, r3
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f83d 	bl	8003ea0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e26:	e023      	b.n	8003e70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e2c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d009      	beq.n	8003e48 <HAL_UART_IRQHandler+0x4f4>
 8003e34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d003      	beq.n	8003e48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 f8ea 	bl	800401a <UART_Transmit_IT>
    return;
 8003e46:	e014      	b.n	8003e72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003e48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00e      	beq.n	8003e72 <HAL_UART_IRQHandler+0x51e>
 8003e54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003e60:	6878      	ldr	r0, [r7, #4]
 8003e62:	f000 f92a 	bl	80040ba <UART_EndTransmit_IT>
    return;
 8003e66:	e004      	b.n	8003e72 <HAL_UART_IRQHandler+0x51e>
    return;
 8003e68:	bf00      	nop
 8003e6a:	e002      	b.n	8003e72 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e6c:	bf00      	nop
 8003e6e:	e000      	b.n	8003e72 <HAL_UART_IRQHandler+0x51e>
      return;
 8003e70:	bf00      	nop
  }
}
 8003e72:	37e8      	adds	r7, #232	@ 0xe8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}

08003e78 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b083      	sub	sp, #12
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	460b      	mov	r3, r1
 8003eaa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003eac:	bf00      	nop
 8003eae:	370c      	adds	r7, #12
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	68ba      	ldr	r2, [r7, #8]
 8003eca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	88fa      	ldrh	r2, [r7, #6]
 8003ed6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2222      	movs	r2, #34	@ 0x22
 8003ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68da      	ldr	r2, [r3, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003efc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	695a      	ldr	r2, [r3, #20]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0201 	orr.w	r2, r2, #1
 8003f0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f042 0220 	orr.w	r2, r2, #32
 8003f1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f1e:	2300      	movs	r3, #0
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	3714      	adds	r7, #20
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b095      	sub	sp, #84	@ 0x54
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	330c      	adds	r3, #12
 8003f3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f3e:	e853 3f00 	ldrex	r3, [r3]
 8003f42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	330c      	adds	r3, #12
 8003f52:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003f54:	643a      	str	r2, [r7, #64]	@ 0x40
 8003f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003f5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003f5c:	e841 2300 	strex	r3, r2, [r1]
 8003f60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003f62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d1e5      	bne.n	8003f34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3314      	adds	r3, #20
 8003f6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	e853 3f00 	ldrex	r3, [r3]
 8003f76:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f023 0301 	bic.w	r3, r3, #1
 8003f7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	3314      	adds	r3, #20
 8003f86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003f88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003f8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003f90:	e841 2300 	strex	r3, r2, [r1]
 8003f94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e5      	bne.n	8003f68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d119      	bne.n	8003fd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	330c      	adds	r3, #12
 8003faa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	f023 0310 	bic.w	r3, r3, #16
 8003fba:	647b      	str	r3, [r7, #68]	@ 0x44
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	330c      	adds	r3, #12
 8003fc2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fc4:	61ba      	str	r2, [r7, #24]
 8003fc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6979      	ldr	r1, [r7, #20]
 8003fca:	69ba      	ldr	r2, [r7, #24]
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	613b      	str	r3, [r7, #16]
   return(result);
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e5      	bne.n	8003fa4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003fe6:	bf00      	nop
 8003fe8:	3754      	adds	r7, #84	@ 0x54
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ffe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2200      	movs	r2, #0
 8004004:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	2200      	movs	r2, #0
 800400a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800400c:	68f8      	ldr	r0, [r7, #12]
 800400e:	f7ff ff3d 	bl	8003e8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004012:	bf00      	nop
 8004014:	3710      	adds	r7, #16
 8004016:	46bd      	mov	sp, r7
 8004018:	bd80      	pop	{r7, pc}

0800401a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800401a:	b480      	push	{r7}
 800401c:	b085      	sub	sp, #20
 800401e:	af00      	add	r7, sp, #0
 8004020:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004028:	b2db      	uxtb	r3, r3
 800402a:	2b21      	cmp	r3, #33	@ 0x21
 800402c:	d13e      	bne.n	80040ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004036:	d114      	bne.n	8004062 <UART_Transmit_IT+0x48>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	691b      	ldr	r3, [r3, #16]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d110      	bne.n	8004062 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	881b      	ldrh	r3, [r3, #0]
 800404a:	461a      	mov	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004054:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	1c9a      	adds	r2, r3, #2
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	621a      	str	r2, [r3, #32]
 8004060:	e008      	b.n	8004074 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	1c59      	adds	r1, r3, #1
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	6211      	str	r1, [r2, #32]
 800406c:	781a      	ldrb	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004078:	b29b      	uxth	r3, r3
 800407a:	3b01      	subs	r3, #1
 800407c:	b29b      	uxth	r3, r3
 800407e:	687a      	ldr	r2, [r7, #4]
 8004080:	4619      	mov	r1, r3
 8004082:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10f      	bne.n	80040a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004096:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68da      	ldr	r2, [r3, #12]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80040a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80040a8:	2300      	movs	r3, #0
 80040aa:	e000      	b.n	80040ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80040ac:	2302      	movs	r3, #2
  }
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3714      	adds	r7, #20
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr

080040ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b082      	sub	sp, #8
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80040da:	6878      	ldr	r0, [r7, #4]
 80040dc:	f7fc fbc0 	bl	8000860 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3708      	adds	r7, #8
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b08c      	sub	sp, #48	@ 0x30
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b22      	cmp	r3, #34	@ 0x22
 80040fc:	f040 80ae 	bne.w	800425c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004108:	d117      	bne.n	800413a <UART_Receive_IT+0x50>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d113      	bne.n	800413a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004112:	2300      	movs	r3, #0
 8004114:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800411a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	b29b      	uxth	r3, r3
 8004124:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004128:	b29a      	uxth	r2, r3
 800412a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004132:	1c9a      	adds	r2, r3, #2
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	629a      	str	r2, [r3, #40]	@ 0x28
 8004138:	e026      	b.n	8004188 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004140:	2300      	movs	r3, #0
 8004142:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800414c:	d007      	beq.n	800415e <UART_Receive_IT+0x74>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <UART_Receive_IT+0x82>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d106      	bne.n	800416c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	b2da      	uxtb	r2, r3
 8004166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004168:	701a      	strb	r2, [r3, #0]
 800416a:	e008      	b.n	800417e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	b2db      	uxtb	r3, r3
 8004174:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004178:	b2da      	uxtb	r2, r3
 800417a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800417c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004182:	1c5a      	adds	r2, r3, #1
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29b      	uxth	r3, r3
 8004192:	687a      	ldr	r2, [r7, #4]
 8004194:	4619      	mov	r1, r3
 8004196:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004198:	2b00      	cmp	r3, #0
 800419a:	d15d      	bne.n	8004258 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68da      	ldr	r2, [r3, #12]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0220 	bic.w	r2, r2, #32
 80041aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	695a      	ldr	r2, [r3, #20]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f022 0201 	bic.w	r2, r2, #1
 80041ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2220      	movs	r2, #32
 80041d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d135      	bne.n	800424e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	613b      	str	r3, [r7, #16]
   return(result);
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f023 0310 	bic.w	r3, r3, #16
 80041fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	330c      	adds	r3, #12
 8004206:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004208:	623a      	str	r2, [r7, #32]
 800420a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	69f9      	ldr	r1, [r7, #28]
 800420e:	6a3a      	ldr	r2, [r7, #32]
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	61bb      	str	r3, [r7, #24]
   return(result);
 8004216:	69bb      	ldr	r3, [r7, #24]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0310 	and.w	r3, r3, #16
 8004226:	2b10      	cmp	r3, #16
 8004228:	d10a      	bne.n	8004240 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60fb      	str	r3, [r7, #12]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	60fb      	str	r3, [r7, #12]
 800423e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004244:	4619      	mov	r1, r3
 8004246:	6878      	ldr	r0, [r7, #4]
 8004248:	f7ff fe2a 	bl	8003ea0 <HAL_UARTEx_RxEventCallback>
 800424c:	e002      	b.n	8004254 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fe12 	bl	8003e78 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e002      	b.n	800425e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3730      	adds	r7, #48	@ 0x30
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
	...

08004268 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800426c:	b0c0      	sub	sp, #256	@ 0x100
 800426e:	af00      	add	r7, sp, #0
 8004270:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004284:	68d9      	ldr	r1, [r3, #12]
 8004286:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800428a:	681a      	ldr	r2, [r3, #0]
 800428c:	ea40 0301 	orr.w	r3, r0, r1
 8004290:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	431a      	orrs	r2, r3
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	431a      	orrs	r2, r3
 80042a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ac:	69db      	ldr	r3, [r3, #28]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042c0:	f021 010c 	bic.w	r1, r1, #12
 80042c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042ce:	430b      	orrs	r3, r1
 80042d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e2:	6999      	ldr	r1, [r3, #24]
 80042e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	ea40 0301 	orr.w	r3, r0, r1
 80042ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4b8f      	ldr	r3, [pc, #572]	@ (8004534 <UART_SetConfig+0x2cc>)
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d005      	beq.n	8004308 <UART_SetConfig+0xa0>
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	4b8d      	ldr	r3, [pc, #564]	@ (8004538 <UART_SetConfig+0x2d0>)
 8004304:	429a      	cmp	r2, r3
 8004306:	d104      	bne.n	8004312 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004308:	f7fe f8f8 	bl	80024fc <HAL_RCC_GetPCLK2Freq>
 800430c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004310:	e003      	b.n	800431a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004312:	f7fe f8df 	bl	80024d4 <HAL_RCC_GetPCLK1Freq>
 8004316:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004324:	f040 810c 	bne.w	8004540 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004328:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800432c:	2200      	movs	r2, #0
 800432e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004332:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004336:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800433a:	4622      	mov	r2, r4
 800433c:	462b      	mov	r3, r5
 800433e:	1891      	adds	r1, r2, r2
 8004340:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004342:	415b      	adcs	r3, r3
 8004344:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004346:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800434a:	4621      	mov	r1, r4
 800434c:	eb12 0801 	adds.w	r8, r2, r1
 8004350:	4629      	mov	r1, r5
 8004352:	eb43 0901 	adc.w	r9, r3, r1
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800436a:	4690      	mov	r8, r2
 800436c:	4699      	mov	r9, r3
 800436e:	4623      	mov	r3, r4
 8004370:	eb18 0303 	adds.w	r3, r8, r3
 8004374:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004378:	462b      	mov	r3, r5
 800437a:	eb49 0303 	adc.w	r3, r9, r3
 800437e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800438e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004392:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004396:	460b      	mov	r3, r1
 8004398:	18db      	adds	r3, r3, r3
 800439a:	653b      	str	r3, [r7, #80]	@ 0x50
 800439c:	4613      	mov	r3, r2
 800439e:	eb42 0303 	adc.w	r3, r2, r3
 80043a2:	657b      	str	r3, [r7, #84]	@ 0x54
 80043a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80043a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80043ac:	f7fb ff60 	bl	8000270 <__aeabi_uldivmod>
 80043b0:	4602      	mov	r2, r0
 80043b2:	460b      	mov	r3, r1
 80043b4:	4b61      	ldr	r3, [pc, #388]	@ (800453c <UART_SetConfig+0x2d4>)
 80043b6:	fba3 2302 	umull	r2, r3, r3, r2
 80043ba:	095b      	lsrs	r3, r3, #5
 80043bc:	011c      	lsls	r4, r3, #4
 80043be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043c8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043d0:	4642      	mov	r2, r8
 80043d2:	464b      	mov	r3, r9
 80043d4:	1891      	adds	r1, r2, r2
 80043d6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043d8:	415b      	adcs	r3, r3
 80043da:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043e0:	4641      	mov	r1, r8
 80043e2:	eb12 0a01 	adds.w	sl, r2, r1
 80043e6:	4649      	mov	r1, r9
 80043e8:	eb43 0b01 	adc.w	fp, r3, r1
 80043ec:	f04f 0200 	mov.w	r2, #0
 80043f0:	f04f 0300 	mov.w	r3, #0
 80043f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004400:	4692      	mov	sl, r2
 8004402:	469b      	mov	fp, r3
 8004404:	4643      	mov	r3, r8
 8004406:	eb1a 0303 	adds.w	r3, sl, r3
 800440a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800440e:	464b      	mov	r3, r9
 8004410:	eb4b 0303 	adc.w	r3, fp, r3
 8004414:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004424:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004428:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800442c:	460b      	mov	r3, r1
 800442e:	18db      	adds	r3, r3, r3
 8004430:	643b      	str	r3, [r7, #64]	@ 0x40
 8004432:	4613      	mov	r3, r2
 8004434:	eb42 0303 	adc.w	r3, r2, r3
 8004438:	647b      	str	r3, [r7, #68]	@ 0x44
 800443a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800443e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004442:	f7fb ff15 	bl	8000270 <__aeabi_uldivmod>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4611      	mov	r1, r2
 800444c:	4b3b      	ldr	r3, [pc, #236]	@ (800453c <UART_SetConfig+0x2d4>)
 800444e:	fba3 2301 	umull	r2, r3, r3, r1
 8004452:	095b      	lsrs	r3, r3, #5
 8004454:	2264      	movs	r2, #100	@ 0x64
 8004456:	fb02 f303 	mul.w	r3, r2, r3
 800445a:	1acb      	subs	r3, r1, r3
 800445c:	00db      	lsls	r3, r3, #3
 800445e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004462:	4b36      	ldr	r3, [pc, #216]	@ (800453c <UART_SetConfig+0x2d4>)
 8004464:	fba3 2302 	umull	r2, r3, r3, r2
 8004468:	095b      	lsrs	r3, r3, #5
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004470:	441c      	add	r4, r3
 8004472:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004476:	2200      	movs	r2, #0
 8004478:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800447c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004480:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004484:	4642      	mov	r2, r8
 8004486:	464b      	mov	r3, r9
 8004488:	1891      	adds	r1, r2, r2
 800448a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800448c:	415b      	adcs	r3, r3
 800448e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004490:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004494:	4641      	mov	r1, r8
 8004496:	1851      	adds	r1, r2, r1
 8004498:	6339      	str	r1, [r7, #48]	@ 0x30
 800449a:	4649      	mov	r1, r9
 800449c:	414b      	adcs	r3, r1
 800449e:	637b      	str	r3, [r7, #52]	@ 0x34
 80044a0:	f04f 0200 	mov.w	r2, #0
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80044ac:	4659      	mov	r1, fp
 80044ae:	00cb      	lsls	r3, r1, #3
 80044b0:	4651      	mov	r1, sl
 80044b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044b6:	4651      	mov	r1, sl
 80044b8:	00ca      	lsls	r2, r1, #3
 80044ba:	4610      	mov	r0, r2
 80044bc:	4619      	mov	r1, r3
 80044be:	4603      	mov	r3, r0
 80044c0:	4642      	mov	r2, r8
 80044c2:	189b      	adds	r3, r3, r2
 80044c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044c8:	464b      	mov	r3, r9
 80044ca:	460a      	mov	r2, r1
 80044cc:	eb42 0303 	adc.w	r3, r2, r3
 80044d0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2200      	movs	r2, #0
 80044dc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044e0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044e8:	460b      	mov	r3, r1
 80044ea:	18db      	adds	r3, r3, r3
 80044ec:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044ee:	4613      	mov	r3, r2
 80044f0:	eb42 0303 	adc.w	r3, r2, r3
 80044f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044fe:	f7fb feb7 	bl	8000270 <__aeabi_uldivmod>
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <UART_SetConfig+0x2d4>)
 8004508:	fba3 1302 	umull	r1, r3, r3, r2
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	2164      	movs	r1, #100	@ 0x64
 8004510:	fb01 f303 	mul.w	r3, r1, r3
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	00db      	lsls	r3, r3, #3
 8004518:	3332      	adds	r3, #50	@ 0x32
 800451a:	4a08      	ldr	r2, [pc, #32]	@ (800453c <UART_SetConfig+0x2d4>)
 800451c:	fba2 2303 	umull	r2, r3, r2, r3
 8004520:	095b      	lsrs	r3, r3, #5
 8004522:	f003 0207 	and.w	r2, r3, #7
 8004526:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4422      	add	r2, r4
 800452e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004530:	e106      	b.n	8004740 <UART_SetConfig+0x4d8>
 8004532:	bf00      	nop
 8004534:	40011000 	.word	0x40011000
 8004538:	40011400 	.word	0x40011400
 800453c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004540:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004544:	2200      	movs	r2, #0
 8004546:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800454a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800454e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004552:	4642      	mov	r2, r8
 8004554:	464b      	mov	r3, r9
 8004556:	1891      	adds	r1, r2, r2
 8004558:	6239      	str	r1, [r7, #32]
 800455a:	415b      	adcs	r3, r3
 800455c:	627b      	str	r3, [r7, #36]	@ 0x24
 800455e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004562:	4641      	mov	r1, r8
 8004564:	1854      	adds	r4, r2, r1
 8004566:	4649      	mov	r1, r9
 8004568:	eb43 0501 	adc.w	r5, r3, r1
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	00eb      	lsls	r3, r5, #3
 8004576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800457a:	00e2      	lsls	r2, r4, #3
 800457c:	4614      	mov	r4, r2
 800457e:	461d      	mov	r5, r3
 8004580:	4643      	mov	r3, r8
 8004582:	18e3      	adds	r3, r4, r3
 8004584:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004588:	464b      	mov	r3, r9
 800458a:	eb45 0303 	adc.w	r3, r5, r3
 800458e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800459e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80045ae:	4629      	mov	r1, r5
 80045b0:	008b      	lsls	r3, r1, #2
 80045b2:	4621      	mov	r1, r4
 80045b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b8:	4621      	mov	r1, r4
 80045ba:	008a      	lsls	r2, r1, #2
 80045bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045c0:	f7fb fe56 	bl	8000270 <__aeabi_uldivmod>
 80045c4:	4602      	mov	r2, r0
 80045c6:	460b      	mov	r3, r1
 80045c8:	4b60      	ldr	r3, [pc, #384]	@ (800474c <UART_SetConfig+0x4e4>)
 80045ca:	fba3 2302 	umull	r2, r3, r3, r2
 80045ce:	095b      	lsrs	r3, r3, #5
 80045d0:	011c      	lsls	r4, r3, #4
 80045d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045d6:	2200      	movs	r2, #0
 80045d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045dc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045e4:	4642      	mov	r2, r8
 80045e6:	464b      	mov	r3, r9
 80045e8:	1891      	adds	r1, r2, r2
 80045ea:	61b9      	str	r1, [r7, #24]
 80045ec:	415b      	adcs	r3, r3
 80045ee:	61fb      	str	r3, [r7, #28]
 80045f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f4:	4641      	mov	r1, r8
 80045f6:	1851      	adds	r1, r2, r1
 80045f8:	6139      	str	r1, [r7, #16]
 80045fa:	4649      	mov	r1, r9
 80045fc:	414b      	adcs	r3, r1
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	f04f 0200 	mov.w	r2, #0
 8004604:	f04f 0300 	mov.w	r3, #0
 8004608:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800460c:	4659      	mov	r1, fp
 800460e:	00cb      	lsls	r3, r1, #3
 8004610:	4651      	mov	r1, sl
 8004612:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004616:	4651      	mov	r1, sl
 8004618:	00ca      	lsls	r2, r1, #3
 800461a:	4610      	mov	r0, r2
 800461c:	4619      	mov	r1, r3
 800461e:	4603      	mov	r3, r0
 8004620:	4642      	mov	r2, r8
 8004622:	189b      	adds	r3, r3, r2
 8004624:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004628:	464b      	mov	r3, r9
 800462a:	460a      	mov	r2, r1
 800462c:	eb42 0303 	adc.w	r3, r2, r3
 8004630:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800463e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800464c:	4649      	mov	r1, r9
 800464e:	008b      	lsls	r3, r1, #2
 8004650:	4641      	mov	r1, r8
 8004652:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004656:	4641      	mov	r1, r8
 8004658:	008a      	lsls	r2, r1, #2
 800465a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800465e:	f7fb fe07 	bl	8000270 <__aeabi_uldivmod>
 8004662:	4602      	mov	r2, r0
 8004664:	460b      	mov	r3, r1
 8004666:	4611      	mov	r1, r2
 8004668:	4b38      	ldr	r3, [pc, #224]	@ (800474c <UART_SetConfig+0x4e4>)
 800466a:	fba3 2301 	umull	r2, r3, r3, r1
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	2264      	movs	r2, #100	@ 0x64
 8004672:	fb02 f303 	mul.w	r3, r2, r3
 8004676:	1acb      	subs	r3, r1, r3
 8004678:	011b      	lsls	r3, r3, #4
 800467a:	3332      	adds	r3, #50	@ 0x32
 800467c:	4a33      	ldr	r2, [pc, #204]	@ (800474c <UART_SetConfig+0x4e4>)
 800467e:	fba2 2303 	umull	r2, r3, r2, r3
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004688:	441c      	add	r4, r3
 800468a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800468e:	2200      	movs	r2, #0
 8004690:	673b      	str	r3, [r7, #112]	@ 0x70
 8004692:	677a      	str	r2, [r7, #116]	@ 0x74
 8004694:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004698:	4642      	mov	r2, r8
 800469a:	464b      	mov	r3, r9
 800469c:	1891      	adds	r1, r2, r2
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	415b      	adcs	r3, r3
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046a8:	4641      	mov	r1, r8
 80046aa:	1851      	adds	r1, r2, r1
 80046ac:	6039      	str	r1, [r7, #0]
 80046ae:	4649      	mov	r1, r9
 80046b0:	414b      	adcs	r3, r1
 80046b2:	607b      	str	r3, [r7, #4]
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046c0:	4659      	mov	r1, fp
 80046c2:	00cb      	lsls	r3, r1, #3
 80046c4:	4651      	mov	r1, sl
 80046c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046ca:	4651      	mov	r1, sl
 80046cc:	00ca      	lsls	r2, r1, #3
 80046ce:	4610      	mov	r0, r2
 80046d0:	4619      	mov	r1, r3
 80046d2:	4603      	mov	r3, r0
 80046d4:	4642      	mov	r2, r8
 80046d6:	189b      	adds	r3, r3, r2
 80046d8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046da:	464b      	mov	r3, r9
 80046dc:	460a      	mov	r2, r1
 80046de:	eb42 0303 	adc.w	r3, r2, r3
 80046e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	663b      	str	r3, [r7, #96]	@ 0x60
 80046ee:	667a      	str	r2, [r7, #100]	@ 0x64
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046fc:	4649      	mov	r1, r9
 80046fe:	008b      	lsls	r3, r1, #2
 8004700:	4641      	mov	r1, r8
 8004702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004706:	4641      	mov	r1, r8
 8004708:	008a      	lsls	r2, r1, #2
 800470a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800470e:	f7fb fdaf 	bl	8000270 <__aeabi_uldivmod>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4b0d      	ldr	r3, [pc, #52]	@ (800474c <UART_SetConfig+0x4e4>)
 8004718:	fba3 1302 	umull	r1, r3, r3, r2
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	2164      	movs	r1, #100	@ 0x64
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	1ad3      	subs	r3, r2, r3
 8004726:	011b      	lsls	r3, r3, #4
 8004728:	3332      	adds	r3, #50	@ 0x32
 800472a:	4a08      	ldr	r2, [pc, #32]	@ (800474c <UART_SetConfig+0x4e4>)
 800472c:	fba2 2303 	umull	r2, r3, r2, r3
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	f003 020f 	and.w	r2, r3, #15
 8004736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4422      	add	r2, r4
 800473e:	609a      	str	r2, [r3, #8]
}
 8004740:	bf00      	nop
 8004742:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004746:	46bd      	mov	sp, r7
 8004748:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800474c:	51eb851f 	.word	0x51eb851f

08004750 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8004750:	b084      	sub	sp, #16
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	f107 001c 	add.w	r0, r7, #28
 800475e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8004762:	2300      	movs	r3, #0
 8004764:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004766:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004768:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800476a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800476c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockBypass         |\
 800476e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8004770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.ClockPowerSave      |\
 8004772:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.BusWide             |\
 8004776:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
             Init.HardwareFlowControl |\
 800477a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800477c:	68fa      	ldr	r2, [r7, #12]
 800477e:	4313      	orrs	r3, r2
 8004780:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	685b      	ldr	r3, [r3, #4]
 8004786:	f423 43fd 	bic.w	r3, r3, #32384	@ 0x7e80
 800478a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8004796:	2300      	movs	r3, #0
}
 8004798:	4618      	mov	r0, r3
 800479a:	3714      	adds	r7, #20
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	b004      	add	sp, #16
 80047a4:	4770      	bx	lr

080047a6 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr

080047e2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2203      	movs	r2, #3
 80047ee:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0303 	and.w	r3, r3, #3
}
 800480e:	4618      	mov	r0, r3
 8004810:	370c      	adds	r7, #12
 8004812:	46bd      	mov	sp, r7
 8004814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004818:	4770      	bx	lr

0800481a <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 800481a:	b480      	push	{r7}
 800481c:	b085      	sub	sp, #20
 800481e:	af00      	add	r7, sp, #0
 8004820:	6078      	str	r0, [r7, #4]
 8004822:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004824:	2300      	movs	r3, #0
 8004826:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004838:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800483e:	431a      	orrs	r2, r3
                       Command->CPSM);
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8004844:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8004846:	68fa      	ldr	r2, [r7, #12]
 8004848:	4313      	orrs	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 8004854:	f023 030f 	bic.w	r3, r3, #15
 8004858:	68fa      	ldr	r2, [r7, #12]
 800485a:	431a      	orrs	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8004860:	2300      	movs	r3, #0
}
 8004862:	4618      	mov	r0, r3
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	b2db      	uxtb	r3, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8004888:	b480      	push	{r7}
 800488a:	b085      	sub	sp, #20
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	3314      	adds	r3, #20
 8004896:	461a      	mov	r2, r3
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	4413      	add	r3, r2
 800489c:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
}  
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048d4:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80048da:	431a      	orrs	r2, r3
                       Data->DPSM);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80048e0:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	f023 02f7 	bic.w	r2, r3, #247	@ 0xf7
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	431a      	orrs	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0

}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3714      	adds	r7, #20
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr

08004906 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8004906:	b580      	push	{r7, lr}
 8004908:	b088      	sub	sp, #32
 800490a:	af00      	add	r7, sp, #0
 800490c:	6078      	str	r0, [r7, #4]
 800490e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8004914:	2310      	movs	r3, #16
 8004916:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004918:	2340      	movs	r3, #64	@ 0x40
 800491a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004920:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004924:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004926:	f107 0308 	add.w	r3, r7, #8
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f7ff ff74 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8004932:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004936:	2110      	movs	r1, #16
 8004938:	6878      	ldr	r0, [r7, #4]
 800493a:	f000 fa19 	bl	8004d70 <SDMMC_GetCmdResp1>
 800493e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004940:	69fb      	ldr	r3, [r7, #28]
}
 8004942:	4618      	mov	r0, r3
 8004944:	3720      	adds	r7, #32
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}

0800494a <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800494a:	b580      	push	{r7, lr}
 800494c:	b088      	sub	sp, #32
 800494e:	af00      	add	r7, sp, #0
 8004950:	6078      	str	r0, [r7, #4]
 8004952:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004958:	2311      	movs	r3, #17
 800495a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800495c:	2340      	movs	r3, #64	@ 0x40
 800495e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004964:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004968:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800496a:	f107 0308 	add.w	r3, r7, #8
 800496e:	4619      	mov	r1, r3
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f7ff ff52 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8004976:	f241 3288 	movw	r2, #5000	@ 0x1388
 800497a:	2111      	movs	r1, #17
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f9f7 	bl	8004d70 <SDMMC_GetCmdResp1>
 8004982:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004984:	69fb      	ldr	r3, [r7, #28]
}
 8004986:	4618      	mov	r0, r3
 8004988:	3720      	adds	r7, #32
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800498e:	b580      	push	{r7, lr}
 8004990:	b088      	sub	sp, #32
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800499c:	2312      	movs	r3, #18
 800499e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049a0:	2340      	movs	r3, #64	@ 0x40
 80049a2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049a4:	2300      	movs	r3, #0
 80049a6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049a8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049ac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049ae:	f107 0308 	add.w	r3, r7, #8
 80049b2:	4619      	mov	r1, r3
 80049b4:	6878      	ldr	r0, [r7, #4]
 80049b6:	f7ff ff30 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80049ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049be:	2112      	movs	r1, #18
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f000 f9d5 	bl	8004d70 <SDMMC_GetCmdResp1>
 80049c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049c8:	69fb      	ldr	r3, [r7, #28]
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b088      	sub	sp, #32
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
 80049da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80049e0:	2318      	movs	r3, #24
 80049e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80049e4:	2340      	movs	r3, #64	@ 0x40
 80049e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80049e8:	2300      	movs	r3, #0
 80049ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80049ec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80049f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80049f2:	f107 0308 	add.w	r3, r7, #8
 80049f6:	4619      	mov	r1, r3
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff ff0e 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80049fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a02:	2118      	movs	r1, #24
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 f9b3 	bl	8004d70 <SDMMC_GetCmdResp1>
 8004a0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a0c:	69fb      	ldr	r3, [r7, #28]
}
 8004a0e:	4618      	mov	r0, r3
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b088      	sub	sp, #32
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
 8004a1e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004a24:	2319      	movs	r3, #25
 8004a26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a28:	2340      	movs	r3, #64	@ 0x40
 8004a2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a30:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a34:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a36:	f107 0308 	add.w	r3, r7, #8
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f7ff feec 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8004a42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a46:	2119      	movs	r1, #25
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f991 	bl	8004d70 <SDMMC_GetCmdResp1>
 8004a4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a50:	69fb      	ldr	r3, [r7, #28]
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3720      	adds	r7, #32
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b088      	sub	sp, #32
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004a68:	230c      	movs	r3, #12
 8004a6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004a6c:	2340      	movs	r3, #64	@ 0x40
 8004a6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004a74:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a78:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004a7a:	f107 0308 	add.w	r3, r7, #8
 8004a7e:	4619      	mov	r1, r3
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f7ff feca 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8004a86:	4a05      	ldr	r2, [pc, #20]	@ (8004a9c <SDMMC_CmdStopTransfer+0x40>)
 8004a88:	210c      	movs	r1, #12
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f970 	bl	8004d70 <SDMMC_GetCmdResp1>
 8004a90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a92:	69fb      	ldr	r3, [r7, #28]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3720      	adds	r7, #32
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	05f5e100 	.word	0x05f5e100

08004aa0 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b08a      	sub	sp, #40	@ 0x28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004ab0:	2307      	movs	r3, #7
 8004ab2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004ab4:	2340      	movs	r3, #64	@ 0x40
 8004ab6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ac0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ac2:	f107 0310 	add.w	r3, r7, #16
 8004ac6:	4619      	mov	r1, r3
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff fea6 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8004ace:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ad2:	2107      	movs	r1, #7
 8004ad4:	68f8      	ldr	r0, [r7, #12]
 8004ad6:	f000 f94b 	bl	8004d70 <SDMMC_GetCmdResp1>
 8004ada:	6278      	str	r0, [r7, #36]	@ 0x24

  return errorstate;
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3728      	adds	r7, #40	@ 0x28
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b088      	sub	sp, #32
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004aee:	2300      	movs	r3, #0
 8004af0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8004af6:	2300      	movs	r3, #0
 8004af8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004afa:	2300      	movs	r3, #0
 8004afc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004afe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b02:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b04:	f107 0308 	add.w	r3, r7, #8
 8004b08:	4619      	mov	r1, r3
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff fe85 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f000 fb65 	bl	80051e0 <SDMMC_GetCmdError>
 8004b16:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b18:	69fb      	ldr	r3, [r7, #28]
}
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	3720      	adds	r7, #32
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b088      	sub	sp, #32
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004b2a:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8004b2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004b30:	2308      	movs	r3, #8
 8004b32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b34:	2340      	movs	r3, #64	@ 0x40
 8004b36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b3c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b42:	f107 0308 	add.w	r3, r7, #8
 8004b46:	4619      	mov	r1, r3
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7ff fe66 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 faf8 	bl	8005144 <SDMMC_GetCmdResp7>
 8004b54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b56:	69fb      	ldr	r3, [r7, #28]
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3720      	adds	r7, #32
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b088      	sub	sp, #32
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004b6e:	2337      	movs	r3, #55	@ 0x37
 8004b70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004b72:	2340      	movs	r3, #64	@ 0x40
 8004b74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004b76:	2300      	movs	r3, #0
 8004b78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004b7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004b80:	f107 0308 	add.w	r3, r7, #8
 8004b84:	4619      	mov	r1, r3
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fe47 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8004b8c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b90:	2137      	movs	r1, #55	@ 0x37
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f000 f8ec 	bl	8004d70 <SDMMC_GetCmdResp1>
 8004b98:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b9a:	69fb      	ldr	r3, [r7, #28]
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3720      	adds	r7, #32
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004bb4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004bba:	2329      	movs	r3, #41	@ 0x29
 8004bbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bbe:	2340      	movs	r3, #64	@ 0x40
 8004bc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004bcc:	f107 0308 	add.w	r3, r7, #8
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	f7ff fe21 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 f9ff 	bl	8004fdc <SDMMC_GetCmdResp3>
 8004bde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004be0:	69fb      	ldr	r3, [r7, #28]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b088      	sub	sp, #32
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
 8004bf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004bf8:	2306      	movs	r3, #6
 8004bfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004bfc:	2340      	movs	r3, #64	@ 0x40
 8004bfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c00:	2300      	movs	r3, #0
 8004c02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c0a:	f107 0308 	add.w	r3, r7, #8
 8004c0e:	4619      	mov	r1, r3
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f7ff fe02 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8004c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1a:	2106      	movs	r1, #6
 8004c1c:	6878      	ldr	r0, [r7, #4]
 8004c1e:	f000 f8a7 	bl	8004d70 <SDMMC_GetCmdResp1>
 8004c22:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c24:	69fb      	ldr	r3, [r7, #28]
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3720      	adds	r7, #32
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b088      	sub	sp, #32
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004c3a:	2333      	movs	r3, #51	@ 0x33
 8004c3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004c3e:	2340      	movs	r3, #64	@ 0x40
 8004c40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c42:	2300      	movs	r3, #0
 8004c44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c4c:	f107 0308 	add.w	r3, r7, #8
 8004c50:	4619      	mov	r1, r3
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff fde1 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8004c58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c5c:	2133      	movs	r1, #51	@ 0x33
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f886 	bl	8004d70 <SDMMC_GetCmdResp1>
 8004c64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c66:	69fb      	ldr	r3, [r7, #28]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3720      	adds	r7, #32
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b088      	sub	sp, #32
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004c78:	2300      	movs	r3, #0
 8004c7a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004c80:	23c0      	movs	r3, #192	@ 0xc0
 8004c82:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004c84:	2300      	movs	r3, #0
 8004c86:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004c88:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c8c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004c8e:	f107 0308 	add.w	r3, r7, #8
 8004c92:	4619      	mov	r1, r3
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff fdc0 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f956 	bl	8004f4c <SDMMC_GetCmdResp2>
 8004ca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	3720      	adds	r7, #32
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}

08004cac <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004cba:	2309      	movs	r3, #9
 8004cbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8004cbe:	23c0      	movs	r3, #192	@ 0xc0
 8004cc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004cc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004cca:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004ccc:	f107 0308 	add.w	r3, r7, #8
 8004cd0:	4619      	mov	r1, r3
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff fda1 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8004cd8:	6878      	ldr	r0, [r7, #4]
 8004cda:	f000 f937 	bl	8004f4c <SDMMC_GetCmdResp2>
 8004cde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004ce0:	69fb      	ldr	r3, [r7, #28]
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3720      	adds	r7, #32
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b088      	sub	sp, #32
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	6078      	str	r0, [r7, #4]
 8004cf2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004cfc:	2340      	movs	r3, #64	@ 0x40
 8004cfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d00:	2300      	movs	r3, #0
 8004d02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d08:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d0a:	f107 0308 	add.w	r3, r7, #8
 8004d0e:	4619      	mov	r1, r3
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f7ff fd82 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	2103      	movs	r1, #3
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f000 f99c 	bl	8005058 <SDMMC_GetCmdResp6>
 8004d20:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d22:	69fb      	ldr	r3, [r7, #28]
}
 8004d24:	4618      	mov	r0, r3
 8004d26:	3720      	adds	r7, #32
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}

08004d2c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004d3a:	230d      	movs	r3, #13
 8004d3c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8004d3e:	2340      	movs	r3, #64	@ 0x40
 8004d40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8004d42:	2300      	movs	r3, #0
 8004d44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8004d46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d4a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8004d4c:	f107 0308 	add.w	r3, r7, #8
 8004d50:	4619      	mov	r1, r3
 8004d52:	6878      	ldr	r0, [r7, #4]
 8004d54:	f7ff fd61 	bl	800481a <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8004d58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d5c:	210d      	movs	r1, #13
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f000 f806 	bl	8004d70 <SDMMC_GetCmdResp1>
 8004d64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d66:	69fb      	ldr	r3, [r7, #28]
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3720      	adds	r7, #32
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b088      	sub	sp, #32
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004d7e:	4b70      	ldr	r3, [pc, #448]	@ (8004f40 <SDMMC_GetCmdResp1+0x1d0>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a70      	ldr	r2, [pc, #448]	@ (8004f44 <SDMMC_GetCmdResp1+0x1d4>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	0a5a      	lsrs	r2, r3, #9
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	fb02 f303 	mul.w	r3, r2, r3
 8004d90:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	1e5a      	subs	r2, r3, #1
 8004d96:	61fa      	str	r2, [r7, #28]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d102      	bne.n	8004da2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004d9c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004da0:	e0c9      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004da6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d0ef      	beq.n	8004d92 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d1ea      	bne.n	8004d92 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d004      	beq.n	8004dd2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	2204      	movs	r2, #4
 8004dcc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004dce:	2304      	movs	r3, #4
 8004dd0:	e0b1      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d004      	beq.n	8004de8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2201      	movs	r2, #1
 8004de2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e0a6      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	22c5      	movs	r2, #197	@ 0xc5
 8004dec:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8004dee:	68f8      	ldr	r0, [r7, #12]
 8004df0:	f7ff fd3d 	bl	800486e <SDIO_GetCommandResponse>
 8004df4:	4603      	mov	r3, r0
 8004df6:	461a      	mov	r2, r3
 8004df8:	7afb      	ldrb	r3, [r7, #11]
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d001      	beq.n	8004e02 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e099      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8004e02:	2100      	movs	r1, #0
 8004e04:	68f8      	ldr	r0, [r7, #12]
 8004e06:	f7ff fd3f 	bl	8004888 <SDIO_GetResponse>
 8004e0a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4b4e      	ldr	r3, [pc, #312]	@ (8004f48 <SDMMC_GetCmdResp1+0x1d8>)
 8004e10:	4013      	ands	r3, r2
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d101      	bne.n	8004e1a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e08d      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	da02      	bge.n	8004e26 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004e20:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004e24:	e087      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004e26:	697b      	ldr	r3, [r7, #20]
 8004e28:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d001      	beq.n	8004e34 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004e30:	2340      	movs	r3, #64	@ 0x40
 8004e32:	e080      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004e3e:	2380      	movs	r3, #128	@ 0x80
 8004e40:	e079      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004e4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004e50:	e071      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004e5c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004e60:	e069      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d002      	beq.n	8004e72 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004e6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004e70:	e061      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004e7c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004e80:	e059      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004e90:	e051      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d002      	beq.n	8004ea2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004e9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004ea0:	e049      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004eac:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004eb0:	e041      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004ebc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ec0:	e039      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d002      	beq.n	8004ed2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004ecc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004ed0:	e031      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004edc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8004ee0:	e029      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d002      	beq.n	8004ef2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004eec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004ef0:	e021      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004efc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8004f00:	e019      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004f0c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8004f10:	e011      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004f1c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004f20:	e009      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004f2c:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 8004f30:	e001      	b.n	8004f36 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004f32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3720      	adds	r7, #32
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000004 	.word	0x20000004
 8004f44:	10624dd3 	.word	0x10624dd3
 8004f48:	fdffe008 	.word	0xfdffe008

08004f4c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8004f4c:	b480      	push	{r7}
 8004f4e:	b085      	sub	sp, #20
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004f54:	4b1f      	ldr	r3, [pc, #124]	@ (8004fd4 <SDMMC_GetCmdResp2+0x88>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a1f      	ldr	r2, [pc, #124]	@ (8004fd8 <SDMMC_GetCmdResp2+0x8c>)
 8004f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5e:	0a5b      	lsrs	r3, r3, #9
 8004f60:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f64:	fb02 f303 	mul.w	r3, r2, r3
 8004f68:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	1e5a      	subs	r2, r3, #1
 8004f6e:	60fa      	str	r2, [r7, #12]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d102      	bne.n	8004f7a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004f74:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004f78:	e026      	b.n	8004fc8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f7e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d0ef      	beq.n	8004f6a <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1ea      	bne.n	8004f6a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f98:	f003 0304 	and.w	r3, r3, #4
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d004      	beq.n	8004faa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2204      	movs	r2, #4
 8004fa4:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004fa6:	2304      	movs	r3, #4
 8004fa8:	e00e      	b.n	8004fc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004fae:	f003 0301 	and.w	r3, r3, #1
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d004      	beq.n	8004fc0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e003      	b.n	8004fc8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	22c5      	movs	r2, #197	@ 0xc5
 8004fc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 8004fc6:	2300      	movs	r3, #0
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3714      	adds	r7, #20
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	20000004 	.word	0x20000004
 8004fd8:	10624dd3 	.word	0x10624dd3

08004fdc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b085      	sub	sp, #20
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8004fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8005050 <SDMMC_GetCmdResp3+0x74>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a1a      	ldr	r2, [pc, #104]	@ (8005054 <SDMMC_GetCmdResp3+0x78>)
 8004fea:	fba2 2303 	umull	r2, r3, r2, r3
 8004fee:	0a5b      	lsrs	r3, r3, #9
 8004ff0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ff4:	fb02 f303 	mul.w	r3, r2, r3
 8004ff8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	1e5a      	subs	r2, r3, #1
 8004ffe:	60fa      	str	r2, [r7, #12]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005004:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005008:	e01b      	b.n	8005042 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800500e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005016:	2b00      	cmp	r3, #0
 8005018:	d0ef      	beq.n	8004ffa <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1ea      	bne.n	8004ffa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005028:	f003 0304 	and.w	r3, r3, #4
 800502c:	2b00      	cmp	r3, #0
 800502e:	d004      	beq.n	800503a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2204      	movs	r2, #4
 8005034:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005036:	2304      	movs	r3, #4
 8005038:	e003      	b.n	8005042 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	22c5      	movs	r2, #197	@ 0xc5
 800503e:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	20000004 	.word	0x20000004
 8005054:	10624dd3 	.word	0x10624dd3

08005058 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b088      	sub	sp, #32
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	460b      	mov	r3, r1
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005066:	4b35      	ldr	r3, [pc, #212]	@ (800513c <SDMMC_GetCmdResp6+0xe4>)
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a35      	ldr	r2, [pc, #212]	@ (8005140 <SDMMC_GetCmdResp6+0xe8>)
 800506c:	fba2 2303 	umull	r2, r3, r2, r3
 8005070:	0a5b      	lsrs	r3, r3, #9
 8005072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005076:	fb02 f303 	mul.w	r3, r2, r3
 800507a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	1e5a      	subs	r2, r3, #1
 8005080:	61fa      	str	r2, [r7, #28]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d102      	bne.n	800508c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005086:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800508a:	e052      	b.n	8005132 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005090:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8005098:	2b00      	cmp	r3, #0
 800509a:	d0ef      	beq.n	800507c <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1ea      	bne.n	800507c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050aa:	f003 0304 	and.w	r3, r3, #4
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d004      	beq.n	80050bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2204      	movs	r2, #4
 80050b6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050b8:	2304      	movs	r3, #4
 80050ba:	e03a      	b.n	8005132 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050c0:	f003 0301 	and.w	r3, r3, #1
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d004      	beq.n	80050d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e02f      	b.n	8005132 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80050d2:	68f8      	ldr	r0, [r7, #12]
 80050d4:	f7ff fbcb 	bl	800486e <SDIO_GetCommandResponse>
 80050d8:	4603      	mov	r3, r0
 80050da:	461a      	mov	r2, r3
 80050dc:	7afb      	ldrb	r3, [r7, #11]
 80050de:	4293      	cmp	r3, r2
 80050e0:	d001      	beq.n	80050e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80050e2:	2301      	movs	r3, #1
 80050e4:	e025      	b.n	8005132 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	22c5      	movs	r2, #197	@ 0xc5
 80050ea:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80050ec:	2100      	movs	r1, #0
 80050ee:	68f8      	ldr	r0, [r7, #12]
 80050f0:	f7ff fbca 	bl	8004888 <SDIO_GetResponse>
 80050f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d106      	bne.n	800510e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	0c1b      	lsrs	r3, r3, #16
 8005104:	b29a      	uxth	r2, r3
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800510a:	2300      	movs	r3, #0
 800510c:	e011      	b.n	8005132 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d002      	beq.n	800511e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005118:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800511c:	e009      	b.n	8005132 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d002      	beq.n	800512e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005128:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800512c:	e001      	b.n	8005132 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800512e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8005132:	4618      	mov	r0, r3
 8005134:	3720      	adds	r7, #32
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000004 	.word	0x20000004
 8005140:	10624dd3 	.word	0x10624dd3

08005144 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005144:	b480      	push	{r7}
 8005146:	b085      	sub	sp, #20
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800514c:	4b22      	ldr	r3, [pc, #136]	@ (80051d8 <SDMMC_GetCmdResp7+0x94>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a22      	ldr	r2, [pc, #136]	@ (80051dc <SDMMC_GetCmdResp7+0x98>)
 8005152:	fba2 2303 	umull	r2, r3, r2, r3
 8005156:	0a5b      	lsrs	r3, r3, #9
 8005158:	f241 3288 	movw	r2, #5000	@ 0x1388
 800515c:	fb02 f303 	mul.w	r3, r2, r3
 8005160:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1e5a      	subs	r2, r3, #1
 8005166:	60fa      	str	r2, [r7, #12]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d102      	bne.n	8005172 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800516c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8005170:	e02c      	b.n	80051cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005176:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 800517e:	2b00      	cmp	r3, #0
 8005180:	d0ef      	beq.n	8005162 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005188:	2b00      	cmp	r3, #0
 800518a:	d1ea      	bne.n	8005162 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d004      	beq.n	80051a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2204      	movs	r2, #4
 800519c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800519e:	2304      	movs	r3, #4
 80051a0:	e014      	b.n	80051cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d004      	beq.n	80051b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e009      	b.n	80051cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80051bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2240      	movs	r2, #64	@ 0x40
 80051c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80051ca:	2300      	movs	r3, #0
  
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3714      	adds	r7, #20
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr
 80051d8:	20000004 	.word	0x20000004
 80051dc:	10624dd3 	.word	0x10624dd3

080051e0 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b085      	sub	sp, #20
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051e8:	4b11      	ldr	r3, [pc, #68]	@ (8005230 <SDMMC_GetCmdError+0x50>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a11      	ldr	r2, [pc, #68]	@ (8005234 <SDMMC_GetCmdError+0x54>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	0a5b      	lsrs	r3, r3, #9
 80051f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051f8:	fb02 f303 	mul.w	r3, r2, r3
 80051fc:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	1e5a      	subs	r2, r3, #1
 8005202:	60fa      	str	r2, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d102      	bne.n	800520e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005208:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800520c:	e009      	b.n	8005222 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005216:	2b00      	cmp	r3, #0
 8005218:	d0f1      	beq.n	80051fe <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	22c5      	movs	r2, #197	@ 0xc5
 800521e:	639a      	str	r2, [r3, #56]	@ 0x38
  
  return SDMMC_ERROR_NONE;
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr
 800522e:	bf00      	nop
 8005230:	20000004 	.word	0x20000004
 8005234:	10624dd3 	.word	0x10624dd3

08005238 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800523c:	4904      	ldr	r1, [pc, #16]	@ (8005250 <MX_FATFS_Init+0x18>)
 800523e:	4805      	ldr	r0, [pc, #20]	@ (8005254 <MX_FATFS_Init+0x1c>)
 8005240:	f000 fe64 	bl	8005f0c <FATFS_LinkDriver>
 8005244:	4603      	mov	r3, r0
 8005246:	461a      	mov	r2, r3
 8005248:	4b03      	ldr	r3, [pc, #12]	@ (8005258 <MX_FATFS_Init+0x20>)
 800524a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800524c:	bf00      	nop
 800524e:	bd80      	pop	{r7, pc}
 8005250:	200003f4 	.word	0x200003f4
 8005254:	08006f58 	.word	0x08006f58
 8005258:	200003f0 	.word	0x200003f0

0800525c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005262:	2300      	movs	r3, #0
 8005264:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005266:	f000 f879 	bl	800535c <BSP_SD_IsDetected>
 800526a:	4603      	mov	r3, r0
 800526c:	2b01      	cmp	r3, #1
 800526e:	d001      	beq.n	8005274 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e012      	b.n	800529a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005274:	480b      	ldr	r0, [pc, #44]	@ (80052a4 <BSP_SD_Init+0x48>)
 8005276:	f7fd f955 	bl	8002524 <HAL_SD_Init>
 800527a:	4603      	mov	r3, r0
 800527c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800527e:	79fb      	ldrb	r3, [r7, #7]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d109      	bne.n	8005298 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005284:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005288:	4806      	ldr	r0, [pc, #24]	@ (80052a4 <BSP_SD_Init+0x48>)
 800528a:	f7fd ff3f 	bl	800310c <HAL_SD_ConfigWideBusOperation>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005298:	79fb      	ldrb	r3, [r7, #7]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3708      	adds	r7, #8
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000088 	.word	0x20000088

080052a8 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b088      	sub	sp, #32
 80052ac:	af02      	add	r7, sp, #8
 80052ae:	60f8      	str	r0, [r7, #12]
 80052b0:	60b9      	str	r1, [r7, #8]
 80052b2:	607a      	str	r2, [r7, #4]
 80052b4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68ba      	ldr	r2, [r7, #8]
 80052c2:	68f9      	ldr	r1, [r7, #12]
 80052c4:	4806      	ldr	r0, [pc, #24]	@ (80052e0 <BSP_SD_ReadBlocks+0x38>)
 80052c6:	f7fd f9dd 	bl	8002684 <HAL_SD_ReadBlocks>
 80052ca:	4603      	mov	r3, r0
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80052d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80052d6:	4618      	mov	r0, r3
 80052d8:	3718      	adds	r7, #24
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
 80052de:	bf00      	nop
 80052e0:	20000088 	.word	0x20000088

080052e4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b088      	sub	sp, #32
 80052e8:	af02      	add	r7, sp, #8
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80052f2:	2300      	movs	r3, #0
 80052f4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	9300      	str	r3, [sp, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	68ba      	ldr	r2, [r7, #8]
 80052fe:	68f9      	ldr	r1, [r7, #12]
 8005300:	4806      	ldr	r0, [pc, #24]	@ (800531c <BSP_SD_WriteBlocks+0x38>)
 8005302:	f7fd fba5 	bl	8002a50 <HAL_SD_WriteBlocks>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005310:	7dfb      	ldrb	r3, [r7, #23]
}
 8005312:	4618      	mov	r0, r3
 8005314:	3718      	adds	r7, #24
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	20000088 	.word	0x20000088

08005320 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005324:	4805      	ldr	r0, [pc, #20]	@ (800533c <BSP_SD_GetCardState+0x1c>)
 8005326:	f7fd ff8b 	bl	8003240 <HAL_SD_GetCardState>
 800532a:	4603      	mov	r3, r0
 800532c:	2b04      	cmp	r3, #4
 800532e:	bf14      	ite	ne
 8005330:	2301      	movne	r3, #1
 8005332:	2300      	moveq	r3, #0
 8005334:	b2db      	uxtb	r3, r3
}
 8005336:	4618      	mov	r0, r3
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000088 	.word	0x20000088

08005340 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005348:	6879      	ldr	r1, [r7, #4]
 800534a:	4803      	ldr	r0, [pc, #12]	@ (8005358 <BSP_SD_GetCardInfo+0x18>)
 800534c:	f7fd feb2 	bl	80030b4 <HAL_SD_GetCardInfo>
}
 8005350:	bf00      	nop
 8005352:	3708      	adds	r7, #8
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}
 8005358:	20000088 	.word	0x20000088

0800535c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005362:	2301      	movs	r3, #1
 8005364:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005366:	f000 f80b 	bl	8005380 <BSP_PlatformIsDetected>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d101      	bne.n	8005374 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005370:	2300      	movs	r3, #0
 8005372:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005374:	79fb      	ldrb	r3, [r7, #7]
 8005376:	b2db      	uxtb	r3, r3
}
 8005378:	4618      	mov	r0, r3
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005380:	b580      	push	{r7, lr}
 8005382:	b082      	sub	sp, #8
 8005384:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005386:	2301      	movs	r3, #1
 8005388:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800538a:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800538e:	4806      	ldr	r0, [pc, #24]	@ (80053a8 <BSP_PlatformIsDetected+0x28>)
 8005390:	f7fc fbfe 	bl	8001b90 <HAL_GPIO_ReadPin>
 8005394:	4603      	mov	r3, r0
 8005396:	2b00      	cmp	r3, #0
 8005398:	d001      	beq.n	800539e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800539a:	2300      	movs	r3, #0
 800539c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800539e:	79fb      	ldrb	r3, [r7, #7]
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3708      	adds	r7, #8
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	40020000 	.word	0x40020000

080053ac <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b082      	sub	sp, #8
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	4603      	mov	r3, r0
 80053b4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80053b6:	4b0b      	ldr	r3, [pc, #44]	@ (80053e4 <SD_CheckStatus+0x38>)
 80053b8:	2201      	movs	r2, #1
 80053ba:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80053bc:	f7ff ffb0 	bl	8005320 <BSP_SD_GetCardState>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d107      	bne.n	80053d6 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80053c6:	4b07      	ldr	r3, [pc, #28]	@ (80053e4 <SD_CheckStatus+0x38>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	b2da      	uxtb	r2, r3
 80053d2:	4b04      	ldr	r3, [pc, #16]	@ (80053e4 <SD_CheckStatus+0x38>)
 80053d4:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80053d6:	4b03      	ldr	r3, [pc, #12]	@ (80053e4 <SD_CheckStatus+0x38>)
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	b2db      	uxtb	r3, r3
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3708      	adds	r7, #8
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}
 80053e4:	2000000d 	.word	0x2000000d

080053e8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	4603      	mov	r3, r0
 80053f0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80053f2:	4b0b      	ldr	r3, [pc, #44]	@ (8005420 <SD_initialize+0x38>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80053f8:	f7ff ff30 	bl	800525c <BSP_SD_Init>
 80053fc:	4603      	mov	r3, r0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d107      	bne.n	8005412 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005402:	79fb      	ldrb	r3, [r7, #7]
 8005404:	4618      	mov	r0, r3
 8005406:	f7ff ffd1 	bl	80053ac <SD_CheckStatus>
 800540a:	4603      	mov	r3, r0
 800540c:	461a      	mov	r2, r3
 800540e:	4b04      	ldr	r3, [pc, #16]	@ (8005420 <SD_initialize+0x38>)
 8005410:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005412:	4b03      	ldr	r3, [pc, #12]	@ (8005420 <SD_initialize+0x38>)
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	b2db      	uxtb	r3, r3
}
 8005418:	4618      	mov	r0, r3
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}
 8005420:	2000000d 	.word	0x2000000d

08005424 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b082      	sub	sp, #8
 8005428:	af00      	add	r7, sp, #0
 800542a:	4603      	mov	r3, r0
 800542c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800542e:	79fb      	ldrb	r3, [r7, #7]
 8005430:	4618      	mov	r0, r3
 8005432:	f7ff ffbb 	bl	80053ac <SD_CheckStatus>
 8005436:	4603      	mov	r3, r0
}
 8005438:	4618      	mov	r0, r3
 800543a:	3708      	adds	r7, #8
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}

08005440 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b086      	sub	sp, #24
 8005444:	af00      	add	r7, sp, #0
 8005446:	60b9      	str	r1, [r7, #8]
 8005448:	607a      	str	r2, [r7, #4]
 800544a:	603b      	str	r3, [r7, #0]
 800544c:	4603      	mov	r3, r0
 800544e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005450:	2301      	movs	r3, #1
 8005452:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005454:	f04f 33ff 	mov.w	r3, #4294967295
 8005458:	683a      	ldr	r2, [r7, #0]
 800545a:	6879      	ldr	r1, [r7, #4]
 800545c:	68b8      	ldr	r0, [r7, #8]
 800545e:	f7ff ff23 	bl	80052a8 <BSP_SD_ReadBlocks>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d107      	bne.n	8005478 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005468:	bf00      	nop
 800546a:	f7ff ff59 	bl	8005320 <BSP_SD_GetCardState>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d1fa      	bne.n	800546a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005474:	2300      	movs	r3, #0
 8005476:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005478:	7dfb      	ldrb	r3, [r7, #23]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3718      	adds	r7, #24
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b086      	sub	sp, #24
 8005486:	af00      	add	r7, sp, #0
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	607a      	str	r2, [r7, #4]
 800548c:	603b      	str	r3, [r7, #0]
 800548e:	4603      	mov	r3, r0
 8005490:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005496:	f04f 33ff 	mov.w	r3, #4294967295
 800549a:	683a      	ldr	r2, [r7, #0]
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	68b8      	ldr	r0, [r7, #8]
 80054a0:	f7ff ff20 	bl	80052e4 <BSP_SD_WriteBlocks>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d107      	bne.n	80054ba <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80054aa:	bf00      	nop
 80054ac:	f7ff ff38 	bl	8005320 <BSP_SD_GetCardState>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d1fa      	bne.n	80054ac <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80054ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3718      	adds	r7, #24
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b08c      	sub	sp, #48	@ 0x30
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	603a      	str	r2, [r7, #0]
 80054ce:	71fb      	strb	r3, [r7, #7]
 80054d0:	460b      	mov	r3, r1
 80054d2:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80054da:	4b25      	ldr	r3, [pc, #148]	@ (8005570 <SD_ioctl+0xac>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	f003 0301 	and.w	r3, r3, #1
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d001      	beq.n	80054ec <SD_ioctl+0x28>
 80054e8:	2303      	movs	r3, #3
 80054ea:	e03c      	b.n	8005566 <SD_ioctl+0xa2>

  switch (cmd)
 80054ec:	79bb      	ldrb	r3, [r7, #6]
 80054ee:	2b03      	cmp	r3, #3
 80054f0:	d834      	bhi.n	800555c <SD_ioctl+0x98>
 80054f2:	a201      	add	r2, pc, #4	@ (adr r2, 80054f8 <SD_ioctl+0x34>)
 80054f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f8:	08005509 	.word	0x08005509
 80054fc:	08005511 	.word	0x08005511
 8005500:	08005529 	.word	0x08005529
 8005504:	08005543 	.word	0x08005543
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005508:	2300      	movs	r3, #0
 800550a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800550e:	e028      	b.n	8005562 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005510:	f107 030c 	add.w	r3, r7, #12
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff ff13 	bl	8005340 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800551a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005520:	2300      	movs	r3, #0
 8005522:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005526:	e01c      	b.n	8005562 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005528:	f107 030c 	add.w	r3, r7, #12
 800552c:	4618      	mov	r0, r3
 800552e:	f7ff ff07 	bl	8005340 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005534:	b29a      	uxth	r2, r3
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 8005540:	e00f      	b.n	8005562 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005542:	f107 030c 	add.w	r3, r7, #12
 8005546:	4618      	mov	r0, r3
 8005548:	f7ff fefa 	bl	8005340 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800554c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800554e:	0a5a      	lsrs	r2, r3, #9
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005554:	2300      	movs	r3, #0
 8005556:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    break;
 800555a:	e002      	b.n	8005562 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800555c:	2304      	movs	r3, #4
 800555e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  return res;
 8005562:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8005566:	4618      	mov	r0, r3
 8005568:	3730      	adds	r7, #48	@ 0x30
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	2000000d 	.word	0x2000000d

08005574 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	4603      	mov	r3, r0
 800557c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800557e:	79fb      	ldrb	r3, [r7, #7]
 8005580:	4a08      	ldr	r2, [pc, #32]	@ (80055a4 <disk_status+0x30>)
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	685b      	ldr	r3, [r3, #4]
 800558a:	79fa      	ldrb	r2, [r7, #7]
 800558c:	4905      	ldr	r1, [pc, #20]	@ (80055a4 <disk_status+0x30>)
 800558e:	440a      	add	r2, r1
 8005590:	7a12      	ldrb	r2, [r2, #8]
 8005592:	4610      	mov	r0, r2
 8005594:	4798      	blx	r3
 8005596:	4603      	mov	r3, r0
 8005598:	73fb      	strb	r3, [r7, #15]
  return stat;
 800559a:	7bfb      	ldrb	r3, [r7, #15]
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}
 80055a4:	20000420 	.word	0x20000420

080055a8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b084      	sub	sp, #16
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	4603      	mov	r3, r0
 80055b0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80055b6:	79fb      	ldrb	r3, [r7, #7]
 80055b8:	4a0e      	ldr	r2, [pc, #56]	@ (80055f4 <disk_initialize+0x4c>)
 80055ba:	5cd3      	ldrb	r3, [r2, r3]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d114      	bne.n	80055ea <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80055c0:	79fb      	ldrb	r3, [r7, #7]
 80055c2:	4a0c      	ldr	r2, [pc, #48]	@ (80055f4 <disk_initialize+0x4c>)
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	79fa      	ldrb	r2, [r7, #7]
 80055ce:	4909      	ldr	r1, [pc, #36]	@ (80055f4 <disk_initialize+0x4c>)
 80055d0:	440a      	add	r2, r1
 80055d2:	7a12      	ldrb	r2, [r2, #8]
 80055d4:	4610      	mov	r0, r2
 80055d6:	4798      	blx	r3
 80055d8:	4603      	mov	r3, r0
 80055da:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 80055dc:	7bfb      	ldrb	r3, [r7, #15]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d103      	bne.n	80055ea <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 80055e2:	79fb      	ldrb	r3, [r7, #7]
 80055e4:	4a03      	ldr	r2, [pc, #12]	@ (80055f4 <disk_initialize+0x4c>)
 80055e6:	2101      	movs	r1, #1
 80055e8:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 80055ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3710      	adds	r7, #16
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	20000420 	.word	0x20000420

080055f8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80055f8:	b590      	push	{r4, r7, lr}
 80055fa:	b087      	sub	sp, #28
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	60b9      	str	r1, [r7, #8]
 8005600:	607a      	str	r2, [r7, #4]
 8005602:	603b      	str	r3, [r7, #0]
 8005604:	4603      	mov	r3, r0
 8005606:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	4a0a      	ldr	r2, [pc, #40]	@ (8005634 <disk_read+0x3c>)
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	4413      	add	r3, r2
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	689c      	ldr	r4, [r3, #8]
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	4a07      	ldr	r2, [pc, #28]	@ (8005634 <disk_read+0x3c>)
 8005618:	4413      	add	r3, r2
 800561a:	7a18      	ldrb	r0, [r3, #8]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	68b9      	ldr	r1, [r7, #8]
 8005622:	47a0      	blx	r4
 8005624:	4603      	mov	r3, r0
 8005626:	75fb      	strb	r3, [r7, #23]
  return res;
 8005628:	7dfb      	ldrb	r3, [r7, #23]
}
 800562a:	4618      	mov	r0, r3
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	bd90      	pop	{r4, r7, pc}
 8005632:	bf00      	nop
 8005634:	20000420 	.word	0x20000420

08005638 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005638:	b590      	push	{r4, r7, lr}
 800563a:	b087      	sub	sp, #28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60b9      	str	r1, [r7, #8]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	603b      	str	r3, [r7, #0]
 8005644:	4603      	mov	r3, r0
 8005646:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005648:	7bfb      	ldrb	r3, [r7, #15]
 800564a:	4a0a      	ldr	r2, [pc, #40]	@ (8005674 <disk_write+0x3c>)
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	68dc      	ldr	r4, [r3, #12]
 8005654:	7bfb      	ldrb	r3, [r7, #15]
 8005656:	4a07      	ldr	r2, [pc, #28]	@ (8005674 <disk_write+0x3c>)
 8005658:	4413      	add	r3, r2
 800565a:	7a18      	ldrb	r0, [r3, #8]
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	687a      	ldr	r2, [r7, #4]
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	47a0      	blx	r4
 8005664:	4603      	mov	r3, r0
 8005666:	75fb      	strb	r3, [r7, #23]
  return res;
 8005668:	7dfb      	ldrb	r3, [r7, #23]
}
 800566a:	4618      	mov	r0, r3
 800566c:	371c      	adds	r7, #28
 800566e:	46bd      	mov	sp, r7
 8005670:	bd90      	pop	{r4, r7, pc}
 8005672:	bf00      	nop
 8005674:	20000420 	.word	0x20000420

08005678 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005678:	b480      	push	{r7}
 800567a:	b085      	sub	sp, #20
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	3301      	adds	r3, #1
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005688:	89fb      	ldrh	r3, [r7, #14]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	b21a      	sxth	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	b21b      	sxth	r3, r3
 8005694:	4313      	orrs	r3, r2
 8005696:	b21b      	sxth	r3, r3
 8005698:	81fb      	strh	r3, [r7, #14]
	return rv;
 800569a:	89fb      	ldrh	r3, [r7, #14]
}
 800569c:	4618      	mov	r0, r3
 800569e:	3714      	adds	r7, #20
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80056a8:	b480      	push	{r7}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	3303      	adds	r3, #3
 80056b4:	781b      	ldrb	r3, [r3, #0]
 80056b6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	021b      	lsls	r3, r3, #8
 80056bc:	687a      	ldr	r2, [r7, #4]
 80056be:	3202      	adds	r2, #2
 80056c0:	7812      	ldrb	r2, [r2, #0]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	3201      	adds	r2, #1
 80056ce:	7812      	ldrb	r2, [r2, #0]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	021b      	lsls	r3, r3, #8
 80056d8:	687a      	ldr	r2, [r7, #4]
 80056da:	7812      	ldrb	r2, [r2, #0]
 80056dc:	4313      	orrs	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
	return rv;
 80056e0:	68fb      	ldr	r3, [r7, #12]
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3714      	adds	r7, #20
 80056e6:	46bd      	mov	sp, r7
 80056e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ec:	4770      	bx	lr
	...

080056f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b085      	sub	sp, #20
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80056f8:	2300      	movs	r3, #0
 80056fa:	60fb      	str	r3, [r7, #12]
 80056fc:	e010      	b.n	8005720 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80056fe:	4a0d      	ldr	r2, [pc, #52]	@ (8005734 <clear_lock+0x44>)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	011b      	lsls	r3, r3, #4
 8005704:	4413      	add	r3, r2
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d105      	bne.n	800571a <clear_lock+0x2a>
 800570e:	4a09      	ldr	r2, [pc, #36]	@ (8005734 <clear_lock+0x44>)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	4413      	add	r3, r2
 8005716:	2200      	movs	r2, #0
 8005718:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3301      	adds	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2b01      	cmp	r3, #1
 8005724:	d9eb      	bls.n	80056fe <clear_lock+0xe>
	}
}
 8005726:	bf00      	nop
 8005728:	bf00      	nop
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr
 8005734:	20000400 	.word	0x20000400

08005738 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b086      	sub	sp, #24
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005740:	2300      	movs	r3, #0
 8005742:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	78db      	ldrb	r3, [r3, #3]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d034      	beq.n	80057b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005750:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	7858      	ldrb	r0, [r3, #1]
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800575c:	2301      	movs	r3, #1
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	f7ff ff6a 	bl	8005638 <disk_write>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d002      	beq.n	8005770 <sync_window+0x38>
			res = FR_DISK_ERR;
 800576a:	2301      	movs	r3, #1
 800576c:	73fb      	strb	r3, [r7, #15]
 800576e:	e022      	b.n	80057b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	1ad2      	subs	r2, r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	699b      	ldr	r3, [r3, #24]
 8005782:	429a      	cmp	r2, r3
 8005784:	d217      	bcs.n	80057b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	789b      	ldrb	r3, [r3, #2]
 800578a:	613b      	str	r3, [r7, #16]
 800578c:	e010      	b.n	80057b0 <sync_window+0x78>
					wsect += fs->fsize;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4413      	add	r3, r2
 8005796:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	7858      	ldrb	r0, [r3, #1]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80057a2:	2301      	movs	r3, #1
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	f7ff ff47 	bl	8005638 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	3b01      	subs	r3, #1
 80057ae:	613b      	str	r3, [r7, #16]
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b01      	cmp	r3, #1
 80057b4:	d8eb      	bhi.n	800578e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80057b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057b8:	4618      	mov	r0, r3
 80057ba:	3718      	adds	r7, #24
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}

080057c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d2:	683a      	ldr	r2, [r7, #0]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	d01b      	beq.n	8005810 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f7ff ffad 	bl	8005738 <sync_window>
 80057de:	4603      	mov	r3, r0
 80057e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80057e2:	7bfb      	ldrb	r3, [r7, #15]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d113      	bne.n	8005810 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	7858      	ldrb	r0, [r3, #1]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80057f2:	2301      	movs	r3, #1
 80057f4:	683a      	ldr	r2, [r7, #0]
 80057f6:	f7ff feff 	bl	80055f8 <disk_read>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d004      	beq.n	800580a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005800:	f04f 33ff 	mov.w	r3, #4294967295
 8005804:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	683a      	ldr	r2, [r7, #0]
 800580e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 8005810:	7bfb      	ldrb	r3, [r7, #15]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3710      	adds	r7, #16
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800581a:	b480      	push	{r7}
 800581c:	b087      	sub	sp, #28
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005822:	f04f 33ff 	mov.w	r3, #4294967295
 8005826:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d031      	beq.n	8005894 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	617b      	str	r3, [r7, #20]
 8005836:	e002      	b.n	800583e <get_ldnumber+0x24>
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	3301      	adds	r3, #1
 800583c:	617b      	str	r3, [r7, #20]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	781b      	ldrb	r3, [r3, #0]
 8005842:	2b20      	cmp	r3, #32
 8005844:	d903      	bls.n	800584e <get_ldnumber+0x34>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	2b3a      	cmp	r3, #58	@ 0x3a
 800584c:	d1f4      	bne.n	8005838 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b3a      	cmp	r3, #58	@ 0x3a
 8005854:	d11c      	bne.n	8005890 <get_ldnumber+0x76>
			tp = *path;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	60fa      	str	r2, [r7, #12]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	3b30      	subs	r3, #48	@ 0x30
 8005866:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2b09      	cmp	r3, #9
 800586c:	d80e      	bhi.n	800588c <get_ldnumber+0x72>
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	429a      	cmp	r2, r3
 8005874:	d10a      	bne.n	800588c <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d107      	bne.n	800588c <get_ldnumber+0x72>
					vol = (int)i;
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	3301      	adds	r3, #1
 8005884:	617b      	str	r3, [r7, #20]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	e002      	b.n	8005896 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005890:	2300      	movs	r3, #0
 8005892:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005894:	693b      	ldr	r3, [r7, #16]
}
 8005896:	4618      	mov	r0, r3
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
	...

080058a4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b082      	sub	sp, #8
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
 80058ac:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	70da      	strb	r2, [r3, #3]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f04f 32ff 	mov.w	r2, #4294967295
 80058ba:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80058bc:	6839      	ldr	r1, [r7, #0]
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7ff ff7e 	bl	80057c0 <move_window>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d001      	beq.n	80058ce <check_fs+0x2a>
 80058ca:	2304      	movs	r3, #4
 80058cc:	e038      	b.n	8005940 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3330      	adds	r3, #48	@ 0x30
 80058d2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80058d6:	4618      	mov	r0, r3
 80058d8:	f7ff fece 	bl	8005678 <ld_word>
 80058dc:	4603      	mov	r3, r0
 80058de:	461a      	mov	r2, r3
 80058e0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d001      	beq.n	80058ec <check_fs+0x48>
 80058e8:	2303      	movs	r3, #3
 80058ea:	e029      	b.n	8005940 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80058f2:	2be9      	cmp	r3, #233	@ 0xe9
 80058f4:	d009      	beq.n	800590a <check_fs+0x66>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80058fc:	2beb      	cmp	r3, #235	@ 0xeb
 80058fe:	d11e      	bne.n	800593e <check_fs+0x9a>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8005906:	2b90      	cmp	r3, #144	@ 0x90
 8005908:	d119      	bne.n	800593e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	3330      	adds	r3, #48	@ 0x30
 800590e:	3336      	adds	r3, #54	@ 0x36
 8005910:	4618      	mov	r0, r3
 8005912:	f7ff fec9 	bl	80056a8 <ld_dword>
 8005916:	4603      	mov	r3, r0
 8005918:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800591c:	4a0a      	ldr	r2, [pc, #40]	@ (8005948 <check_fs+0xa4>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d101      	bne.n	8005926 <check_fs+0x82>
 8005922:	2300      	movs	r3, #0
 8005924:	e00c      	b.n	8005940 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	3330      	adds	r3, #48	@ 0x30
 800592a:	3352      	adds	r3, #82	@ 0x52
 800592c:	4618      	mov	r0, r3
 800592e:	f7ff febb 	bl	80056a8 <ld_dword>
 8005932:	4603      	mov	r3, r0
 8005934:	4a05      	ldr	r2, [pc, #20]	@ (800594c <check_fs+0xa8>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d101      	bne.n	800593e <check_fs+0x9a>
 800593a:	2300      	movs	r3, #0
 800593c:	e000      	b.n	8005940 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800593e:	2302      	movs	r3, #2
}
 8005940:	4618      	mov	r0, r3
 8005942:	3708      	adds	r7, #8
 8005944:	46bd      	mov	sp, r7
 8005946:	bd80      	pop	{r7, pc}
 8005948:	00544146 	.word	0x00544146
 800594c:	33544146 	.word	0x33544146

08005950 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b096      	sub	sp, #88	@ 0x58
 8005954:	af00      	add	r7, sp, #0
 8005956:	60f8      	str	r0, [r7, #12]
 8005958:	60b9      	str	r1, [r7, #8]
 800595a:	4613      	mov	r3, r2
 800595c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800595e:	68bb      	ldr	r3, [r7, #8]
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff ff58 	bl	800581a <get_ldnumber>
 800596a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800596c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800596e:	2b00      	cmp	r3, #0
 8005970:	da01      	bge.n	8005976 <find_volume+0x26>
 8005972:	230b      	movs	r3, #11
 8005974:	e22d      	b.n	8005dd2 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005976:	4aa1      	ldr	r2, [pc, #644]	@ (8005bfc <find_volume+0x2ac>)
 8005978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800597a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800597e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <find_volume+0x3a>
 8005986:	230c      	movs	r3, #12
 8005988:	e223      	b.n	8005dd2 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800598e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005990:	79fb      	ldrb	r3, [r7, #7]
 8005992:	f023 0301 	bic.w	r3, r3, #1
 8005996:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d01a      	beq.n	80059d6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80059a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a2:	785b      	ldrb	r3, [r3, #1]
 80059a4:	4618      	mov	r0, r3
 80059a6:	f7ff fde5 	bl	8005574 <disk_status>
 80059aa:	4603      	mov	r3, r0
 80059ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80059b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059b4:	f003 0301 	and.w	r3, r3, #1
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d10c      	bne.n	80059d6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80059bc:	79fb      	ldrb	r3, [r7, #7]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d007      	beq.n	80059d2 <find_volume+0x82>
 80059c2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d001      	beq.n	80059d2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80059ce:	230a      	movs	r3, #10
 80059d0:	e1ff      	b.n	8005dd2 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 80059d2:	2300      	movs	r3, #0
 80059d4:	e1fd      	b.n	8005dd2 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80059d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d8:	2200      	movs	r2, #0
 80059da:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80059dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80059e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	4618      	mov	r0, r3
 80059ea:	f7ff fddd 	bl	80055a8 <disk_initialize>
 80059ee:	4603      	mov	r3, r0
 80059f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80059f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80059f8:	f003 0301 	and.w	r3, r3, #1
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005a00:	2303      	movs	r3, #3
 8005a02:	e1e6      	b.n	8005dd2 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005a04:	79fb      	ldrb	r3, [r7, #7]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d007      	beq.n	8005a1a <find_volume+0xca>
 8005a0a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d001      	beq.n	8005a1a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005a16:	230a      	movs	r3, #10
 8005a18:	e1db      	b.n	8005dd2 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005a1e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005a20:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005a22:	f7ff ff3f 	bl	80058a4 <check_fs>
 8005a26:	4603      	mov	r3, r0
 8005a28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005a2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d149      	bne.n	8005ac8 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a34:	2300      	movs	r3, #0
 8005a36:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a38:	e01e      	b.n	8005a78 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005a48:	4413      	add	r3, r2
 8005a4a:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005a4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a4e:	3304      	adds	r3, #4
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d006      	beq.n	8005a64 <find_volume+0x114>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	3308      	adds	r3, #8
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7ff fe24 	bl	80056a8 <ld_dword>
 8005a60:	4602      	mov	r2, r0
 8005a62:	e000      	b.n	8005a66 <find_volume+0x116>
 8005a64:	2200      	movs	r2, #0
 8005a66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a68:	009b      	lsls	r3, r3, #2
 8005a6a:	3358      	adds	r3, #88	@ 0x58
 8005a6c:	443b      	add	r3, r7
 8005a6e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a74:	3301      	adds	r3, #1
 8005a76:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a7a:	2b03      	cmp	r3, #3
 8005a7c:	d9dd      	bls.n	8005a3a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005a7e:	2300      	movs	r3, #0
 8005a80:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d002      	beq.n	8005a8e <find_volume+0x13e>
 8005a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a8a:	3b01      	subs	r3, #1
 8005a8c:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	3358      	adds	r3, #88	@ 0x58
 8005a94:	443b      	add	r3, r7
 8005a96:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005a9a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005a9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d005      	beq.n	8005aae <find_volume+0x15e>
 8005aa2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005aa4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005aa6:	f7ff fefd 	bl	80058a4 <check_fs>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	e000      	b.n	8005ab0 <find_volume+0x160>
 8005aae:	2303      	movs	r3, #3
 8005ab0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005ab4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d905      	bls.n	8005ac8 <find_volume+0x178>
 8005abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005abe:	3301      	adds	r3, #1
 8005ac0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ac2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ac4:	2b03      	cmp	r3, #3
 8005ac6:	d9e2      	bls.n	8005a8e <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005ac8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005acc:	2b04      	cmp	r3, #4
 8005ace:	d101      	bne.n	8005ad4 <find_volume+0x184>
 8005ad0:	2301      	movs	r3, #1
 8005ad2:	e17e      	b.n	8005dd2 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005ad4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d901      	bls.n	8005ae0 <find_volume+0x190>
 8005adc:	230d      	movs	r3, #13
 8005ade:	e178      	b.n	8005dd2 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ae2:	3330      	adds	r3, #48	@ 0x30
 8005ae4:	330b      	adds	r3, #11
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7ff fdc6 	bl	8005678 <ld_word>
 8005aec:	4603      	mov	r3, r0
 8005aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005af2:	d001      	beq.n	8005af8 <find_volume+0x1a8>
 8005af4:	230d      	movs	r3, #13
 8005af6:	e16c      	b.n	8005dd2 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005afa:	3330      	adds	r3, #48	@ 0x30
 8005afc:	3316      	adds	r3, #22
 8005afe:	4618      	mov	r0, r3
 8005b00:	f7ff fdba 	bl	8005678 <ld_word>
 8005b04:	4603      	mov	r3, r0
 8005b06:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d106      	bne.n	8005b1c <find_volume+0x1cc>
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b10:	3330      	adds	r3, #48	@ 0x30
 8005b12:	3324      	adds	r3, #36	@ 0x24
 8005b14:	4618      	mov	r0, r3
 8005b16:	f7ff fdc7 	bl	80056a8 <ld_dword>
 8005b1a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b20:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005b22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b24:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 8005b28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005b2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b2e:	789b      	ldrb	r3, [r3, #2]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d005      	beq.n	8005b40 <find_volume+0x1f0>
 8005b34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b36:	789b      	ldrb	r3, [r3, #2]
 8005b38:	2b02      	cmp	r3, #2
 8005b3a:	d001      	beq.n	8005b40 <find_volume+0x1f0>
 8005b3c:	230d      	movs	r3, #13
 8005b3e:	e148      	b.n	8005dd2 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005b40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b42:	789b      	ldrb	r3, [r3, #2]
 8005b44:	461a      	mov	r2, r3
 8005b46:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b48:	fb02 f303 	mul.w	r3, r2, r3
 8005b4c:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b50:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b54:	461a      	mov	r2, r3
 8005b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b58:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005b5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b5c:	895b      	ldrh	r3, [r3, #10]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d008      	beq.n	8005b74 <find_volume+0x224>
 8005b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b64:	895b      	ldrh	r3, [r3, #10]
 8005b66:	461a      	mov	r2, r3
 8005b68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b6a:	895b      	ldrh	r3, [r3, #10]
 8005b6c:	3b01      	subs	r3, #1
 8005b6e:	4013      	ands	r3, r2
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d001      	beq.n	8005b78 <find_volume+0x228>
 8005b74:	230d      	movs	r3, #13
 8005b76:	e12c      	b.n	8005dd2 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b7a:	3330      	adds	r3, #48	@ 0x30
 8005b7c:	3311      	adds	r3, #17
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f7ff fd7a 	bl	8005678 <ld_word>
 8005b84:	4603      	mov	r3, r0
 8005b86:	461a      	mov	r2, r3
 8005b88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b8e:	891b      	ldrh	r3, [r3, #8]
 8005b90:	f003 030f 	and.w	r3, r3, #15
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <find_volume+0x24e>
 8005b9a:	230d      	movs	r3, #13
 8005b9c:	e119      	b.n	8005dd2 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba0:	3330      	adds	r3, #48	@ 0x30
 8005ba2:	3313      	adds	r3, #19
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7ff fd67 	bl	8005678 <ld_word>
 8005baa:	4603      	mov	r3, r0
 8005bac:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005bae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d106      	bne.n	8005bc2 <find_volume+0x272>
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb6:	3330      	adds	r3, #48	@ 0x30
 8005bb8:	3320      	adds	r3, #32
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff fd74 	bl	80056a8 <ld_dword>
 8005bc0:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc4:	3330      	adds	r3, #48	@ 0x30
 8005bc6:	330e      	adds	r3, #14
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff fd55 	bl	8005678 <ld_word>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005bd2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <find_volume+0x28c>
 8005bd8:	230d      	movs	r3, #13
 8005bda:	e0fa      	b.n	8005dd2 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005bdc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005bde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005be0:	4413      	add	r3, r2
 8005be2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005be4:	8912      	ldrh	r2, [r2, #8]
 8005be6:	0912      	lsrs	r2, r2, #4
 8005be8:	b292      	uxth	r2, r2
 8005bea:	4413      	add	r3, r2
 8005bec:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005bee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bf2:	429a      	cmp	r2, r3
 8005bf4:	d204      	bcs.n	8005c00 <find_volume+0x2b0>
 8005bf6:	230d      	movs	r3, #13
 8005bf8:	e0eb      	b.n	8005dd2 <find_volume+0x482>
 8005bfa:	bf00      	nop
 8005bfc:	200003f8 	.word	0x200003f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005c00:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c04:	1ad3      	subs	r3, r2, r3
 8005c06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c08:	8952      	ldrh	r2, [r2, #10]
 8005c0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005c0e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <find_volume+0x2ca>
 8005c16:	230d      	movs	r3, #13
 8005c18:	e0db      	b.n	8005dd2 <find_volume+0x482>
		fmt = FS_FAT32;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005c26:	4293      	cmp	r3, r2
 8005c28:	d802      	bhi.n	8005c30 <find_volume+0x2e0>
 8005c2a:	2302      	movs	r3, #2
 8005c2c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c32:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d802      	bhi.n	8005c40 <find_volume+0x2f0>
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	1c9a      	adds	r2, r3, #2
 8005c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c46:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8005c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c4c:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005c4e:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005c50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c52:	441a      	add	r2, r3
 8005c54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c56:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8005c58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5c:	441a      	add	r2, r3
 8005c5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c60:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 8005c62:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	d11e      	bne.n	8005ca8 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005c6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c6c:	3330      	adds	r3, #48	@ 0x30
 8005c6e:	332a      	adds	r3, #42	@ 0x2a
 8005c70:	4618      	mov	r0, r3
 8005c72:	f7ff fd01 	bl	8005678 <ld_word>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d001      	beq.n	8005c80 <find_volume+0x330>
 8005c7c:	230d      	movs	r3, #13
 8005c7e:	e0a8      	b.n	8005dd2 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c82:	891b      	ldrh	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d001      	beq.n	8005c8c <find_volume+0x33c>
 8005c88:	230d      	movs	r3, #13
 8005c8a:	e0a2      	b.n	8005dd2 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8e:	3330      	adds	r3, #48	@ 0x30
 8005c90:	332c      	adds	r3, #44	@ 0x2c
 8005c92:	4618      	mov	r0, r3
 8005c94:	f7ff fd08 	bl	80056a8 <ld_dword>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c9c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca0:	695b      	ldr	r3, [r3, #20]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	647b      	str	r3, [r7, #68]	@ 0x44
 8005ca6:	e01f      	b.n	8005ce8 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8005ca8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005caa:	891b      	ldrh	r3, [r3, #8]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d101      	bne.n	8005cb4 <find_volume+0x364>
 8005cb0:	230d      	movs	r3, #13
 8005cb2:	e08e      	b.n	8005dd2 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb6:	6a1a      	ldr	r2, [r3, #32]
 8005cb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005cba:	441a      	add	r2, r3
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbe:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005cc0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d103      	bne.n	8005cd0 <find_volume+0x380>
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cca:	695b      	ldr	r3, [r3, #20]
 8005ccc:	005b      	lsls	r3, r3, #1
 8005cce:	e00a      	b.n	8005ce6 <find_volume+0x396>
 8005cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	4413      	add	r3, r2
 8005cda:	085a      	lsrs	r2, r3, #1
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	f003 0301 	and.w	r3, r3, #1
 8005ce4:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8005ce6:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8005ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cea:	699a      	ldr	r2, [r3, #24]
 8005cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005cee:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 8005cf2:	0a5b      	lsrs	r3, r3, #9
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d201      	bcs.n	8005cfc <find_volume+0x3ac>
 8005cf8:	230d      	movs	r3, #13
 8005cfa:	e06a      	b.n	8005dd2 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005cfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8005d02:	611a      	str	r2, [r3, #16]
 8005d04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0e:	2280      	movs	r2, #128	@ 0x80
 8005d10:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005d12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d149      	bne.n	8005dae <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1c:	3330      	adds	r3, #48	@ 0x30
 8005d1e:	3330      	adds	r3, #48	@ 0x30
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff fca9 	bl	8005678 <ld_word>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d140      	bne.n	8005dae <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005d2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d2e:	3301      	adds	r3, #1
 8005d30:	4619      	mov	r1, r3
 8005d32:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d34:	f7ff fd44 	bl	80057c0 <move_window>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d137      	bne.n	8005dae <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d40:	2200      	movs	r2, #0
 8005d42:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005d44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d46:	3330      	adds	r3, #48	@ 0x30
 8005d48:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005d4c:	4618      	mov	r0, r3
 8005d4e:	f7ff fc93 	bl	8005678 <ld_word>
 8005d52:	4603      	mov	r3, r0
 8005d54:	461a      	mov	r2, r3
 8005d56:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d127      	bne.n	8005dae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d60:	3330      	adds	r3, #48	@ 0x30
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff fca0 	bl	80056a8 <ld_dword>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	4a1c      	ldr	r2, [pc, #112]	@ (8005ddc <find_volume+0x48c>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d11e      	bne.n	8005dae <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8005d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d72:	3330      	adds	r3, #48	@ 0x30
 8005d74:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005d78:	4618      	mov	r0, r3
 8005d7a:	f7ff fc95 	bl	80056a8 <ld_dword>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	4a17      	ldr	r2, [pc, #92]	@ (8005de0 <find_volume+0x490>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d113      	bne.n	8005dae <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005d86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d88:	3330      	adds	r3, #48	@ 0x30
 8005d8a:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff fc8a 	bl	80056a8 <ld_dword>
 8005d94:	4602      	mov	r2, r0
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005d9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d9c:	3330      	adds	r3, #48	@ 0x30
 8005d9e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fc80 	bl	80056a8 <ld_dword>
 8005da8:	4602      	mov	r2, r0
 8005daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dac:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8005dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005db0:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005db4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8005db6:	4b0b      	ldr	r3, [pc, #44]	@ (8005de4 <find_volume+0x494>)
 8005db8:	881b      	ldrh	r3, [r3, #0]
 8005dba:	3301      	adds	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	4b09      	ldr	r3, [pc, #36]	@ (8005de4 <find_volume+0x494>)
 8005dc0:	801a      	strh	r2, [r3, #0]
 8005dc2:	4b08      	ldr	r3, [pc, #32]	@ (8005de4 <find_volume+0x494>)
 8005dc4:	881a      	ldrh	r2, [r3, #0]
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc8:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8005dca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005dcc:	f7ff fc90 	bl	80056f0 <clear_lock>
#endif
	return FR_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3758      	adds	r7, #88	@ 0x58
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
 8005dda:	bf00      	nop
 8005ddc:	41615252 	.word	0x41615252
 8005de0:	61417272 	.word	0x61417272
 8005de4:	200003fc 	.word	0x200003fc

08005de8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b088      	sub	sp, #32
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	4613      	mov	r3, r2
 8005df4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005dfa:	f107 0310 	add.w	r3, r7, #16
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7ff fd0b 	bl	800581a <get_ldnumber>
 8005e04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005e06:	69fb      	ldr	r3, [r7, #28]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	da01      	bge.n	8005e10 <f_mount+0x28>
 8005e0c:	230b      	movs	r3, #11
 8005e0e:	e02b      	b.n	8005e68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005e10:	4a17      	ldr	r2, [pc, #92]	@ (8005e70 <f_mount+0x88>)
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005e18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d005      	beq.n	8005e2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005e20:	69b8      	ldr	r0, [r7, #24]
 8005e22:	f7ff fc65 	bl	80056f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2200      	movs	r2, #0
 8005e36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005e38:	68fa      	ldr	r2, [r7, #12]
 8005e3a:	490d      	ldr	r1, [pc, #52]	@ (8005e70 <f_mount+0x88>)
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d002      	beq.n	8005e4e <f_mount+0x66>
 8005e48:	79fb      	ldrb	r3, [r7, #7]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d001      	beq.n	8005e52 <f_mount+0x6a>
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e00a      	b.n	8005e68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005e52:	f107 010c 	add.w	r1, r7, #12
 8005e56:	f107 0308 	add.w	r3, r7, #8
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7ff fd77 	bl	8005950 <find_volume>
 8005e62:	4603      	mov	r3, r0
 8005e64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3720      	adds	r7, #32
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}
 8005e70:	200003f8 	.word	0x200003f8

08005e74 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005e74:	b480      	push	{r7}
 8005e76:	b087      	sub	sp, #28
 8005e78:	af00      	add	r7, sp, #0
 8005e7a:	60f8      	str	r0, [r7, #12]
 8005e7c:	60b9      	str	r1, [r7, #8]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005e82:	2301      	movs	r3, #1
 8005e84:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005e86:	2300      	movs	r3, #0
 8005e88:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005e8a:	4b1f      	ldr	r3, [pc, #124]	@ (8005f08 <FATFS_LinkDriverEx+0x94>)
 8005e8c:	7a5b      	ldrb	r3, [r3, #9]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d131      	bne.n	8005ef8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005e94:	4b1c      	ldr	r3, [pc, #112]	@ (8005f08 <FATFS_LinkDriverEx+0x94>)
 8005e96:	7a5b      	ldrb	r3, [r3, #9]
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	461a      	mov	r2, r3
 8005e9c:	4b1a      	ldr	r3, [pc, #104]	@ (8005f08 <FATFS_LinkDriverEx+0x94>)
 8005e9e:	2100      	movs	r1, #0
 8005ea0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005ea2:	4b19      	ldr	r3, [pc, #100]	@ (8005f08 <FATFS_LinkDriverEx+0x94>)
 8005ea4:	7a5b      	ldrb	r3, [r3, #9]
 8005ea6:	b2db      	uxtb	r3, r3
 8005ea8:	4a17      	ldr	r2, [pc, #92]	@ (8005f08 <FATFS_LinkDriverEx+0x94>)
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005eb2:	4b15      	ldr	r3, [pc, #84]	@ (8005f08 <FATFS_LinkDriverEx+0x94>)
 8005eb4:	7a5b      	ldrb	r3, [r3, #9]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	461a      	mov	r2, r3
 8005eba:	4b13      	ldr	r3, [pc, #76]	@ (8005f08 <FATFS_LinkDriverEx+0x94>)
 8005ebc:	4413      	add	r3, r2
 8005ebe:	79fa      	ldrb	r2, [r7, #7]
 8005ec0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005ec2:	4b11      	ldr	r3, [pc, #68]	@ (8005f08 <FATFS_LinkDriverEx+0x94>)
 8005ec4:	7a5b      	ldrb	r3, [r3, #9]
 8005ec6:	b2db      	uxtb	r3, r3
 8005ec8:	1c5a      	adds	r2, r3, #1
 8005eca:	b2d1      	uxtb	r1, r2
 8005ecc:	4a0e      	ldr	r2, [pc, #56]	@ (8005f08 <FATFS_LinkDriverEx+0x94>)
 8005ece:	7251      	strb	r1, [r2, #9]
 8005ed0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005ed2:	7dbb      	ldrb	r3, [r7, #22]
 8005ed4:	3330      	adds	r3, #48	@ 0x30
 8005ed6:	b2da      	uxtb	r2, r3
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	3301      	adds	r3, #1
 8005ee0:	223a      	movs	r2, #58	@ 0x3a
 8005ee2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	3302      	adds	r3, #2
 8005ee8:	222f      	movs	r2, #47	@ 0x2f
 8005eea:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	3303      	adds	r3, #3
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005ef8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	20000420 	.word	0x20000420

08005f0c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
 8005f14:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005f16:	2200      	movs	r2, #0
 8005f18:	6839      	ldr	r1, [r7, #0]
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f7ff ffaa 	bl	8005e74 <FATFS_LinkDriverEx>
 8005f20:	4603      	mov	r3, r0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <std>:
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	b510      	push	{r4, lr}
 8005f30:	4604      	mov	r4, r0
 8005f32:	e9c0 3300 	strd	r3, r3, [r0]
 8005f36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005f3a:	6083      	str	r3, [r0, #8]
 8005f3c:	8181      	strh	r1, [r0, #12]
 8005f3e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005f40:	81c2      	strh	r2, [r0, #14]
 8005f42:	6183      	str	r3, [r0, #24]
 8005f44:	4619      	mov	r1, r3
 8005f46:	2208      	movs	r2, #8
 8005f48:	305c      	adds	r0, #92	@ 0x5c
 8005f4a:	f000 f9f9 	bl	8006340 <memset>
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <std+0x58>)
 8005f50:	6263      	str	r3, [r4, #36]	@ 0x24
 8005f52:	4b0d      	ldr	r3, [pc, #52]	@ (8005f88 <std+0x5c>)
 8005f54:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005f56:	4b0d      	ldr	r3, [pc, #52]	@ (8005f8c <std+0x60>)
 8005f58:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f90 <std+0x64>)
 8005f5c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005f5e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f94 <std+0x68>)
 8005f60:	6224      	str	r4, [r4, #32]
 8005f62:	429c      	cmp	r4, r3
 8005f64:	d006      	beq.n	8005f74 <std+0x48>
 8005f66:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f6a:	4294      	cmp	r4, r2
 8005f6c:	d002      	beq.n	8005f74 <std+0x48>
 8005f6e:	33d0      	adds	r3, #208	@ 0xd0
 8005f70:	429c      	cmp	r4, r3
 8005f72:	d105      	bne.n	8005f80 <std+0x54>
 8005f74:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f7c:	f000 ba58 	b.w	8006430 <__retarget_lock_init_recursive>
 8005f80:	bd10      	pop	{r4, pc}
 8005f82:	bf00      	nop
 8005f84:	08006191 	.word	0x08006191
 8005f88:	080061b3 	.word	0x080061b3
 8005f8c:	080061eb 	.word	0x080061eb
 8005f90:	0800620f 	.word	0x0800620f
 8005f94:	2000042c 	.word	0x2000042c

08005f98 <stdio_exit_handler>:
 8005f98:	4a02      	ldr	r2, [pc, #8]	@ (8005fa4 <stdio_exit_handler+0xc>)
 8005f9a:	4903      	ldr	r1, [pc, #12]	@ (8005fa8 <stdio_exit_handler+0x10>)
 8005f9c:	4803      	ldr	r0, [pc, #12]	@ (8005fac <stdio_exit_handler+0x14>)
 8005f9e:	f000 b869 	b.w	8006074 <_fwalk_sglue>
 8005fa2:	bf00      	nop
 8005fa4:	20000010 	.word	0x20000010
 8005fa8:	08006cd1 	.word	0x08006cd1
 8005fac:	20000020 	.word	0x20000020

08005fb0 <cleanup_stdio>:
 8005fb0:	6841      	ldr	r1, [r0, #4]
 8005fb2:	4b0c      	ldr	r3, [pc, #48]	@ (8005fe4 <cleanup_stdio+0x34>)
 8005fb4:	4299      	cmp	r1, r3
 8005fb6:	b510      	push	{r4, lr}
 8005fb8:	4604      	mov	r4, r0
 8005fba:	d001      	beq.n	8005fc0 <cleanup_stdio+0x10>
 8005fbc:	f000 fe88 	bl	8006cd0 <_fflush_r>
 8005fc0:	68a1      	ldr	r1, [r4, #8]
 8005fc2:	4b09      	ldr	r3, [pc, #36]	@ (8005fe8 <cleanup_stdio+0x38>)
 8005fc4:	4299      	cmp	r1, r3
 8005fc6:	d002      	beq.n	8005fce <cleanup_stdio+0x1e>
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 fe81 	bl	8006cd0 <_fflush_r>
 8005fce:	68e1      	ldr	r1, [r4, #12]
 8005fd0:	4b06      	ldr	r3, [pc, #24]	@ (8005fec <cleanup_stdio+0x3c>)
 8005fd2:	4299      	cmp	r1, r3
 8005fd4:	d004      	beq.n	8005fe0 <cleanup_stdio+0x30>
 8005fd6:	4620      	mov	r0, r4
 8005fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fdc:	f000 be78 	b.w	8006cd0 <_fflush_r>
 8005fe0:	bd10      	pop	{r4, pc}
 8005fe2:	bf00      	nop
 8005fe4:	2000042c 	.word	0x2000042c
 8005fe8:	20000494 	.word	0x20000494
 8005fec:	200004fc 	.word	0x200004fc

08005ff0 <global_stdio_init.part.0>:
 8005ff0:	b510      	push	{r4, lr}
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8006020 <global_stdio_init.part.0+0x30>)
 8005ff4:	4c0b      	ldr	r4, [pc, #44]	@ (8006024 <global_stdio_init.part.0+0x34>)
 8005ff6:	4a0c      	ldr	r2, [pc, #48]	@ (8006028 <global_stdio_init.part.0+0x38>)
 8005ff8:	601a      	str	r2, [r3, #0]
 8005ffa:	4620      	mov	r0, r4
 8005ffc:	2200      	movs	r2, #0
 8005ffe:	2104      	movs	r1, #4
 8006000:	f7ff ff94 	bl	8005f2c <std>
 8006004:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006008:	2201      	movs	r2, #1
 800600a:	2109      	movs	r1, #9
 800600c:	f7ff ff8e 	bl	8005f2c <std>
 8006010:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006014:	2202      	movs	r2, #2
 8006016:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800601a:	2112      	movs	r1, #18
 800601c:	f7ff bf86 	b.w	8005f2c <std>
 8006020:	20000564 	.word	0x20000564
 8006024:	2000042c 	.word	0x2000042c
 8006028:	08005f99 	.word	0x08005f99

0800602c <__sfp_lock_acquire>:
 800602c:	4801      	ldr	r0, [pc, #4]	@ (8006034 <__sfp_lock_acquire+0x8>)
 800602e:	f000 ba00 	b.w	8006432 <__retarget_lock_acquire_recursive>
 8006032:	bf00      	nop
 8006034:	2000056d 	.word	0x2000056d

08006038 <__sfp_lock_release>:
 8006038:	4801      	ldr	r0, [pc, #4]	@ (8006040 <__sfp_lock_release+0x8>)
 800603a:	f000 b9fb 	b.w	8006434 <__retarget_lock_release_recursive>
 800603e:	bf00      	nop
 8006040:	2000056d 	.word	0x2000056d

08006044 <__sinit>:
 8006044:	b510      	push	{r4, lr}
 8006046:	4604      	mov	r4, r0
 8006048:	f7ff fff0 	bl	800602c <__sfp_lock_acquire>
 800604c:	6a23      	ldr	r3, [r4, #32]
 800604e:	b11b      	cbz	r3, 8006058 <__sinit+0x14>
 8006050:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006054:	f7ff bff0 	b.w	8006038 <__sfp_lock_release>
 8006058:	4b04      	ldr	r3, [pc, #16]	@ (800606c <__sinit+0x28>)
 800605a:	6223      	str	r3, [r4, #32]
 800605c:	4b04      	ldr	r3, [pc, #16]	@ (8006070 <__sinit+0x2c>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1f5      	bne.n	8006050 <__sinit+0xc>
 8006064:	f7ff ffc4 	bl	8005ff0 <global_stdio_init.part.0>
 8006068:	e7f2      	b.n	8006050 <__sinit+0xc>
 800606a:	bf00      	nop
 800606c:	08005fb1 	.word	0x08005fb1
 8006070:	20000564 	.word	0x20000564

08006074 <_fwalk_sglue>:
 8006074:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006078:	4607      	mov	r7, r0
 800607a:	4688      	mov	r8, r1
 800607c:	4614      	mov	r4, r2
 800607e:	2600      	movs	r6, #0
 8006080:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006084:	f1b9 0901 	subs.w	r9, r9, #1
 8006088:	d505      	bpl.n	8006096 <_fwalk_sglue+0x22>
 800608a:	6824      	ldr	r4, [r4, #0]
 800608c:	2c00      	cmp	r4, #0
 800608e:	d1f7      	bne.n	8006080 <_fwalk_sglue+0xc>
 8006090:	4630      	mov	r0, r6
 8006092:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006096:	89ab      	ldrh	r3, [r5, #12]
 8006098:	2b01      	cmp	r3, #1
 800609a:	d907      	bls.n	80060ac <_fwalk_sglue+0x38>
 800609c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060a0:	3301      	adds	r3, #1
 80060a2:	d003      	beq.n	80060ac <_fwalk_sglue+0x38>
 80060a4:	4629      	mov	r1, r5
 80060a6:	4638      	mov	r0, r7
 80060a8:	47c0      	blx	r8
 80060aa:	4306      	orrs	r6, r0
 80060ac:	3568      	adds	r5, #104	@ 0x68
 80060ae:	e7e9      	b.n	8006084 <_fwalk_sglue+0x10>

080060b0 <iprintf>:
 80060b0:	b40f      	push	{r0, r1, r2, r3}
 80060b2:	b507      	push	{r0, r1, r2, lr}
 80060b4:	4906      	ldr	r1, [pc, #24]	@ (80060d0 <iprintf+0x20>)
 80060b6:	ab04      	add	r3, sp, #16
 80060b8:	6808      	ldr	r0, [r1, #0]
 80060ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80060be:	6881      	ldr	r1, [r0, #8]
 80060c0:	9301      	str	r3, [sp, #4]
 80060c2:	f000 fadb 	bl	800667c <_vfiprintf_r>
 80060c6:	b003      	add	sp, #12
 80060c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80060cc:	b004      	add	sp, #16
 80060ce:	4770      	bx	lr
 80060d0:	2000001c 	.word	0x2000001c

080060d4 <_puts_r>:
 80060d4:	6a03      	ldr	r3, [r0, #32]
 80060d6:	b570      	push	{r4, r5, r6, lr}
 80060d8:	6884      	ldr	r4, [r0, #8]
 80060da:	4605      	mov	r5, r0
 80060dc:	460e      	mov	r6, r1
 80060de:	b90b      	cbnz	r3, 80060e4 <_puts_r+0x10>
 80060e0:	f7ff ffb0 	bl	8006044 <__sinit>
 80060e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80060e6:	07db      	lsls	r3, r3, #31
 80060e8:	d405      	bmi.n	80060f6 <_puts_r+0x22>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	0598      	lsls	r0, r3, #22
 80060ee:	d402      	bmi.n	80060f6 <_puts_r+0x22>
 80060f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80060f2:	f000 f99e 	bl	8006432 <__retarget_lock_acquire_recursive>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	0719      	lsls	r1, r3, #28
 80060fa:	d502      	bpl.n	8006102 <_puts_r+0x2e>
 80060fc:	6923      	ldr	r3, [r4, #16]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d135      	bne.n	800616e <_puts_r+0x9a>
 8006102:	4621      	mov	r1, r4
 8006104:	4628      	mov	r0, r5
 8006106:	f000 f8c5 	bl	8006294 <__swsetup_r>
 800610a:	b380      	cbz	r0, 800616e <_puts_r+0x9a>
 800610c:	f04f 35ff 	mov.w	r5, #4294967295
 8006110:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006112:	07da      	lsls	r2, r3, #31
 8006114:	d405      	bmi.n	8006122 <_puts_r+0x4e>
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	059b      	lsls	r3, r3, #22
 800611a:	d402      	bmi.n	8006122 <_puts_r+0x4e>
 800611c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800611e:	f000 f989 	bl	8006434 <__retarget_lock_release_recursive>
 8006122:	4628      	mov	r0, r5
 8006124:	bd70      	pop	{r4, r5, r6, pc}
 8006126:	2b00      	cmp	r3, #0
 8006128:	da04      	bge.n	8006134 <_puts_r+0x60>
 800612a:	69a2      	ldr	r2, [r4, #24]
 800612c:	429a      	cmp	r2, r3
 800612e:	dc17      	bgt.n	8006160 <_puts_r+0x8c>
 8006130:	290a      	cmp	r1, #10
 8006132:	d015      	beq.n	8006160 <_puts_r+0x8c>
 8006134:	6823      	ldr	r3, [r4, #0]
 8006136:	1c5a      	adds	r2, r3, #1
 8006138:	6022      	str	r2, [r4, #0]
 800613a:	7019      	strb	r1, [r3, #0]
 800613c:	68a3      	ldr	r3, [r4, #8]
 800613e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006142:	3b01      	subs	r3, #1
 8006144:	60a3      	str	r3, [r4, #8]
 8006146:	2900      	cmp	r1, #0
 8006148:	d1ed      	bne.n	8006126 <_puts_r+0x52>
 800614a:	2b00      	cmp	r3, #0
 800614c:	da11      	bge.n	8006172 <_puts_r+0x9e>
 800614e:	4622      	mov	r2, r4
 8006150:	210a      	movs	r1, #10
 8006152:	4628      	mov	r0, r5
 8006154:	f000 f85f 	bl	8006216 <__swbuf_r>
 8006158:	3001      	adds	r0, #1
 800615a:	d0d7      	beq.n	800610c <_puts_r+0x38>
 800615c:	250a      	movs	r5, #10
 800615e:	e7d7      	b.n	8006110 <_puts_r+0x3c>
 8006160:	4622      	mov	r2, r4
 8006162:	4628      	mov	r0, r5
 8006164:	f000 f857 	bl	8006216 <__swbuf_r>
 8006168:	3001      	adds	r0, #1
 800616a:	d1e7      	bne.n	800613c <_puts_r+0x68>
 800616c:	e7ce      	b.n	800610c <_puts_r+0x38>
 800616e:	3e01      	subs	r6, #1
 8006170:	e7e4      	b.n	800613c <_puts_r+0x68>
 8006172:	6823      	ldr	r3, [r4, #0]
 8006174:	1c5a      	adds	r2, r3, #1
 8006176:	6022      	str	r2, [r4, #0]
 8006178:	220a      	movs	r2, #10
 800617a:	701a      	strb	r2, [r3, #0]
 800617c:	e7ee      	b.n	800615c <_puts_r+0x88>
	...

08006180 <puts>:
 8006180:	4b02      	ldr	r3, [pc, #8]	@ (800618c <puts+0xc>)
 8006182:	4601      	mov	r1, r0
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	f7ff bfa5 	b.w	80060d4 <_puts_r>
 800618a:	bf00      	nop
 800618c:	2000001c 	.word	0x2000001c

08006190 <__sread>:
 8006190:	b510      	push	{r4, lr}
 8006192:	460c      	mov	r4, r1
 8006194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006198:	f000 f8fc 	bl	8006394 <_read_r>
 800619c:	2800      	cmp	r0, #0
 800619e:	bfab      	itete	ge
 80061a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80061a2:	89a3      	ldrhlt	r3, [r4, #12]
 80061a4:	181b      	addge	r3, r3, r0
 80061a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80061aa:	bfac      	ite	ge
 80061ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 80061ae:	81a3      	strhlt	r3, [r4, #12]
 80061b0:	bd10      	pop	{r4, pc}

080061b2 <__swrite>:
 80061b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	461f      	mov	r7, r3
 80061b8:	898b      	ldrh	r3, [r1, #12]
 80061ba:	05db      	lsls	r3, r3, #23
 80061bc:	4605      	mov	r5, r0
 80061be:	460c      	mov	r4, r1
 80061c0:	4616      	mov	r6, r2
 80061c2:	d505      	bpl.n	80061d0 <__swrite+0x1e>
 80061c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c8:	2302      	movs	r3, #2
 80061ca:	2200      	movs	r2, #0
 80061cc:	f000 f8d0 	bl	8006370 <_lseek_r>
 80061d0:	89a3      	ldrh	r3, [r4, #12]
 80061d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061d6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80061da:	81a3      	strh	r3, [r4, #12]
 80061dc:	4632      	mov	r2, r6
 80061de:	463b      	mov	r3, r7
 80061e0:	4628      	mov	r0, r5
 80061e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061e6:	f000 b8e7 	b.w	80063b8 <_write_r>

080061ea <__sseek>:
 80061ea:	b510      	push	{r4, lr}
 80061ec:	460c      	mov	r4, r1
 80061ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f2:	f000 f8bd 	bl	8006370 <_lseek_r>
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	89a3      	ldrh	r3, [r4, #12]
 80061fa:	bf15      	itete	ne
 80061fc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80061fe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006202:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006206:	81a3      	strheq	r3, [r4, #12]
 8006208:	bf18      	it	ne
 800620a:	81a3      	strhne	r3, [r4, #12]
 800620c:	bd10      	pop	{r4, pc}

0800620e <__sclose>:
 800620e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006212:	f000 b89d 	b.w	8006350 <_close_r>

08006216 <__swbuf_r>:
 8006216:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006218:	460e      	mov	r6, r1
 800621a:	4614      	mov	r4, r2
 800621c:	4605      	mov	r5, r0
 800621e:	b118      	cbz	r0, 8006228 <__swbuf_r+0x12>
 8006220:	6a03      	ldr	r3, [r0, #32]
 8006222:	b90b      	cbnz	r3, 8006228 <__swbuf_r+0x12>
 8006224:	f7ff ff0e 	bl	8006044 <__sinit>
 8006228:	69a3      	ldr	r3, [r4, #24]
 800622a:	60a3      	str	r3, [r4, #8]
 800622c:	89a3      	ldrh	r3, [r4, #12]
 800622e:	071a      	lsls	r2, r3, #28
 8006230:	d501      	bpl.n	8006236 <__swbuf_r+0x20>
 8006232:	6923      	ldr	r3, [r4, #16]
 8006234:	b943      	cbnz	r3, 8006248 <__swbuf_r+0x32>
 8006236:	4621      	mov	r1, r4
 8006238:	4628      	mov	r0, r5
 800623a:	f000 f82b 	bl	8006294 <__swsetup_r>
 800623e:	b118      	cbz	r0, 8006248 <__swbuf_r+0x32>
 8006240:	f04f 37ff 	mov.w	r7, #4294967295
 8006244:	4638      	mov	r0, r7
 8006246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006248:	6823      	ldr	r3, [r4, #0]
 800624a:	6922      	ldr	r2, [r4, #16]
 800624c:	1a98      	subs	r0, r3, r2
 800624e:	6963      	ldr	r3, [r4, #20]
 8006250:	b2f6      	uxtb	r6, r6
 8006252:	4283      	cmp	r3, r0
 8006254:	4637      	mov	r7, r6
 8006256:	dc05      	bgt.n	8006264 <__swbuf_r+0x4e>
 8006258:	4621      	mov	r1, r4
 800625a:	4628      	mov	r0, r5
 800625c:	f000 fd38 	bl	8006cd0 <_fflush_r>
 8006260:	2800      	cmp	r0, #0
 8006262:	d1ed      	bne.n	8006240 <__swbuf_r+0x2a>
 8006264:	68a3      	ldr	r3, [r4, #8]
 8006266:	3b01      	subs	r3, #1
 8006268:	60a3      	str	r3, [r4, #8]
 800626a:	6823      	ldr	r3, [r4, #0]
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	6022      	str	r2, [r4, #0]
 8006270:	701e      	strb	r6, [r3, #0]
 8006272:	6962      	ldr	r2, [r4, #20]
 8006274:	1c43      	adds	r3, r0, #1
 8006276:	429a      	cmp	r2, r3
 8006278:	d004      	beq.n	8006284 <__swbuf_r+0x6e>
 800627a:	89a3      	ldrh	r3, [r4, #12]
 800627c:	07db      	lsls	r3, r3, #31
 800627e:	d5e1      	bpl.n	8006244 <__swbuf_r+0x2e>
 8006280:	2e0a      	cmp	r6, #10
 8006282:	d1df      	bne.n	8006244 <__swbuf_r+0x2e>
 8006284:	4621      	mov	r1, r4
 8006286:	4628      	mov	r0, r5
 8006288:	f000 fd22 	bl	8006cd0 <_fflush_r>
 800628c:	2800      	cmp	r0, #0
 800628e:	d0d9      	beq.n	8006244 <__swbuf_r+0x2e>
 8006290:	e7d6      	b.n	8006240 <__swbuf_r+0x2a>
	...

08006294 <__swsetup_r>:
 8006294:	b538      	push	{r3, r4, r5, lr}
 8006296:	4b29      	ldr	r3, [pc, #164]	@ (800633c <__swsetup_r+0xa8>)
 8006298:	4605      	mov	r5, r0
 800629a:	6818      	ldr	r0, [r3, #0]
 800629c:	460c      	mov	r4, r1
 800629e:	b118      	cbz	r0, 80062a8 <__swsetup_r+0x14>
 80062a0:	6a03      	ldr	r3, [r0, #32]
 80062a2:	b90b      	cbnz	r3, 80062a8 <__swsetup_r+0x14>
 80062a4:	f7ff fece 	bl	8006044 <__sinit>
 80062a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062ac:	0719      	lsls	r1, r3, #28
 80062ae:	d422      	bmi.n	80062f6 <__swsetup_r+0x62>
 80062b0:	06da      	lsls	r2, r3, #27
 80062b2:	d407      	bmi.n	80062c4 <__swsetup_r+0x30>
 80062b4:	2209      	movs	r2, #9
 80062b6:	602a      	str	r2, [r5, #0]
 80062b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062bc:	81a3      	strh	r3, [r4, #12]
 80062be:	f04f 30ff 	mov.w	r0, #4294967295
 80062c2:	e033      	b.n	800632c <__swsetup_r+0x98>
 80062c4:	0758      	lsls	r0, r3, #29
 80062c6:	d512      	bpl.n	80062ee <__swsetup_r+0x5a>
 80062c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062ca:	b141      	cbz	r1, 80062de <__swsetup_r+0x4a>
 80062cc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062d0:	4299      	cmp	r1, r3
 80062d2:	d002      	beq.n	80062da <__swsetup_r+0x46>
 80062d4:	4628      	mov	r0, r5
 80062d6:	f000 f8af 	bl	8006438 <_free_r>
 80062da:	2300      	movs	r3, #0
 80062dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80062de:	89a3      	ldrh	r3, [r4, #12]
 80062e0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80062e4:	81a3      	strh	r3, [r4, #12]
 80062e6:	2300      	movs	r3, #0
 80062e8:	6063      	str	r3, [r4, #4]
 80062ea:	6923      	ldr	r3, [r4, #16]
 80062ec:	6023      	str	r3, [r4, #0]
 80062ee:	89a3      	ldrh	r3, [r4, #12]
 80062f0:	f043 0308 	orr.w	r3, r3, #8
 80062f4:	81a3      	strh	r3, [r4, #12]
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	b94b      	cbnz	r3, 800630e <__swsetup_r+0x7a>
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006300:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006304:	d003      	beq.n	800630e <__swsetup_r+0x7a>
 8006306:	4621      	mov	r1, r4
 8006308:	4628      	mov	r0, r5
 800630a:	f000 fd2f 	bl	8006d6c <__smakebuf_r>
 800630e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006312:	f013 0201 	ands.w	r2, r3, #1
 8006316:	d00a      	beq.n	800632e <__swsetup_r+0x9a>
 8006318:	2200      	movs	r2, #0
 800631a:	60a2      	str	r2, [r4, #8]
 800631c:	6962      	ldr	r2, [r4, #20]
 800631e:	4252      	negs	r2, r2
 8006320:	61a2      	str	r2, [r4, #24]
 8006322:	6922      	ldr	r2, [r4, #16]
 8006324:	b942      	cbnz	r2, 8006338 <__swsetup_r+0xa4>
 8006326:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800632a:	d1c5      	bne.n	80062b8 <__swsetup_r+0x24>
 800632c:	bd38      	pop	{r3, r4, r5, pc}
 800632e:	0799      	lsls	r1, r3, #30
 8006330:	bf58      	it	pl
 8006332:	6962      	ldrpl	r2, [r4, #20]
 8006334:	60a2      	str	r2, [r4, #8]
 8006336:	e7f4      	b.n	8006322 <__swsetup_r+0x8e>
 8006338:	2000      	movs	r0, #0
 800633a:	e7f7      	b.n	800632c <__swsetup_r+0x98>
 800633c:	2000001c 	.word	0x2000001c

08006340 <memset>:
 8006340:	4402      	add	r2, r0
 8006342:	4603      	mov	r3, r0
 8006344:	4293      	cmp	r3, r2
 8006346:	d100      	bne.n	800634a <memset+0xa>
 8006348:	4770      	bx	lr
 800634a:	f803 1b01 	strb.w	r1, [r3], #1
 800634e:	e7f9      	b.n	8006344 <memset+0x4>

08006350 <_close_r>:
 8006350:	b538      	push	{r3, r4, r5, lr}
 8006352:	4d06      	ldr	r5, [pc, #24]	@ (800636c <_close_r+0x1c>)
 8006354:	2300      	movs	r3, #0
 8006356:	4604      	mov	r4, r0
 8006358:	4608      	mov	r0, r1
 800635a:	602b      	str	r3, [r5, #0]
 800635c:	f7fa fcb1 	bl	8000cc2 <_close>
 8006360:	1c43      	adds	r3, r0, #1
 8006362:	d102      	bne.n	800636a <_close_r+0x1a>
 8006364:	682b      	ldr	r3, [r5, #0]
 8006366:	b103      	cbz	r3, 800636a <_close_r+0x1a>
 8006368:	6023      	str	r3, [r4, #0]
 800636a:	bd38      	pop	{r3, r4, r5, pc}
 800636c:	20000568 	.word	0x20000568

08006370 <_lseek_r>:
 8006370:	b538      	push	{r3, r4, r5, lr}
 8006372:	4d07      	ldr	r5, [pc, #28]	@ (8006390 <_lseek_r+0x20>)
 8006374:	4604      	mov	r4, r0
 8006376:	4608      	mov	r0, r1
 8006378:	4611      	mov	r1, r2
 800637a:	2200      	movs	r2, #0
 800637c:	602a      	str	r2, [r5, #0]
 800637e:	461a      	mov	r2, r3
 8006380:	f7fa fcc6 	bl	8000d10 <_lseek>
 8006384:	1c43      	adds	r3, r0, #1
 8006386:	d102      	bne.n	800638e <_lseek_r+0x1e>
 8006388:	682b      	ldr	r3, [r5, #0]
 800638a:	b103      	cbz	r3, 800638e <_lseek_r+0x1e>
 800638c:	6023      	str	r3, [r4, #0]
 800638e:	bd38      	pop	{r3, r4, r5, pc}
 8006390:	20000568 	.word	0x20000568

08006394 <_read_r>:
 8006394:	b538      	push	{r3, r4, r5, lr}
 8006396:	4d07      	ldr	r5, [pc, #28]	@ (80063b4 <_read_r+0x20>)
 8006398:	4604      	mov	r4, r0
 800639a:	4608      	mov	r0, r1
 800639c:	4611      	mov	r1, r2
 800639e:	2200      	movs	r2, #0
 80063a0:	602a      	str	r2, [r5, #0]
 80063a2:	461a      	mov	r2, r3
 80063a4:	f7fa fc54 	bl	8000c50 <_read>
 80063a8:	1c43      	adds	r3, r0, #1
 80063aa:	d102      	bne.n	80063b2 <_read_r+0x1e>
 80063ac:	682b      	ldr	r3, [r5, #0]
 80063ae:	b103      	cbz	r3, 80063b2 <_read_r+0x1e>
 80063b0:	6023      	str	r3, [r4, #0]
 80063b2:	bd38      	pop	{r3, r4, r5, pc}
 80063b4:	20000568 	.word	0x20000568

080063b8 <_write_r>:
 80063b8:	b538      	push	{r3, r4, r5, lr}
 80063ba:	4d07      	ldr	r5, [pc, #28]	@ (80063d8 <_write_r+0x20>)
 80063bc:	4604      	mov	r4, r0
 80063be:	4608      	mov	r0, r1
 80063c0:	4611      	mov	r1, r2
 80063c2:	2200      	movs	r2, #0
 80063c4:	602a      	str	r2, [r5, #0]
 80063c6:	461a      	mov	r2, r3
 80063c8:	f7fa fc5f 	bl	8000c8a <_write>
 80063cc:	1c43      	adds	r3, r0, #1
 80063ce:	d102      	bne.n	80063d6 <_write_r+0x1e>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	b103      	cbz	r3, 80063d6 <_write_r+0x1e>
 80063d4:	6023      	str	r3, [r4, #0]
 80063d6:	bd38      	pop	{r3, r4, r5, pc}
 80063d8:	20000568 	.word	0x20000568

080063dc <__errno>:
 80063dc:	4b01      	ldr	r3, [pc, #4]	@ (80063e4 <__errno+0x8>)
 80063de:	6818      	ldr	r0, [r3, #0]
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	2000001c 	.word	0x2000001c

080063e8 <__libc_init_array>:
 80063e8:	b570      	push	{r4, r5, r6, lr}
 80063ea:	4d0d      	ldr	r5, [pc, #52]	@ (8006420 <__libc_init_array+0x38>)
 80063ec:	4c0d      	ldr	r4, [pc, #52]	@ (8006424 <__libc_init_array+0x3c>)
 80063ee:	1b64      	subs	r4, r4, r5
 80063f0:	10a4      	asrs	r4, r4, #2
 80063f2:	2600      	movs	r6, #0
 80063f4:	42a6      	cmp	r6, r4
 80063f6:	d109      	bne.n	800640c <__libc_init_array+0x24>
 80063f8:	4d0b      	ldr	r5, [pc, #44]	@ (8006428 <__libc_init_array+0x40>)
 80063fa:	4c0c      	ldr	r4, [pc, #48]	@ (800642c <__libc_init_array+0x44>)
 80063fc:	f000 fd24 	bl	8006e48 <_init>
 8006400:	1b64      	subs	r4, r4, r5
 8006402:	10a4      	asrs	r4, r4, #2
 8006404:	2600      	movs	r6, #0
 8006406:	42a6      	cmp	r6, r4
 8006408:	d105      	bne.n	8006416 <__libc_init_array+0x2e>
 800640a:	bd70      	pop	{r4, r5, r6, pc}
 800640c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006410:	4798      	blx	r3
 8006412:	3601      	adds	r6, #1
 8006414:	e7ee      	b.n	80063f4 <__libc_init_array+0xc>
 8006416:	f855 3b04 	ldr.w	r3, [r5], #4
 800641a:	4798      	blx	r3
 800641c:	3601      	adds	r6, #1
 800641e:	e7f2      	b.n	8006406 <__libc_init_array+0x1e>
 8006420:	08006fa8 	.word	0x08006fa8
 8006424:	08006fa8 	.word	0x08006fa8
 8006428:	08006fa8 	.word	0x08006fa8
 800642c:	08006fac 	.word	0x08006fac

08006430 <__retarget_lock_init_recursive>:
 8006430:	4770      	bx	lr

08006432 <__retarget_lock_acquire_recursive>:
 8006432:	4770      	bx	lr

08006434 <__retarget_lock_release_recursive>:
 8006434:	4770      	bx	lr
	...

08006438 <_free_r>:
 8006438:	b538      	push	{r3, r4, r5, lr}
 800643a:	4605      	mov	r5, r0
 800643c:	2900      	cmp	r1, #0
 800643e:	d041      	beq.n	80064c4 <_free_r+0x8c>
 8006440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006444:	1f0c      	subs	r4, r1, #4
 8006446:	2b00      	cmp	r3, #0
 8006448:	bfb8      	it	lt
 800644a:	18e4      	addlt	r4, r4, r3
 800644c:	f000 f8e0 	bl	8006610 <__malloc_lock>
 8006450:	4a1d      	ldr	r2, [pc, #116]	@ (80064c8 <_free_r+0x90>)
 8006452:	6813      	ldr	r3, [r2, #0]
 8006454:	b933      	cbnz	r3, 8006464 <_free_r+0x2c>
 8006456:	6063      	str	r3, [r4, #4]
 8006458:	6014      	str	r4, [r2, #0]
 800645a:	4628      	mov	r0, r5
 800645c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006460:	f000 b8dc 	b.w	800661c <__malloc_unlock>
 8006464:	42a3      	cmp	r3, r4
 8006466:	d908      	bls.n	800647a <_free_r+0x42>
 8006468:	6820      	ldr	r0, [r4, #0]
 800646a:	1821      	adds	r1, r4, r0
 800646c:	428b      	cmp	r3, r1
 800646e:	bf01      	itttt	eq
 8006470:	6819      	ldreq	r1, [r3, #0]
 8006472:	685b      	ldreq	r3, [r3, #4]
 8006474:	1809      	addeq	r1, r1, r0
 8006476:	6021      	streq	r1, [r4, #0]
 8006478:	e7ed      	b.n	8006456 <_free_r+0x1e>
 800647a:	461a      	mov	r2, r3
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	b10b      	cbz	r3, 8006484 <_free_r+0x4c>
 8006480:	42a3      	cmp	r3, r4
 8006482:	d9fa      	bls.n	800647a <_free_r+0x42>
 8006484:	6811      	ldr	r1, [r2, #0]
 8006486:	1850      	adds	r0, r2, r1
 8006488:	42a0      	cmp	r0, r4
 800648a:	d10b      	bne.n	80064a4 <_free_r+0x6c>
 800648c:	6820      	ldr	r0, [r4, #0]
 800648e:	4401      	add	r1, r0
 8006490:	1850      	adds	r0, r2, r1
 8006492:	4283      	cmp	r3, r0
 8006494:	6011      	str	r1, [r2, #0]
 8006496:	d1e0      	bne.n	800645a <_free_r+0x22>
 8006498:	6818      	ldr	r0, [r3, #0]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	6053      	str	r3, [r2, #4]
 800649e:	4408      	add	r0, r1
 80064a0:	6010      	str	r0, [r2, #0]
 80064a2:	e7da      	b.n	800645a <_free_r+0x22>
 80064a4:	d902      	bls.n	80064ac <_free_r+0x74>
 80064a6:	230c      	movs	r3, #12
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	e7d6      	b.n	800645a <_free_r+0x22>
 80064ac:	6820      	ldr	r0, [r4, #0]
 80064ae:	1821      	adds	r1, r4, r0
 80064b0:	428b      	cmp	r3, r1
 80064b2:	bf04      	itt	eq
 80064b4:	6819      	ldreq	r1, [r3, #0]
 80064b6:	685b      	ldreq	r3, [r3, #4]
 80064b8:	6063      	str	r3, [r4, #4]
 80064ba:	bf04      	itt	eq
 80064bc:	1809      	addeq	r1, r1, r0
 80064be:	6021      	streq	r1, [r4, #0]
 80064c0:	6054      	str	r4, [r2, #4]
 80064c2:	e7ca      	b.n	800645a <_free_r+0x22>
 80064c4:	bd38      	pop	{r3, r4, r5, pc}
 80064c6:	bf00      	nop
 80064c8:	20000574 	.word	0x20000574

080064cc <sbrk_aligned>:
 80064cc:	b570      	push	{r4, r5, r6, lr}
 80064ce:	4e0f      	ldr	r6, [pc, #60]	@ (800650c <sbrk_aligned+0x40>)
 80064d0:	460c      	mov	r4, r1
 80064d2:	6831      	ldr	r1, [r6, #0]
 80064d4:	4605      	mov	r5, r0
 80064d6:	b911      	cbnz	r1, 80064de <sbrk_aligned+0x12>
 80064d8:	f000 fca6 	bl	8006e28 <_sbrk_r>
 80064dc:	6030      	str	r0, [r6, #0]
 80064de:	4621      	mov	r1, r4
 80064e0:	4628      	mov	r0, r5
 80064e2:	f000 fca1 	bl	8006e28 <_sbrk_r>
 80064e6:	1c43      	adds	r3, r0, #1
 80064e8:	d103      	bne.n	80064f2 <sbrk_aligned+0x26>
 80064ea:	f04f 34ff 	mov.w	r4, #4294967295
 80064ee:	4620      	mov	r0, r4
 80064f0:	bd70      	pop	{r4, r5, r6, pc}
 80064f2:	1cc4      	adds	r4, r0, #3
 80064f4:	f024 0403 	bic.w	r4, r4, #3
 80064f8:	42a0      	cmp	r0, r4
 80064fa:	d0f8      	beq.n	80064ee <sbrk_aligned+0x22>
 80064fc:	1a21      	subs	r1, r4, r0
 80064fe:	4628      	mov	r0, r5
 8006500:	f000 fc92 	bl	8006e28 <_sbrk_r>
 8006504:	3001      	adds	r0, #1
 8006506:	d1f2      	bne.n	80064ee <sbrk_aligned+0x22>
 8006508:	e7ef      	b.n	80064ea <sbrk_aligned+0x1e>
 800650a:	bf00      	nop
 800650c:	20000570 	.word	0x20000570

08006510 <_malloc_r>:
 8006510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006514:	1ccd      	adds	r5, r1, #3
 8006516:	f025 0503 	bic.w	r5, r5, #3
 800651a:	3508      	adds	r5, #8
 800651c:	2d0c      	cmp	r5, #12
 800651e:	bf38      	it	cc
 8006520:	250c      	movcc	r5, #12
 8006522:	2d00      	cmp	r5, #0
 8006524:	4606      	mov	r6, r0
 8006526:	db01      	blt.n	800652c <_malloc_r+0x1c>
 8006528:	42a9      	cmp	r1, r5
 800652a:	d904      	bls.n	8006536 <_malloc_r+0x26>
 800652c:	230c      	movs	r3, #12
 800652e:	6033      	str	r3, [r6, #0]
 8006530:	2000      	movs	r0, #0
 8006532:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006536:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800660c <_malloc_r+0xfc>
 800653a:	f000 f869 	bl	8006610 <__malloc_lock>
 800653e:	f8d8 3000 	ldr.w	r3, [r8]
 8006542:	461c      	mov	r4, r3
 8006544:	bb44      	cbnz	r4, 8006598 <_malloc_r+0x88>
 8006546:	4629      	mov	r1, r5
 8006548:	4630      	mov	r0, r6
 800654a:	f7ff ffbf 	bl	80064cc <sbrk_aligned>
 800654e:	1c43      	adds	r3, r0, #1
 8006550:	4604      	mov	r4, r0
 8006552:	d158      	bne.n	8006606 <_malloc_r+0xf6>
 8006554:	f8d8 4000 	ldr.w	r4, [r8]
 8006558:	4627      	mov	r7, r4
 800655a:	2f00      	cmp	r7, #0
 800655c:	d143      	bne.n	80065e6 <_malloc_r+0xd6>
 800655e:	2c00      	cmp	r4, #0
 8006560:	d04b      	beq.n	80065fa <_malloc_r+0xea>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	4639      	mov	r1, r7
 8006566:	4630      	mov	r0, r6
 8006568:	eb04 0903 	add.w	r9, r4, r3
 800656c:	f000 fc5c 	bl	8006e28 <_sbrk_r>
 8006570:	4581      	cmp	r9, r0
 8006572:	d142      	bne.n	80065fa <_malloc_r+0xea>
 8006574:	6821      	ldr	r1, [r4, #0]
 8006576:	1a6d      	subs	r5, r5, r1
 8006578:	4629      	mov	r1, r5
 800657a:	4630      	mov	r0, r6
 800657c:	f7ff ffa6 	bl	80064cc <sbrk_aligned>
 8006580:	3001      	adds	r0, #1
 8006582:	d03a      	beq.n	80065fa <_malloc_r+0xea>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	442b      	add	r3, r5
 8006588:	6023      	str	r3, [r4, #0]
 800658a:	f8d8 3000 	ldr.w	r3, [r8]
 800658e:	685a      	ldr	r2, [r3, #4]
 8006590:	bb62      	cbnz	r2, 80065ec <_malloc_r+0xdc>
 8006592:	f8c8 7000 	str.w	r7, [r8]
 8006596:	e00f      	b.n	80065b8 <_malloc_r+0xa8>
 8006598:	6822      	ldr	r2, [r4, #0]
 800659a:	1b52      	subs	r2, r2, r5
 800659c:	d420      	bmi.n	80065e0 <_malloc_r+0xd0>
 800659e:	2a0b      	cmp	r2, #11
 80065a0:	d917      	bls.n	80065d2 <_malloc_r+0xc2>
 80065a2:	1961      	adds	r1, r4, r5
 80065a4:	42a3      	cmp	r3, r4
 80065a6:	6025      	str	r5, [r4, #0]
 80065a8:	bf18      	it	ne
 80065aa:	6059      	strne	r1, [r3, #4]
 80065ac:	6863      	ldr	r3, [r4, #4]
 80065ae:	bf08      	it	eq
 80065b0:	f8c8 1000 	streq.w	r1, [r8]
 80065b4:	5162      	str	r2, [r4, r5]
 80065b6:	604b      	str	r3, [r1, #4]
 80065b8:	4630      	mov	r0, r6
 80065ba:	f000 f82f 	bl	800661c <__malloc_unlock>
 80065be:	f104 000b 	add.w	r0, r4, #11
 80065c2:	1d23      	adds	r3, r4, #4
 80065c4:	f020 0007 	bic.w	r0, r0, #7
 80065c8:	1ac2      	subs	r2, r0, r3
 80065ca:	bf1c      	itt	ne
 80065cc:	1a1b      	subne	r3, r3, r0
 80065ce:	50a3      	strne	r3, [r4, r2]
 80065d0:	e7af      	b.n	8006532 <_malloc_r+0x22>
 80065d2:	6862      	ldr	r2, [r4, #4]
 80065d4:	42a3      	cmp	r3, r4
 80065d6:	bf0c      	ite	eq
 80065d8:	f8c8 2000 	streq.w	r2, [r8]
 80065dc:	605a      	strne	r2, [r3, #4]
 80065de:	e7eb      	b.n	80065b8 <_malloc_r+0xa8>
 80065e0:	4623      	mov	r3, r4
 80065e2:	6864      	ldr	r4, [r4, #4]
 80065e4:	e7ae      	b.n	8006544 <_malloc_r+0x34>
 80065e6:	463c      	mov	r4, r7
 80065e8:	687f      	ldr	r7, [r7, #4]
 80065ea:	e7b6      	b.n	800655a <_malloc_r+0x4a>
 80065ec:	461a      	mov	r2, r3
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	42a3      	cmp	r3, r4
 80065f2:	d1fb      	bne.n	80065ec <_malloc_r+0xdc>
 80065f4:	2300      	movs	r3, #0
 80065f6:	6053      	str	r3, [r2, #4]
 80065f8:	e7de      	b.n	80065b8 <_malloc_r+0xa8>
 80065fa:	230c      	movs	r3, #12
 80065fc:	6033      	str	r3, [r6, #0]
 80065fe:	4630      	mov	r0, r6
 8006600:	f000 f80c 	bl	800661c <__malloc_unlock>
 8006604:	e794      	b.n	8006530 <_malloc_r+0x20>
 8006606:	6005      	str	r5, [r0, #0]
 8006608:	e7d6      	b.n	80065b8 <_malloc_r+0xa8>
 800660a:	bf00      	nop
 800660c:	20000574 	.word	0x20000574

08006610 <__malloc_lock>:
 8006610:	4801      	ldr	r0, [pc, #4]	@ (8006618 <__malloc_lock+0x8>)
 8006612:	f7ff bf0e 	b.w	8006432 <__retarget_lock_acquire_recursive>
 8006616:	bf00      	nop
 8006618:	2000056c 	.word	0x2000056c

0800661c <__malloc_unlock>:
 800661c:	4801      	ldr	r0, [pc, #4]	@ (8006624 <__malloc_unlock+0x8>)
 800661e:	f7ff bf09 	b.w	8006434 <__retarget_lock_release_recursive>
 8006622:	bf00      	nop
 8006624:	2000056c 	.word	0x2000056c

08006628 <__sfputc_r>:
 8006628:	6893      	ldr	r3, [r2, #8]
 800662a:	3b01      	subs	r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	b410      	push	{r4}
 8006630:	6093      	str	r3, [r2, #8]
 8006632:	da08      	bge.n	8006646 <__sfputc_r+0x1e>
 8006634:	6994      	ldr	r4, [r2, #24]
 8006636:	42a3      	cmp	r3, r4
 8006638:	db01      	blt.n	800663e <__sfputc_r+0x16>
 800663a:	290a      	cmp	r1, #10
 800663c:	d103      	bne.n	8006646 <__sfputc_r+0x1e>
 800663e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006642:	f7ff bde8 	b.w	8006216 <__swbuf_r>
 8006646:	6813      	ldr	r3, [r2, #0]
 8006648:	1c58      	adds	r0, r3, #1
 800664a:	6010      	str	r0, [r2, #0]
 800664c:	7019      	strb	r1, [r3, #0]
 800664e:	4608      	mov	r0, r1
 8006650:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006654:	4770      	bx	lr

08006656 <__sfputs_r>:
 8006656:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006658:	4606      	mov	r6, r0
 800665a:	460f      	mov	r7, r1
 800665c:	4614      	mov	r4, r2
 800665e:	18d5      	adds	r5, r2, r3
 8006660:	42ac      	cmp	r4, r5
 8006662:	d101      	bne.n	8006668 <__sfputs_r+0x12>
 8006664:	2000      	movs	r0, #0
 8006666:	e007      	b.n	8006678 <__sfputs_r+0x22>
 8006668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800666c:	463a      	mov	r2, r7
 800666e:	4630      	mov	r0, r6
 8006670:	f7ff ffda 	bl	8006628 <__sfputc_r>
 8006674:	1c43      	adds	r3, r0, #1
 8006676:	d1f3      	bne.n	8006660 <__sfputs_r+0xa>
 8006678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800667c <_vfiprintf_r>:
 800667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	460d      	mov	r5, r1
 8006682:	b09d      	sub	sp, #116	@ 0x74
 8006684:	4614      	mov	r4, r2
 8006686:	4698      	mov	r8, r3
 8006688:	4606      	mov	r6, r0
 800668a:	b118      	cbz	r0, 8006694 <_vfiprintf_r+0x18>
 800668c:	6a03      	ldr	r3, [r0, #32]
 800668e:	b90b      	cbnz	r3, 8006694 <_vfiprintf_r+0x18>
 8006690:	f7ff fcd8 	bl	8006044 <__sinit>
 8006694:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006696:	07d9      	lsls	r1, r3, #31
 8006698:	d405      	bmi.n	80066a6 <_vfiprintf_r+0x2a>
 800669a:	89ab      	ldrh	r3, [r5, #12]
 800669c:	059a      	lsls	r2, r3, #22
 800669e:	d402      	bmi.n	80066a6 <_vfiprintf_r+0x2a>
 80066a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066a2:	f7ff fec6 	bl	8006432 <__retarget_lock_acquire_recursive>
 80066a6:	89ab      	ldrh	r3, [r5, #12]
 80066a8:	071b      	lsls	r3, r3, #28
 80066aa:	d501      	bpl.n	80066b0 <_vfiprintf_r+0x34>
 80066ac:	692b      	ldr	r3, [r5, #16]
 80066ae:	b99b      	cbnz	r3, 80066d8 <_vfiprintf_r+0x5c>
 80066b0:	4629      	mov	r1, r5
 80066b2:	4630      	mov	r0, r6
 80066b4:	f7ff fdee 	bl	8006294 <__swsetup_r>
 80066b8:	b170      	cbz	r0, 80066d8 <_vfiprintf_r+0x5c>
 80066ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80066bc:	07dc      	lsls	r4, r3, #31
 80066be:	d504      	bpl.n	80066ca <_vfiprintf_r+0x4e>
 80066c0:	f04f 30ff 	mov.w	r0, #4294967295
 80066c4:	b01d      	add	sp, #116	@ 0x74
 80066c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ca:	89ab      	ldrh	r3, [r5, #12]
 80066cc:	0598      	lsls	r0, r3, #22
 80066ce:	d4f7      	bmi.n	80066c0 <_vfiprintf_r+0x44>
 80066d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80066d2:	f7ff feaf 	bl	8006434 <__retarget_lock_release_recursive>
 80066d6:	e7f3      	b.n	80066c0 <_vfiprintf_r+0x44>
 80066d8:	2300      	movs	r3, #0
 80066da:	9309      	str	r3, [sp, #36]	@ 0x24
 80066dc:	2320      	movs	r3, #32
 80066de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e6:	2330      	movs	r3, #48	@ 0x30
 80066e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006898 <_vfiprintf_r+0x21c>
 80066ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066f0:	f04f 0901 	mov.w	r9, #1
 80066f4:	4623      	mov	r3, r4
 80066f6:	469a      	mov	sl, r3
 80066f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066fc:	b10a      	cbz	r2, 8006702 <_vfiprintf_r+0x86>
 80066fe:	2a25      	cmp	r2, #37	@ 0x25
 8006700:	d1f9      	bne.n	80066f6 <_vfiprintf_r+0x7a>
 8006702:	ebba 0b04 	subs.w	fp, sl, r4
 8006706:	d00b      	beq.n	8006720 <_vfiprintf_r+0xa4>
 8006708:	465b      	mov	r3, fp
 800670a:	4622      	mov	r2, r4
 800670c:	4629      	mov	r1, r5
 800670e:	4630      	mov	r0, r6
 8006710:	f7ff ffa1 	bl	8006656 <__sfputs_r>
 8006714:	3001      	adds	r0, #1
 8006716:	f000 80a7 	beq.w	8006868 <_vfiprintf_r+0x1ec>
 800671a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800671c:	445a      	add	r2, fp
 800671e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006720:	f89a 3000 	ldrb.w	r3, [sl]
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 809f 	beq.w	8006868 <_vfiprintf_r+0x1ec>
 800672a:	2300      	movs	r3, #0
 800672c:	f04f 32ff 	mov.w	r2, #4294967295
 8006730:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006734:	f10a 0a01 	add.w	sl, sl, #1
 8006738:	9304      	str	r3, [sp, #16]
 800673a:	9307      	str	r3, [sp, #28]
 800673c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006740:	931a      	str	r3, [sp, #104]	@ 0x68
 8006742:	4654      	mov	r4, sl
 8006744:	2205      	movs	r2, #5
 8006746:	f814 1b01 	ldrb.w	r1, [r4], #1
 800674a:	4853      	ldr	r0, [pc, #332]	@ (8006898 <_vfiprintf_r+0x21c>)
 800674c:	f7f9 fd40 	bl	80001d0 <memchr>
 8006750:	9a04      	ldr	r2, [sp, #16]
 8006752:	b9d8      	cbnz	r0, 800678c <_vfiprintf_r+0x110>
 8006754:	06d1      	lsls	r1, r2, #27
 8006756:	bf44      	itt	mi
 8006758:	2320      	movmi	r3, #32
 800675a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800675e:	0713      	lsls	r3, r2, #28
 8006760:	bf44      	itt	mi
 8006762:	232b      	movmi	r3, #43	@ 0x2b
 8006764:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006768:	f89a 3000 	ldrb.w	r3, [sl]
 800676c:	2b2a      	cmp	r3, #42	@ 0x2a
 800676e:	d015      	beq.n	800679c <_vfiprintf_r+0x120>
 8006770:	9a07      	ldr	r2, [sp, #28]
 8006772:	4654      	mov	r4, sl
 8006774:	2000      	movs	r0, #0
 8006776:	f04f 0c0a 	mov.w	ip, #10
 800677a:	4621      	mov	r1, r4
 800677c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006780:	3b30      	subs	r3, #48	@ 0x30
 8006782:	2b09      	cmp	r3, #9
 8006784:	d94b      	bls.n	800681e <_vfiprintf_r+0x1a2>
 8006786:	b1b0      	cbz	r0, 80067b6 <_vfiprintf_r+0x13a>
 8006788:	9207      	str	r2, [sp, #28]
 800678a:	e014      	b.n	80067b6 <_vfiprintf_r+0x13a>
 800678c:	eba0 0308 	sub.w	r3, r0, r8
 8006790:	fa09 f303 	lsl.w	r3, r9, r3
 8006794:	4313      	orrs	r3, r2
 8006796:	9304      	str	r3, [sp, #16]
 8006798:	46a2      	mov	sl, r4
 800679a:	e7d2      	b.n	8006742 <_vfiprintf_r+0xc6>
 800679c:	9b03      	ldr	r3, [sp, #12]
 800679e:	1d19      	adds	r1, r3, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	9103      	str	r1, [sp, #12]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	bfbb      	ittet	lt
 80067a8:	425b      	neglt	r3, r3
 80067aa:	f042 0202 	orrlt.w	r2, r2, #2
 80067ae:	9307      	strge	r3, [sp, #28]
 80067b0:	9307      	strlt	r3, [sp, #28]
 80067b2:	bfb8      	it	lt
 80067b4:	9204      	strlt	r2, [sp, #16]
 80067b6:	7823      	ldrb	r3, [r4, #0]
 80067b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80067ba:	d10a      	bne.n	80067d2 <_vfiprintf_r+0x156>
 80067bc:	7863      	ldrb	r3, [r4, #1]
 80067be:	2b2a      	cmp	r3, #42	@ 0x2a
 80067c0:	d132      	bne.n	8006828 <_vfiprintf_r+0x1ac>
 80067c2:	9b03      	ldr	r3, [sp, #12]
 80067c4:	1d1a      	adds	r2, r3, #4
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	9203      	str	r2, [sp, #12]
 80067ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067ce:	3402      	adds	r4, #2
 80067d0:	9305      	str	r3, [sp, #20]
 80067d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80068a8 <_vfiprintf_r+0x22c>
 80067d6:	7821      	ldrb	r1, [r4, #0]
 80067d8:	2203      	movs	r2, #3
 80067da:	4650      	mov	r0, sl
 80067dc:	f7f9 fcf8 	bl	80001d0 <memchr>
 80067e0:	b138      	cbz	r0, 80067f2 <_vfiprintf_r+0x176>
 80067e2:	9b04      	ldr	r3, [sp, #16]
 80067e4:	eba0 000a 	sub.w	r0, r0, sl
 80067e8:	2240      	movs	r2, #64	@ 0x40
 80067ea:	4082      	lsls	r2, r0
 80067ec:	4313      	orrs	r3, r2
 80067ee:	3401      	adds	r4, #1
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f6:	4829      	ldr	r0, [pc, #164]	@ (800689c <_vfiprintf_r+0x220>)
 80067f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067fc:	2206      	movs	r2, #6
 80067fe:	f7f9 fce7 	bl	80001d0 <memchr>
 8006802:	2800      	cmp	r0, #0
 8006804:	d03f      	beq.n	8006886 <_vfiprintf_r+0x20a>
 8006806:	4b26      	ldr	r3, [pc, #152]	@ (80068a0 <_vfiprintf_r+0x224>)
 8006808:	bb1b      	cbnz	r3, 8006852 <_vfiprintf_r+0x1d6>
 800680a:	9b03      	ldr	r3, [sp, #12]
 800680c:	3307      	adds	r3, #7
 800680e:	f023 0307 	bic.w	r3, r3, #7
 8006812:	3308      	adds	r3, #8
 8006814:	9303      	str	r3, [sp, #12]
 8006816:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006818:	443b      	add	r3, r7
 800681a:	9309      	str	r3, [sp, #36]	@ 0x24
 800681c:	e76a      	b.n	80066f4 <_vfiprintf_r+0x78>
 800681e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006822:	460c      	mov	r4, r1
 8006824:	2001      	movs	r0, #1
 8006826:	e7a8      	b.n	800677a <_vfiprintf_r+0xfe>
 8006828:	2300      	movs	r3, #0
 800682a:	3401      	adds	r4, #1
 800682c:	9305      	str	r3, [sp, #20]
 800682e:	4619      	mov	r1, r3
 8006830:	f04f 0c0a 	mov.w	ip, #10
 8006834:	4620      	mov	r0, r4
 8006836:	f810 2b01 	ldrb.w	r2, [r0], #1
 800683a:	3a30      	subs	r2, #48	@ 0x30
 800683c:	2a09      	cmp	r2, #9
 800683e:	d903      	bls.n	8006848 <_vfiprintf_r+0x1cc>
 8006840:	2b00      	cmp	r3, #0
 8006842:	d0c6      	beq.n	80067d2 <_vfiprintf_r+0x156>
 8006844:	9105      	str	r1, [sp, #20]
 8006846:	e7c4      	b.n	80067d2 <_vfiprintf_r+0x156>
 8006848:	fb0c 2101 	mla	r1, ip, r1, r2
 800684c:	4604      	mov	r4, r0
 800684e:	2301      	movs	r3, #1
 8006850:	e7f0      	b.n	8006834 <_vfiprintf_r+0x1b8>
 8006852:	ab03      	add	r3, sp, #12
 8006854:	9300      	str	r3, [sp, #0]
 8006856:	462a      	mov	r2, r5
 8006858:	4b12      	ldr	r3, [pc, #72]	@ (80068a4 <_vfiprintf_r+0x228>)
 800685a:	a904      	add	r1, sp, #16
 800685c:	4630      	mov	r0, r6
 800685e:	f3af 8000 	nop.w
 8006862:	4607      	mov	r7, r0
 8006864:	1c78      	adds	r0, r7, #1
 8006866:	d1d6      	bne.n	8006816 <_vfiprintf_r+0x19a>
 8006868:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800686a:	07d9      	lsls	r1, r3, #31
 800686c:	d405      	bmi.n	800687a <_vfiprintf_r+0x1fe>
 800686e:	89ab      	ldrh	r3, [r5, #12]
 8006870:	059a      	lsls	r2, r3, #22
 8006872:	d402      	bmi.n	800687a <_vfiprintf_r+0x1fe>
 8006874:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006876:	f7ff fddd 	bl	8006434 <__retarget_lock_release_recursive>
 800687a:	89ab      	ldrh	r3, [r5, #12]
 800687c:	065b      	lsls	r3, r3, #25
 800687e:	f53f af1f 	bmi.w	80066c0 <_vfiprintf_r+0x44>
 8006882:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006884:	e71e      	b.n	80066c4 <_vfiprintf_r+0x48>
 8006886:	ab03      	add	r3, sp, #12
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	462a      	mov	r2, r5
 800688c:	4b05      	ldr	r3, [pc, #20]	@ (80068a4 <_vfiprintf_r+0x228>)
 800688e:	a904      	add	r1, sp, #16
 8006890:	4630      	mov	r0, r6
 8006892:	f000 f879 	bl	8006988 <_printf_i>
 8006896:	e7e4      	b.n	8006862 <_vfiprintf_r+0x1e6>
 8006898:	08006f6c 	.word	0x08006f6c
 800689c:	08006f76 	.word	0x08006f76
 80068a0:	00000000 	.word	0x00000000
 80068a4:	08006657 	.word	0x08006657
 80068a8:	08006f72 	.word	0x08006f72

080068ac <_printf_common>:
 80068ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b0:	4616      	mov	r6, r2
 80068b2:	4698      	mov	r8, r3
 80068b4:	688a      	ldr	r2, [r1, #8]
 80068b6:	690b      	ldr	r3, [r1, #16]
 80068b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80068bc:	4293      	cmp	r3, r2
 80068be:	bfb8      	it	lt
 80068c0:	4613      	movlt	r3, r2
 80068c2:	6033      	str	r3, [r6, #0]
 80068c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80068c8:	4607      	mov	r7, r0
 80068ca:	460c      	mov	r4, r1
 80068cc:	b10a      	cbz	r2, 80068d2 <_printf_common+0x26>
 80068ce:	3301      	adds	r3, #1
 80068d0:	6033      	str	r3, [r6, #0]
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	0699      	lsls	r1, r3, #26
 80068d6:	bf42      	ittt	mi
 80068d8:	6833      	ldrmi	r3, [r6, #0]
 80068da:	3302      	addmi	r3, #2
 80068dc:	6033      	strmi	r3, [r6, #0]
 80068de:	6825      	ldr	r5, [r4, #0]
 80068e0:	f015 0506 	ands.w	r5, r5, #6
 80068e4:	d106      	bne.n	80068f4 <_printf_common+0x48>
 80068e6:	f104 0a19 	add.w	sl, r4, #25
 80068ea:	68e3      	ldr	r3, [r4, #12]
 80068ec:	6832      	ldr	r2, [r6, #0]
 80068ee:	1a9b      	subs	r3, r3, r2
 80068f0:	42ab      	cmp	r3, r5
 80068f2:	dc26      	bgt.n	8006942 <_printf_common+0x96>
 80068f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068f8:	6822      	ldr	r2, [r4, #0]
 80068fa:	3b00      	subs	r3, #0
 80068fc:	bf18      	it	ne
 80068fe:	2301      	movne	r3, #1
 8006900:	0692      	lsls	r2, r2, #26
 8006902:	d42b      	bmi.n	800695c <_printf_common+0xb0>
 8006904:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006908:	4641      	mov	r1, r8
 800690a:	4638      	mov	r0, r7
 800690c:	47c8      	blx	r9
 800690e:	3001      	adds	r0, #1
 8006910:	d01e      	beq.n	8006950 <_printf_common+0xa4>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	6922      	ldr	r2, [r4, #16]
 8006916:	f003 0306 	and.w	r3, r3, #6
 800691a:	2b04      	cmp	r3, #4
 800691c:	bf02      	ittt	eq
 800691e:	68e5      	ldreq	r5, [r4, #12]
 8006920:	6833      	ldreq	r3, [r6, #0]
 8006922:	1aed      	subeq	r5, r5, r3
 8006924:	68a3      	ldr	r3, [r4, #8]
 8006926:	bf0c      	ite	eq
 8006928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800692c:	2500      	movne	r5, #0
 800692e:	4293      	cmp	r3, r2
 8006930:	bfc4      	itt	gt
 8006932:	1a9b      	subgt	r3, r3, r2
 8006934:	18ed      	addgt	r5, r5, r3
 8006936:	2600      	movs	r6, #0
 8006938:	341a      	adds	r4, #26
 800693a:	42b5      	cmp	r5, r6
 800693c:	d11a      	bne.n	8006974 <_printf_common+0xc8>
 800693e:	2000      	movs	r0, #0
 8006940:	e008      	b.n	8006954 <_printf_common+0xa8>
 8006942:	2301      	movs	r3, #1
 8006944:	4652      	mov	r2, sl
 8006946:	4641      	mov	r1, r8
 8006948:	4638      	mov	r0, r7
 800694a:	47c8      	blx	r9
 800694c:	3001      	adds	r0, #1
 800694e:	d103      	bne.n	8006958 <_printf_common+0xac>
 8006950:	f04f 30ff 	mov.w	r0, #4294967295
 8006954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006958:	3501      	adds	r5, #1
 800695a:	e7c6      	b.n	80068ea <_printf_common+0x3e>
 800695c:	18e1      	adds	r1, r4, r3
 800695e:	1c5a      	adds	r2, r3, #1
 8006960:	2030      	movs	r0, #48	@ 0x30
 8006962:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006966:	4422      	add	r2, r4
 8006968:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800696c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006970:	3302      	adds	r3, #2
 8006972:	e7c7      	b.n	8006904 <_printf_common+0x58>
 8006974:	2301      	movs	r3, #1
 8006976:	4622      	mov	r2, r4
 8006978:	4641      	mov	r1, r8
 800697a:	4638      	mov	r0, r7
 800697c:	47c8      	blx	r9
 800697e:	3001      	adds	r0, #1
 8006980:	d0e6      	beq.n	8006950 <_printf_common+0xa4>
 8006982:	3601      	adds	r6, #1
 8006984:	e7d9      	b.n	800693a <_printf_common+0x8e>
	...

08006988 <_printf_i>:
 8006988:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800698c:	7e0f      	ldrb	r7, [r1, #24]
 800698e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006990:	2f78      	cmp	r7, #120	@ 0x78
 8006992:	4691      	mov	r9, r2
 8006994:	4680      	mov	r8, r0
 8006996:	460c      	mov	r4, r1
 8006998:	469a      	mov	sl, r3
 800699a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800699e:	d807      	bhi.n	80069b0 <_printf_i+0x28>
 80069a0:	2f62      	cmp	r7, #98	@ 0x62
 80069a2:	d80a      	bhi.n	80069ba <_printf_i+0x32>
 80069a4:	2f00      	cmp	r7, #0
 80069a6:	f000 80d2 	beq.w	8006b4e <_printf_i+0x1c6>
 80069aa:	2f58      	cmp	r7, #88	@ 0x58
 80069ac:	f000 80b9 	beq.w	8006b22 <_printf_i+0x19a>
 80069b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80069b8:	e03a      	b.n	8006a30 <_printf_i+0xa8>
 80069ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80069be:	2b15      	cmp	r3, #21
 80069c0:	d8f6      	bhi.n	80069b0 <_printf_i+0x28>
 80069c2:	a101      	add	r1, pc, #4	@ (adr r1, 80069c8 <_printf_i+0x40>)
 80069c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80069c8:	08006a21 	.word	0x08006a21
 80069cc:	08006a35 	.word	0x08006a35
 80069d0:	080069b1 	.word	0x080069b1
 80069d4:	080069b1 	.word	0x080069b1
 80069d8:	080069b1 	.word	0x080069b1
 80069dc:	080069b1 	.word	0x080069b1
 80069e0:	08006a35 	.word	0x08006a35
 80069e4:	080069b1 	.word	0x080069b1
 80069e8:	080069b1 	.word	0x080069b1
 80069ec:	080069b1 	.word	0x080069b1
 80069f0:	080069b1 	.word	0x080069b1
 80069f4:	08006b35 	.word	0x08006b35
 80069f8:	08006a5f 	.word	0x08006a5f
 80069fc:	08006aef 	.word	0x08006aef
 8006a00:	080069b1 	.word	0x080069b1
 8006a04:	080069b1 	.word	0x080069b1
 8006a08:	08006b57 	.word	0x08006b57
 8006a0c:	080069b1 	.word	0x080069b1
 8006a10:	08006a5f 	.word	0x08006a5f
 8006a14:	080069b1 	.word	0x080069b1
 8006a18:	080069b1 	.word	0x080069b1
 8006a1c:	08006af7 	.word	0x08006af7
 8006a20:	6833      	ldr	r3, [r6, #0]
 8006a22:	1d1a      	adds	r2, r3, #4
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	6032      	str	r2, [r6, #0]
 8006a28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006a2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006a30:	2301      	movs	r3, #1
 8006a32:	e09d      	b.n	8006b70 <_printf_i+0x1e8>
 8006a34:	6833      	ldr	r3, [r6, #0]
 8006a36:	6820      	ldr	r0, [r4, #0]
 8006a38:	1d19      	adds	r1, r3, #4
 8006a3a:	6031      	str	r1, [r6, #0]
 8006a3c:	0606      	lsls	r6, r0, #24
 8006a3e:	d501      	bpl.n	8006a44 <_printf_i+0xbc>
 8006a40:	681d      	ldr	r5, [r3, #0]
 8006a42:	e003      	b.n	8006a4c <_printf_i+0xc4>
 8006a44:	0645      	lsls	r5, r0, #25
 8006a46:	d5fb      	bpl.n	8006a40 <_printf_i+0xb8>
 8006a48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a4c:	2d00      	cmp	r5, #0
 8006a4e:	da03      	bge.n	8006a58 <_printf_i+0xd0>
 8006a50:	232d      	movs	r3, #45	@ 0x2d
 8006a52:	426d      	negs	r5, r5
 8006a54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a58:	4859      	ldr	r0, [pc, #356]	@ (8006bc0 <_printf_i+0x238>)
 8006a5a:	230a      	movs	r3, #10
 8006a5c:	e011      	b.n	8006a82 <_printf_i+0xfa>
 8006a5e:	6821      	ldr	r1, [r4, #0]
 8006a60:	6833      	ldr	r3, [r6, #0]
 8006a62:	0608      	lsls	r0, r1, #24
 8006a64:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a68:	d402      	bmi.n	8006a70 <_printf_i+0xe8>
 8006a6a:	0649      	lsls	r1, r1, #25
 8006a6c:	bf48      	it	mi
 8006a6e:	b2ad      	uxthmi	r5, r5
 8006a70:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a72:	4853      	ldr	r0, [pc, #332]	@ (8006bc0 <_printf_i+0x238>)
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	bf14      	ite	ne
 8006a78:	230a      	movne	r3, #10
 8006a7a:	2308      	moveq	r3, #8
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a82:	6866      	ldr	r6, [r4, #4]
 8006a84:	60a6      	str	r6, [r4, #8]
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	bfa2      	ittt	ge
 8006a8a:	6821      	ldrge	r1, [r4, #0]
 8006a8c:	f021 0104 	bicge.w	r1, r1, #4
 8006a90:	6021      	strge	r1, [r4, #0]
 8006a92:	b90d      	cbnz	r5, 8006a98 <_printf_i+0x110>
 8006a94:	2e00      	cmp	r6, #0
 8006a96:	d04b      	beq.n	8006b30 <_printf_i+0x1a8>
 8006a98:	4616      	mov	r6, r2
 8006a9a:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a9e:	fb03 5711 	mls	r7, r3, r1, r5
 8006aa2:	5dc7      	ldrb	r7, [r0, r7]
 8006aa4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006aa8:	462f      	mov	r7, r5
 8006aaa:	42bb      	cmp	r3, r7
 8006aac:	460d      	mov	r5, r1
 8006aae:	d9f4      	bls.n	8006a9a <_printf_i+0x112>
 8006ab0:	2b08      	cmp	r3, #8
 8006ab2:	d10b      	bne.n	8006acc <_printf_i+0x144>
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	07df      	lsls	r7, r3, #31
 8006ab8:	d508      	bpl.n	8006acc <_printf_i+0x144>
 8006aba:	6923      	ldr	r3, [r4, #16]
 8006abc:	6861      	ldr	r1, [r4, #4]
 8006abe:	4299      	cmp	r1, r3
 8006ac0:	bfde      	ittt	le
 8006ac2:	2330      	movle	r3, #48	@ 0x30
 8006ac4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ac8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006acc:	1b92      	subs	r2, r2, r6
 8006ace:	6122      	str	r2, [r4, #16]
 8006ad0:	f8cd a000 	str.w	sl, [sp]
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	aa03      	add	r2, sp, #12
 8006ad8:	4621      	mov	r1, r4
 8006ada:	4640      	mov	r0, r8
 8006adc:	f7ff fee6 	bl	80068ac <_printf_common>
 8006ae0:	3001      	adds	r0, #1
 8006ae2:	d14a      	bne.n	8006b7a <_printf_i+0x1f2>
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	b004      	add	sp, #16
 8006aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aee:	6823      	ldr	r3, [r4, #0]
 8006af0:	f043 0320 	orr.w	r3, r3, #32
 8006af4:	6023      	str	r3, [r4, #0]
 8006af6:	4833      	ldr	r0, [pc, #204]	@ (8006bc4 <_printf_i+0x23c>)
 8006af8:	2778      	movs	r7, #120	@ 0x78
 8006afa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	6831      	ldr	r1, [r6, #0]
 8006b02:	061f      	lsls	r7, r3, #24
 8006b04:	f851 5b04 	ldr.w	r5, [r1], #4
 8006b08:	d402      	bmi.n	8006b10 <_printf_i+0x188>
 8006b0a:	065f      	lsls	r7, r3, #25
 8006b0c:	bf48      	it	mi
 8006b0e:	b2ad      	uxthmi	r5, r5
 8006b10:	6031      	str	r1, [r6, #0]
 8006b12:	07d9      	lsls	r1, r3, #31
 8006b14:	bf44      	itt	mi
 8006b16:	f043 0320 	orrmi.w	r3, r3, #32
 8006b1a:	6023      	strmi	r3, [r4, #0]
 8006b1c:	b11d      	cbz	r5, 8006b26 <_printf_i+0x19e>
 8006b1e:	2310      	movs	r3, #16
 8006b20:	e7ac      	b.n	8006a7c <_printf_i+0xf4>
 8006b22:	4827      	ldr	r0, [pc, #156]	@ (8006bc0 <_printf_i+0x238>)
 8006b24:	e7e9      	b.n	8006afa <_printf_i+0x172>
 8006b26:	6823      	ldr	r3, [r4, #0]
 8006b28:	f023 0320 	bic.w	r3, r3, #32
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	e7f6      	b.n	8006b1e <_printf_i+0x196>
 8006b30:	4616      	mov	r6, r2
 8006b32:	e7bd      	b.n	8006ab0 <_printf_i+0x128>
 8006b34:	6833      	ldr	r3, [r6, #0]
 8006b36:	6825      	ldr	r5, [r4, #0]
 8006b38:	6961      	ldr	r1, [r4, #20]
 8006b3a:	1d18      	adds	r0, r3, #4
 8006b3c:	6030      	str	r0, [r6, #0]
 8006b3e:	062e      	lsls	r6, r5, #24
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	d501      	bpl.n	8006b48 <_printf_i+0x1c0>
 8006b44:	6019      	str	r1, [r3, #0]
 8006b46:	e002      	b.n	8006b4e <_printf_i+0x1c6>
 8006b48:	0668      	lsls	r0, r5, #25
 8006b4a:	d5fb      	bpl.n	8006b44 <_printf_i+0x1bc>
 8006b4c:	8019      	strh	r1, [r3, #0]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	6123      	str	r3, [r4, #16]
 8006b52:	4616      	mov	r6, r2
 8006b54:	e7bc      	b.n	8006ad0 <_printf_i+0x148>
 8006b56:	6833      	ldr	r3, [r6, #0]
 8006b58:	1d1a      	adds	r2, r3, #4
 8006b5a:	6032      	str	r2, [r6, #0]
 8006b5c:	681e      	ldr	r6, [r3, #0]
 8006b5e:	6862      	ldr	r2, [r4, #4]
 8006b60:	2100      	movs	r1, #0
 8006b62:	4630      	mov	r0, r6
 8006b64:	f7f9 fb34 	bl	80001d0 <memchr>
 8006b68:	b108      	cbz	r0, 8006b6e <_printf_i+0x1e6>
 8006b6a:	1b80      	subs	r0, r0, r6
 8006b6c:	6060      	str	r0, [r4, #4]
 8006b6e:	6863      	ldr	r3, [r4, #4]
 8006b70:	6123      	str	r3, [r4, #16]
 8006b72:	2300      	movs	r3, #0
 8006b74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b78:	e7aa      	b.n	8006ad0 <_printf_i+0x148>
 8006b7a:	6923      	ldr	r3, [r4, #16]
 8006b7c:	4632      	mov	r2, r6
 8006b7e:	4649      	mov	r1, r9
 8006b80:	4640      	mov	r0, r8
 8006b82:	47d0      	blx	sl
 8006b84:	3001      	adds	r0, #1
 8006b86:	d0ad      	beq.n	8006ae4 <_printf_i+0x15c>
 8006b88:	6823      	ldr	r3, [r4, #0]
 8006b8a:	079b      	lsls	r3, r3, #30
 8006b8c:	d413      	bmi.n	8006bb6 <_printf_i+0x22e>
 8006b8e:	68e0      	ldr	r0, [r4, #12]
 8006b90:	9b03      	ldr	r3, [sp, #12]
 8006b92:	4298      	cmp	r0, r3
 8006b94:	bfb8      	it	lt
 8006b96:	4618      	movlt	r0, r3
 8006b98:	e7a6      	b.n	8006ae8 <_printf_i+0x160>
 8006b9a:	2301      	movs	r3, #1
 8006b9c:	4632      	mov	r2, r6
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	4640      	mov	r0, r8
 8006ba2:	47d0      	blx	sl
 8006ba4:	3001      	adds	r0, #1
 8006ba6:	d09d      	beq.n	8006ae4 <_printf_i+0x15c>
 8006ba8:	3501      	adds	r5, #1
 8006baa:	68e3      	ldr	r3, [r4, #12]
 8006bac:	9903      	ldr	r1, [sp, #12]
 8006bae:	1a5b      	subs	r3, r3, r1
 8006bb0:	42ab      	cmp	r3, r5
 8006bb2:	dcf2      	bgt.n	8006b9a <_printf_i+0x212>
 8006bb4:	e7eb      	b.n	8006b8e <_printf_i+0x206>
 8006bb6:	2500      	movs	r5, #0
 8006bb8:	f104 0619 	add.w	r6, r4, #25
 8006bbc:	e7f5      	b.n	8006baa <_printf_i+0x222>
 8006bbe:	bf00      	nop
 8006bc0:	08006f7d 	.word	0x08006f7d
 8006bc4:	08006f8e 	.word	0x08006f8e

08006bc8 <__sflush_r>:
 8006bc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd0:	0716      	lsls	r6, r2, #28
 8006bd2:	4605      	mov	r5, r0
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	d454      	bmi.n	8006c82 <__sflush_r+0xba>
 8006bd8:	684b      	ldr	r3, [r1, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	dc02      	bgt.n	8006be4 <__sflush_r+0x1c>
 8006bde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	dd48      	ble.n	8006c76 <__sflush_r+0xae>
 8006be4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006be6:	2e00      	cmp	r6, #0
 8006be8:	d045      	beq.n	8006c76 <__sflush_r+0xae>
 8006bea:	2300      	movs	r3, #0
 8006bec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006bf0:	682f      	ldr	r7, [r5, #0]
 8006bf2:	6a21      	ldr	r1, [r4, #32]
 8006bf4:	602b      	str	r3, [r5, #0]
 8006bf6:	d030      	beq.n	8006c5a <__sflush_r+0x92>
 8006bf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006bfa:	89a3      	ldrh	r3, [r4, #12]
 8006bfc:	0759      	lsls	r1, r3, #29
 8006bfe:	d505      	bpl.n	8006c0c <__sflush_r+0x44>
 8006c00:	6863      	ldr	r3, [r4, #4]
 8006c02:	1ad2      	subs	r2, r2, r3
 8006c04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006c06:	b10b      	cbz	r3, 8006c0c <__sflush_r+0x44>
 8006c08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006c0a:	1ad2      	subs	r2, r2, r3
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006c10:	6a21      	ldr	r1, [r4, #32]
 8006c12:	4628      	mov	r0, r5
 8006c14:	47b0      	blx	r6
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	89a3      	ldrh	r3, [r4, #12]
 8006c1a:	d106      	bne.n	8006c2a <__sflush_r+0x62>
 8006c1c:	6829      	ldr	r1, [r5, #0]
 8006c1e:	291d      	cmp	r1, #29
 8006c20:	d82b      	bhi.n	8006c7a <__sflush_r+0xb2>
 8006c22:	4a2a      	ldr	r2, [pc, #168]	@ (8006ccc <__sflush_r+0x104>)
 8006c24:	410a      	asrs	r2, r1
 8006c26:	07d6      	lsls	r6, r2, #31
 8006c28:	d427      	bmi.n	8006c7a <__sflush_r+0xb2>
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	6062      	str	r2, [r4, #4]
 8006c2e:	04d9      	lsls	r1, r3, #19
 8006c30:	6922      	ldr	r2, [r4, #16]
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	d504      	bpl.n	8006c40 <__sflush_r+0x78>
 8006c36:	1c42      	adds	r2, r0, #1
 8006c38:	d101      	bne.n	8006c3e <__sflush_r+0x76>
 8006c3a:	682b      	ldr	r3, [r5, #0]
 8006c3c:	b903      	cbnz	r3, 8006c40 <__sflush_r+0x78>
 8006c3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006c40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006c42:	602f      	str	r7, [r5, #0]
 8006c44:	b1b9      	cbz	r1, 8006c76 <__sflush_r+0xae>
 8006c46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006c4a:	4299      	cmp	r1, r3
 8006c4c:	d002      	beq.n	8006c54 <__sflush_r+0x8c>
 8006c4e:	4628      	mov	r0, r5
 8006c50:	f7ff fbf2 	bl	8006438 <_free_r>
 8006c54:	2300      	movs	r3, #0
 8006c56:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c58:	e00d      	b.n	8006c76 <__sflush_r+0xae>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b0      	blx	r6
 8006c60:	4602      	mov	r2, r0
 8006c62:	1c50      	adds	r0, r2, #1
 8006c64:	d1c9      	bne.n	8006bfa <__sflush_r+0x32>
 8006c66:	682b      	ldr	r3, [r5, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d0c6      	beq.n	8006bfa <__sflush_r+0x32>
 8006c6c:	2b1d      	cmp	r3, #29
 8006c6e:	d001      	beq.n	8006c74 <__sflush_r+0xac>
 8006c70:	2b16      	cmp	r3, #22
 8006c72:	d11e      	bne.n	8006cb2 <__sflush_r+0xea>
 8006c74:	602f      	str	r7, [r5, #0]
 8006c76:	2000      	movs	r0, #0
 8006c78:	e022      	b.n	8006cc0 <__sflush_r+0xf8>
 8006c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006c7e:	b21b      	sxth	r3, r3
 8006c80:	e01b      	b.n	8006cba <__sflush_r+0xf2>
 8006c82:	690f      	ldr	r7, [r1, #16]
 8006c84:	2f00      	cmp	r7, #0
 8006c86:	d0f6      	beq.n	8006c76 <__sflush_r+0xae>
 8006c88:	0793      	lsls	r3, r2, #30
 8006c8a:	680e      	ldr	r6, [r1, #0]
 8006c8c:	bf08      	it	eq
 8006c8e:	694b      	ldreq	r3, [r1, #20]
 8006c90:	600f      	str	r7, [r1, #0]
 8006c92:	bf18      	it	ne
 8006c94:	2300      	movne	r3, #0
 8006c96:	eba6 0807 	sub.w	r8, r6, r7
 8006c9a:	608b      	str	r3, [r1, #8]
 8006c9c:	f1b8 0f00 	cmp.w	r8, #0
 8006ca0:	dde9      	ble.n	8006c76 <__sflush_r+0xae>
 8006ca2:	6a21      	ldr	r1, [r4, #32]
 8006ca4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006ca6:	4643      	mov	r3, r8
 8006ca8:	463a      	mov	r2, r7
 8006caa:	4628      	mov	r0, r5
 8006cac:	47b0      	blx	r6
 8006cae:	2800      	cmp	r0, #0
 8006cb0:	dc08      	bgt.n	8006cc4 <__sflush_r+0xfc>
 8006cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006cba:	81a3      	strh	r3, [r4, #12]
 8006cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cc4:	4407      	add	r7, r0
 8006cc6:	eba8 0800 	sub.w	r8, r8, r0
 8006cca:	e7e7      	b.n	8006c9c <__sflush_r+0xd4>
 8006ccc:	dfbffffe 	.word	0xdfbffffe

08006cd0 <_fflush_r>:
 8006cd0:	b538      	push	{r3, r4, r5, lr}
 8006cd2:	690b      	ldr	r3, [r1, #16]
 8006cd4:	4605      	mov	r5, r0
 8006cd6:	460c      	mov	r4, r1
 8006cd8:	b913      	cbnz	r3, 8006ce0 <_fflush_r+0x10>
 8006cda:	2500      	movs	r5, #0
 8006cdc:	4628      	mov	r0, r5
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	b118      	cbz	r0, 8006cea <_fflush_r+0x1a>
 8006ce2:	6a03      	ldr	r3, [r0, #32]
 8006ce4:	b90b      	cbnz	r3, 8006cea <_fflush_r+0x1a>
 8006ce6:	f7ff f9ad 	bl	8006044 <__sinit>
 8006cea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d0f3      	beq.n	8006cda <_fflush_r+0xa>
 8006cf2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006cf4:	07d0      	lsls	r0, r2, #31
 8006cf6:	d404      	bmi.n	8006d02 <_fflush_r+0x32>
 8006cf8:	0599      	lsls	r1, r3, #22
 8006cfa:	d402      	bmi.n	8006d02 <_fflush_r+0x32>
 8006cfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cfe:	f7ff fb98 	bl	8006432 <__retarget_lock_acquire_recursive>
 8006d02:	4628      	mov	r0, r5
 8006d04:	4621      	mov	r1, r4
 8006d06:	f7ff ff5f 	bl	8006bc8 <__sflush_r>
 8006d0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d0c:	07da      	lsls	r2, r3, #31
 8006d0e:	4605      	mov	r5, r0
 8006d10:	d4e4      	bmi.n	8006cdc <_fflush_r+0xc>
 8006d12:	89a3      	ldrh	r3, [r4, #12]
 8006d14:	059b      	lsls	r3, r3, #22
 8006d16:	d4e1      	bmi.n	8006cdc <_fflush_r+0xc>
 8006d18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d1a:	f7ff fb8b 	bl	8006434 <__retarget_lock_release_recursive>
 8006d1e:	e7dd      	b.n	8006cdc <_fflush_r+0xc>

08006d20 <__swhatbuf_r>:
 8006d20:	b570      	push	{r4, r5, r6, lr}
 8006d22:	460c      	mov	r4, r1
 8006d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d28:	2900      	cmp	r1, #0
 8006d2a:	b096      	sub	sp, #88	@ 0x58
 8006d2c:	4615      	mov	r5, r2
 8006d2e:	461e      	mov	r6, r3
 8006d30:	da0d      	bge.n	8006d4e <__swhatbuf_r+0x2e>
 8006d32:	89a3      	ldrh	r3, [r4, #12]
 8006d34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006d38:	f04f 0100 	mov.w	r1, #0
 8006d3c:	bf14      	ite	ne
 8006d3e:	2340      	movne	r3, #64	@ 0x40
 8006d40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006d44:	2000      	movs	r0, #0
 8006d46:	6031      	str	r1, [r6, #0]
 8006d48:	602b      	str	r3, [r5, #0]
 8006d4a:	b016      	add	sp, #88	@ 0x58
 8006d4c:	bd70      	pop	{r4, r5, r6, pc}
 8006d4e:	466a      	mov	r2, sp
 8006d50:	f000 f848 	bl	8006de4 <_fstat_r>
 8006d54:	2800      	cmp	r0, #0
 8006d56:	dbec      	blt.n	8006d32 <__swhatbuf_r+0x12>
 8006d58:	9901      	ldr	r1, [sp, #4]
 8006d5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006d5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006d62:	4259      	negs	r1, r3
 8006d64:	4159      	adcs	r1, r3
 8006d66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006d6a:	e7eb      	b.n	8006d44 <__swhatbuf_r+0x24>

08006d6c <__smakebuf_r>:
 8006d6c:	898b      	ldrh	r3, [r1, #12]
 8006d6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d70:	079d      	lsls	r5, r3, #30
 8006d72:	4606      	mov	r6, r0
 8006d74:	460c      	mov	r4, r1
 8006d76:	d507      	bpl.n	8006d88 <__smakebuf_r+0x1c>
 8006d78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	6123      	str	r3, [r4, #16]
 8006d80:	2301      	movs	r3, #1
 8006d82:	6163      	str	r3, [r4, #20]
 8006d84:	b003      	add	sp, #12
 8006d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d88:	ab01      	add	r3, sp, #4
 8006d8a:	466a      	mov	r2, sp
 8006d8c:	f7ff ffc8 	bl	8006d20 <__swhatbuf_r>
 8006d90:	9f00      	ldr	r7, [sp, #0]
 8006d92:	4605      	mov	r5, r0
 8006d94:	4639      	mov	r1, r7
 8006d96:	4630      	mov	r0, r6
 8006d98:	f7ff fbba 	bl	8006510 <_malloc_r>
 8006d9c:	b948      	cbnz	r0, 8006db2 <__smakebuf_r+0x46>
 8006d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006da2:	059a      	lsls	r2, r3, #22
 8006da4:	d4ee      	bmi.n	8006d84 <__smakebuf_r+0x18>
 8006da6:	f023 0303 	bic.w	r3, r3, #3
 8006daa:	f043 0302 	orr.w	r3, r3, #2
 8006dae:	81a3      	strh	r3, [r4, #12]
 8006db0:	e7e2      	b.n	8006d78 <__smakebuf_r+0xc>
 8006db2:	89a3      	ldrh	r3, [r4, #12]
 8006db4:	6020      	str	r0, [r4, #0]
 8006db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006dba:	81a3      	strh	r3, [r4, #12]
 8006dbc:	9b01      	ldr	r3, [sp, #4]
 8006dbe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006dc2:	b15b      	cbz	r3, 8006ddc <__smakebuf_r+0x70>
 8006dc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc8:	4630      	mov	r0, r6
 8006dca:	f000 f81d 	bl	8006e08 <_isatty_r>
 8006dce:	b128      	cbz	r0, 8006ddc <__smakebuf_r+0x70>
 8006dd0:	89a3      	ldrh	r3, [r4, #12]
 8006dd2:	f023 0303 	bic.w	r3, r3, #3
 8006dd6:	f043 0301 	orr.w	r3, r3, #1
 8006dda:	81a3      	strh	r3, [r4, #12]
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	431d      	orrs	r5, r3
 8006de0:	81a5      	strh	r5, [r4, #12]
 8006de2:	e7cf      	b.n	8006d84 <__smakebuf_r+0x18>

08006de4 <_fstat_r>:
 8006de4:	b538      	push	{r3, r4, r5, lr}
 8006de6:	4d07      	ldr	r5, [pc, #28]	@ (8006e04 <_fstat_r+0x20>)
 8006de8:	2300      	movs	r3, #0
 8006dea:	4604      	mov	r4, r0
 8006dec:	4608      	mov	r0, r1
 8006dee:	4611      	mov	r1, r2
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	f7f9 ff72 	bl	8000cda <_fstat>
 8006df6:	1c43      	adds	r3, r0, #1
 8006df8:	d102      	bne.n	8006e00 <_fstat_r+0x1c>
 8006dfa:	682b      	ldr	r3, [r5, #0]
 8006dfc:	b103      	cbz	r3, 8006e00 <_fstat_r+0x1c>
 8006dfe:	6023      	str	r3, [r4, #0]
 8006e00:	bd38      	pop	{r3, r4, r5, pc}
 8006e02:	bf00      	nop
 8006e04:	20000568 	.word	0x20000568

08006e08 <_isatty_r>:
 8006e08:	b538      	push	{r3, r4, r5, lr}
 8006e0a:	4d06      	ldr	r5, [pc, #24]	@ (8006e24 <_isatty_r+0x1c>)
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	4604      	mov	r4, r0
 8006e10:	4608      	mov	r0, r1
 8006e12:	602b      	str	r3, [r5, #0]
 8006e14:	f7f9 ff71 	bl	8000cfa <_isatty>
 8006e18:	1c43      	adds	r3, r0, #1
 8006e1a:	d102      	bne.n	8006e22 <_isatty_r+0x1a>
 8006e1c:	682b      	ldr	r3, [r5, #0]
 8006e1e:	b103      	cbz	r3, 8006e22 <_isatty_r+0x1a>
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	bd38      	pop	{r3, r4, r5, pc}
 8006e24:	20000568 	.word	0x20000568

08006e28 <_sbrk_r>:
 8006e28:	b538      	push	{r3, r4, r5, lr}
 8006e2a:	4d06      	ldr	r5, [pc, #24]	@ (8006e44 <_sbrk_r+0x1c>)
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	4604      	mov	r4, r0
 8006e30:	4608      	mov	r0, r1
 8006e32:	602b      	str	r3, [r5, #0]
 8006e34:	f7f9 ff7a 	bl	8000d2c <_sbrk>
 8006e38:	1c43      	adds	r3, r0, #1
 8006e3a:	d102      	bne.n	8006e42 <_sbrk_r+0x1a>
 8006e3c:	682b      	ldr	r3, [r5, #0]
 8006e3e:	b103      	cbz	r3, 8006e42 <_sbrk_r+0x1a>
 8006e40:	6023      	str	r3, [r4, #0]
 8006e42:	bd38      	pop	{r3, r4, r5, pc}
 8006e44:	20000568 	.word	0x20000568

08006e48 <_init>:
 8006e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e4a:	bf00      	nop
 8006e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e4e:	bc08      	pop	{r3}
 8006e50:	469e      	mov	lr, r3
 8006e52:	4770      	bx	lr

08006e54 <_fini>:
 8006e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e56:	bf00      	nop
 8006e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e5a:	bc08      	pop	{r3}
 8006e5c:	469e      	mov	lr, r3
 8006e5e:	4770      	bx	lr
